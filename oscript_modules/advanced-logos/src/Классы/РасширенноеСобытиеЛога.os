Перем Уровень;
Перем Сообщение;
Перем ФорматированноеСообщение;
Перем ИмяЛога;
Перем ВремяСобытия;
Перем УровеньЛога;
Перем ДополнительныеПоля;

Перем СобытиеЛога;


Процедура ПриСозданииОбъекта(ПИмяЛога = "", ПУровень = "",
							ПСообщение = "", ПВремяСобытия = 0,
							ПУровеньЛога = 0, ПДополнительныеПоля = Неопределено)

	Уровень = ПУровень;
	УровеньЛога = ПУровеньЛога;
	Сообщение = ПСообщение;
	ИмяЛога = ПИмяЛога;
	ВремяСобытия = ПВремяСобытия;
	ДополнительныеПоля = Новый Соответствие();
	
	Если Не ПДополнительныеПоля = Неопределено Тогда
		ДополнительныеПоля = ПДополнительныеПоля;	
	КонецЕсли;

	ФорматированноеСообщение = "";
	
КонецПроцедуры

Процедура ИзСобытияЛога(Знач СобытиеЛога) Экспорт

	Уровень = СобытиеЛога.ПолучитьУровень();
	Сообщение = СобытиеЛога.ПолучитьСообщение();
	ИмяЛога = СобытиеЛога.ПолучитьИмяЛога();
	ВремяСобытия = СобытиеЛога.ПолучитьВремяСобытия();
	
	Если ЕстьМетодПолучитьДополнительныеПоля(СобытиеЛога) Тогда
		ДополнительныеПоля = СобытиеЛога.ПолучитьДополнительныеПоля();
	Иначе
		ДополнительныеПоля = Новый Соответствие();
 	КонецЕсли;
	
КонецПроцедуры

Процедура ИзСтрокиJSON(Знач СтрокаJSON) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		
	Данные = ПрочитатьJSON(ЧтениеJSON);

	Уровень = Данные["level"];
	Сообщение = Данные["msg"];
	ИмяЛога = Данные["log"];
	УровеньЛога = 0;
	ВремяСобытия = ВремяВМилисекундах(Данные["time"]);
	
	ДополнительныеПоля = ПрочитатьДополнительныеПоля(Данные);
 		
КонецПроцедуры

Функция ПрочитатьДополнительныеПоля(Знач JSONСоотвествие)
	
	ДопПоля = Новый Соответствие();

	Для каждого КлючЗначение Из JSONСоотвествие Цикл
		
		Если ЭтоСтандартноеПоле(КлючЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;

		ДопПоля.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);

	КонецЦикла;

	Возврат ДопПоля;

КонецФункции

Функция ЭтоСтандартноеПоле(Знач ИмяПоля)
	
	нИмяПоля = НРег(ИмяПоля);

	Возврат нИмяПоля = "time"
		ИЛИ нИмяПоля = "log"
		ИЛИ нИмяПоля = "msg"
		ИЛИ нИмяПоля = "level";

КонецФункции

Функция ВремяВМилисекундах(Знач ДатаВремя)
	
	Возврат (ДатаВремя - Дата("00010101")) * 1000;

КонецФункции

Функция ЕстьМетодПолучитьДополнительныеПоля(Знач СобытиеЛога)
	
	Рефлектор = Новый Рефлектор;
	Методы = Рефлектор.ПолучитьТаблицуМетодов(СобытиеЛога);
	МетодПолучитьДополнительныеПоля = Методы.Найти("ПолучитьДополнительныеПоля");
	
	Возврат Не МетодПолучитьДополнительныеПоля = Неопределено;

КонецФункции


// Получить уровень сообщения
//
//  Возвращаемое значение:
//   УровниЛога.НаименованиеУровня - Уровень лога, установленный при формировании сообщения
//
Функция ПолучитьУровень() Экспорт
	Возврат Уровень;
КонецФункции

// Получить уровень лога
//
//  Возвращаемое значение:
//   УровниЛога.НаименованиеУровня - Уровень лога, установленный при формировании сообщения
//
Функция ПолучитьУровеньЛога() Экспорт
	Возврат УровеньЛога;
КонецФункции

// Получить текст сообщения
//
//  Возвращаемое значение:
//   Строка - Текст сообщения
//
Функция ПолучитьСообщение() Экспорт
	Возврат Сообщение;
КонецФункции

// Получить форматированный текст сообщения
//
//  Возвращаемое значение:
//   Строка - Форматированный текст сообщения
//
Функция ПолучитьФорматированноеСообщение() Экспорт
	Возврат ФорматированноеСообщение;
КонецФункции

// Получить имя лога
//
//  Возвращаемое значение:
//   Строка - Имя лога
//
Функция ПолучитьИмяЛога() Экспорт
	Возврат ИмяЛога;
КонецФункции

// Получить дату-время события
//
//  Возвращаемое значение:
//   Число - Универсальная дата-время события в миллисекундах
//
Функция ПолучитьВремяСобытия() Экспорт
	Возврат ВремяСобытия;
КонецФункции

// Получить дополнительные поля события
//
// Возвращаемое значение:
//   Соответствие - дополнительные поля события
//
Функция ПолучитьДополнительныеПоля() Экспорт
	Возврат ДополнительныеПоля;
КонецФункции