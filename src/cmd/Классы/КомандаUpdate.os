#Использовать "../../core"
#Использовать datetime
//    Copyright 2018 khorevaa
// 
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
Перем Лог;

Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("u db-user", "", "пользователь информационной базы")
				.ВОкружении("DB_USER IB_USER");
	
	Команда.Опция("p db-pwd", "", "пароль пользователя информационной базы")
				.ВОкружении("DB_PASSWORD IB_PWD");

	Команда.Опция("U uc-code", "", "ключ разрешения запуска")
				.ВОкружении("DB_UC_CODE IB_UC_CODE");

	Команда.Опция("v v8version", "", "версия платформы для запуска")
				.ВОкружении("V8VERSION");

	Команда.Опция("d work-dir", ТекущийКаталог(), "рабочий каталог")
				.ПоУмолчанию(ПараметрыПриложения.КаталогДанныхПриложения()); 

	Команда.Аргумент("FILE", "", "Путь к файлу с настройками выполнения");
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ПараметрыПриложения.УстановитьФорматВыводаЛогов(ЭтотОбъект);

	ПутьКФайлуНастройки = Команда.ЗначениеАргумента("FILE");
	
	КлючРазрешенияЗапуска = Команда.ЗначениеОпции("uc-code");
	
	ПользовательИБ	= Команда.ЗначениеОпции("db-user");
	ПарольИБ	= Команда.ЗначениеОпции("db-pwd");
	ВерсияПлатформы = Команда.ЗначениеОпции("v8version");
	КаталогКешаФайлов = Команда.ЗначениеОпции("work-dir");
	
	ФайлЧтения = Новый Файл(ПутьКФайлуНастройки);
	Если Не ФайлЧтения.Существует() Тогда
		ВызватьИсключение "Не найден файл настройки выполнения";
	КонецЕсли;

	НастройкиОбновления = ПрочитатьВСоответствие(ФайлЧтения.ПолноеИмя, ФайлЧтения.Расширение);

	Если ТипЗнч(НастройкиОбновления) = Тип("Массив") Тогда
		
		МассивНастроекОбновления = НастройкиОбновления
	
	Иначе
		МассивНастроекОбновления = Новый Массив;
		МассивНастроекОбновления.Добавить(НастройкиОбновления);

	КонецЕсли;

	ПользовательскимиПараметры = СформироватьПользовательскиеНастройки(ПользовательИБ, ПарольИБ, ВерсияПлатформы, КлючРазрешенияЗапуска);
	
	Лог.Информация("-----------------------------------------");	
	
	Для каждого НастройкаОбновления Из МассивНастроекОбновления Цикл

		Лог.Информация("Запуск по настройке <%1>", НастройкаОбновления["name"]);	
		ВыполнитьОбновлениеПоНастройке(НастройкаОбновления, КаталогКешаФайлов, ПользовательскимиПараметры);
		Лог.Информация("-----------------------------------------");	
		
	КонецЦикла;

	Лог.Информация("Работа завершена");

КонецПроцедуры

Функция ПрочитатьФайл(Знач ПутьКФайлу)

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, "utf-8");
	ТекстФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат ТекстФайла;

КонецФункции

Процедура ДополнитьПользовательскимиПараметрами(НастройкаОбновления, ПользовательскимиПараметры)
		
	ПараметрыПодключения = ПользовательскимиПараметры.ПараметрыПодключения;

	Для каждого ПараметрПодключения Из ПараметрыПодключения Цикл
		
		НастройкаОбновления.ПараметрыПодключения.Вставить(ПараметрПодключения.Ключ, ПараметрПодключения.Значение);

	КонецЦикла;

КонецПроцедуры

Функция СформироватьПользовательскиеНастройки(ПользовательИБ, ПарольИБ, ВерсияПлатформы, КлючРазрешенияЗапуска)
	
	ПользовательскиеПараметры = Новый Структура();
	ПараметрыПодключения = Новый Структура();

	Если Не ПустаяСтрока(ПользовательИБ) Тогда
		ПараметрыПодключения.Вставить("Пользователь", ПользовательИБ);
	КонецЕсли;
	Если Не ПустаяСтрока(ПарольИБ) Тогда
		ПараметрыПодключения.Вставить("Пароль", ПарольИБ);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда
		ПараметрыПодключения.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	КонецЕсли;

	Если Не ПустаяСтрока(КлючРазрешенияЗапуска) Тогда
		ПараметрыПодключения.Вставить("КлючРазрешенияЗапуска", КлючРазрешенияЗапуска);
	КонецЕсли;

	ПользовательскиеПараметры.Вставить("ПараметрыПодключения", ПараметрыПодключения);
	
	Возврат ПользовательскиеПараметры;

КонецФункции

Функция ПрочитатьВСоответствие(Знач ПутьКФайлу, Знач РасширениеФайла)
	
	Результат = НОвый Соответствие();

	Если НРег(РасширениеФайла) = ".yaml" Тогда
		
		ТекстФайла = ПрочитатьФайл(ПутьКФайлу);
		Процессор = Новый ПарсерYAML;
		Результат = Процессор.ПрочитатьYaml(ТекстФайла);
	ИначеЕсли НРег(РасширениеФайла) = ".json" Тогда

		ТекстФайла = ПрочитатьФайл(ПутьКФайлу);
		Парсер = Новый ПарсерJSON;
		Результат = Парсер.ПрочитатьJSON(ТекстФайла);
	Иначе
		ВызватьИсключение СтрШаблон("Неизвестный формат файла настроек выполнения. Текущий формат <%1>", РасширениеФайла);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ВыполнитьОбновлениеПоНастройке(НастройкаОбновленияБазы, КаталогКешаФайлов, ПользовательскимиПараметры)
	
	НастройкиОбновления = Новый НастройкаОбновления();
	НастройкиОбновления.УстановитьКешФайлов(КаталогКешаФайлов);
	НастройкиОбновления.Заполнить(НастройкаОбновленияБазы);
	
	ДополнитьПользовательскимиПараметрами(НастройкиОбновления, ПользовательскимиПараметры);
		
	ПроцессорОбновления = Новый МенеджерОбновления();

	ПараметрыПриложения.ДобавитьВыводЛогаВФайл(ПроцессорОбновления);

	РезультатВыполнения = ПроцессорОбновления.ВыполнитьОбновление(НастройкиОбновления);

	Если РезультатВыполнения.Выполнено Тогда
		Лог.Информация("Задача выполнена");
	Иначе
		Лог.КритичнаяОшибка("Задача не выполнено по причине:
		|<%1>", РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьФорматированноеСообщение(Знач СобытиеЛога) Экспорт

	ИмяЛога = СобытиеЛога.ПолучитьИмяЛога();
	УровеньЛога = УровеньЛоггера(ИмяЛога);
	УровеньСобытия = СобытиеЛога.ПолучитьУровень();
	НаименованиеУровня = УровниЛога.НаименованиеУровня(УровеньСобытия);
	Сообщение = СобытиеЛога.ПолучитьСообщение();

	ДатаВремяЛога = Дата("00010101") + (СобытиеЛога.ПолучитьВремяСобытия() / 1000);

	ВремяЛога = Формат(ДатаВремяЛога, "ДФ='yyyy/MM/dd hh:mm:ss'");
		
	Если УровеньЛога <= УровниЛога.Отладка Тогда
		ФорматированноеИмяЛога = ФорматироватьИмяЛога(ИмяЛога);
		ФорматированноеСообщение = СтрШаблон("%4 [%1] - [%2] - %3", НаименованиеУровня, ФорматированноеИмяЛога, Сообщение, ВремяЛога);
	Иначе
		ФорматированноеСообщение = СтрШаблон("%3 [%1] - %2", НаименованиеУровня, Сообщение, ВремяЛога);
	КонецЕсли;
	СтрокаПолей = ФорматироватьДополнительныеПоля(СобытиеЛога.ПолучитьДополнительныеПоля());
	Если Не ПустаяСтрока(СтрокаПолей) Тогда
		ФорматированноеСообщение = ФорматированноеСообщение + " " + СтрокаПолей;
	КонецЕсли;

	Возврат ФорматированноеСообщение;

КонецФункции

Функция ФорматироватьДополнительныеПоля(Знач ДополнительныеПоля)
	
	МассивСтрокПолей = Новый Массив();
	Для каждого Поле Из ДополнительныеПоля Цикл
		СтрокаПоля = СтрШаблон("%1=""%2""", Поле.Ключ, Поле.Значение);
		МассивСтрокПолей.Добавить(СтрокаПоля);
	КонецЦикла;

	Возврат СтрСоединить(МассивСтрокПолей, " ");

КонецФункции

Функция УровеньЛоггера(ИмяЛога)
	Логгер = Логирование.ПолучитьЛог(ИмяЛога);
	Возврат Логгер.Уровень();
КонецФункции



Функция ФорматироватьИмяЛога(Знач ИмяЛога)
	
	КоличествоСимволов = 20;
	Результат = "";

	ИтоговаяДлинаЛога = СтрДлина(ИмяЛога);
	Если ИтоговаяДлинаЛога <= КоличествоСимволов Тогда
		Возврат ИмяЛога;
	КонецЕсли;

	УзлыЛога = СтрРазделить(ИмяЛога, ".");
	
	Если УзлыЛога.Количество() = 1 Тогда 
		Результат = СократитьСтроку(ИмяЛога, КоличествоСимволов);
		Возврат Результат;
	КонецЕсли;
	
	НеобходимоСокращатьУзелЛога = Истина;
	сч = 0;
	Для Каждого УзелЛога Из УзлыЛога Цикл
		
		ПоследнийУзелЛога = сч = УзлыЛога.ВГраница();
		
		Если НеобходимоСокращатьУзелЛога Тогда
			Если ПоследнийУзелЛога Тогда
				РезультирующийУзелЛога = СократитьСтроку(УзелЛога, Макс(1, КоличествоСимволов - СтрДлина(Результат)));
			Иначе
				РезультирующийУзелЛога = Лев(УзелЛога, 1);
			КонецЕсли;
		Иначе
			РезультирующийУзелЛога = УзелЛога;
		КонецЕсли;
		
		Результат = Результат + РезультирующийУзелЛога + ".";
		ИтоговаяДлинаЛога = ИтоговаяДлинаЛога - (СтрДлина(УзелЛога) - 1);
		
		Если ИтоговаяДлинаЛога <= КоличествоСимволов Тогда
			НеобходимоСокращатьУзелЛога = Ложь;
		КонецЕсли;

		сч = сч + 1;
	КонецЦикла;
	
	Результат = Лев(Результат, СтрДлина(Результат) - 1);
	
	Возврат Результат;

КонецФункции

Функция СократитьСтроку(Знач ИсходнаяСтрока, Знач КоличествоСимволов)
	
	Результат = ИсходнаяСтрока;
	
	Если СтрДлина(Результат) <= КоличествоСимволов Тогда
		Возврат Результат;
	КонецЕсли;

	Результат = "~" + Прав(Результат, Макс(КоличествоСимволов - 1, 1));
	
	Возврат Результат;
	
КонецФункции

Лог = ПараметрыПриложения.Лог();