#Использовать workflow
#Использовать v8runner
#Использовать tempfiles

Перем Лог;
Перем ОшибкаПроцессаВыполнения;
Перем ОписаниеОшибкиОбновления;
Перем НастройкаОбновления;
Перем РабочийКонфигуратор;
Перем ЛокальныеВременныеФайлы;
Перем УправлениемСеансами;
Перем ДоступКБазеЗаблокирован;

Функция ВыполнитьОбновление(НастройкаОбновления)
	
	РезультатОбновления = Новый Структура("Выполнено, ОписаниеОшибки, Задача", Ложь, "", "");
	
	Если НастройкаОбновления.Этапы().Количество() = 0 Тогда
		Лог.Информация("Отсутствуют этапы обновления информационной базы");
		РезультатОбновления.ОписаниеОшибки = "Отсутствуют этапы обновления информационной базы";
		Возврат РезультатОбновления;
	КонецЕсли;
	
	Лог.Информация("Начало обновления информационной базы");
	
	НастроитьКонфигуратор(НастройкаОбновления);

	БизнесПроцессОбновления = СформироватьПроцессОбновления(НастройкаОбновления);

	Если БизнесПроцессОбновления.Завершен() Тогда
	
		ОписаниеОшибки = БизнесПроцессОбновления.ПолучитьОписаниеОшибки();

		Если ОписаниеОшибки = Неопределено Тогда
			РезультатОбновления.Выполнено = Истина;
		Иначе
			РезультатОбновления.ОписаниеОшибки = КраткоеПредставлениеОшибки(ОписаниеОшибки.Ошибка);
			РезультатОбновления.Задача = ОписаниеОшибки.Задача.Наименование();
		КонецЕсли;

	КонецЕсли;

	Лог.Информация("Завершено обновлении информационной базы");
	
	ЛокальныеВременныеФайлы.Удалить();

	Возврат РезультатОбновления;

КонецФункции

Процедура ДобавитьСпособВывода(ПроцессорВывода) Экспорт
	Лог.ДобавитьСпособВывода(ПроцессорВывода);
КонецПроцедуры

Функция СформироватьПроцессОбновления(НастройкаОбновления)
	
	БизнесПроцесс = Новый БизнесПроцесс("Процесс обновления информационной базы");
	БизнесПроцесс.ПриОшибкеВыполненияЗадачи(ЭтотОбъект, "ОбработкаОшибкиВыполнения");
	КонтекстБизнесПроцесса = БизнесПроцесс.ПолучитьКонтекст();
	
	БизнесПроцессОбработкиОшибок = Новый БизнесПроцесс("Процесс обработки ошибки обновления информационной базы");
	КонтекстБизнесПроцесса.Вставить("БПОбработкиОшибки", БизнесПроцессОбработкиОшибок);
	КонтекстБизнесПроцесса.Вставить("ДоступКБазеЗаблокирован", Ложь);

	БизнесПроцесс.ДобавитьЗадачу("ПолучениеДанныхДляОбновления", ЭтотОбъект, "ПолучениеДанныхДляОбновления");
	
	Если НастройкаОбновления.БлокировкаСеансов Тогда
		БизнесПроцесс.ДобавитьЗадачу("БлокировкаСеансов", ЭтотОбъект, "БлокировкаСеансов", , КонтекстБизнесПроцесса);
	КонецЕсли; 
	Если НастройкаОбновления.СозданиеБекапаИнформационнойБазы Тогда
		ПараметрыСозданияБекапа = Новый Массив();
		ПараметрыСозданияБекапа.Добавить(НастройкаОбновления.НастройкаСозданияБекапа);
		БизнесПроцесс.ДобавитьЗадачу("СозданиеБекапаИнформационнойБазы", ЭтотОбъект, "СозданиеБекапаИнформационнойБазы", ПараметрыСозданияБекапа, КонтекстБизнесПроцесса);
	КонецЕсли;
	
	ЭтапыОбновления = НастройкаОбновления.Этапы();
	
	Если Не ЭтапыОбновления["ОбновлениеКонфигурации"] = Неопределено Тогда
		
		ПараметрыОбновленияКонфигурации = Новый Массив();
		ПараметрыОбновленияКонфигурации.Добавить(НастройкаОбновления.ОбновлениеКонфигурации);
		
		БизнесПроцесс.ДобавитьЗадачу("ОбновлениеКонфигурации", ЭтотОбъект, "ОбновлениеКонфигурации", ПараметрыОбновленияКонфигурации, КонтекстБизнесПроцесса);
		
	КонецЕсли;
	
	Если Не ЭтапыОбновления["ОбновлениеРасширенийКонфигурации"] = Неопределено Тогда
		
		МассивРасширений = ЭтапыОбновления["ОбновлениеРасширенийКонфигурации"];
		
		Для каждого РасширениеОбновления Из МассивРасширений Цикл
			
			ПараметрыОбновленияРасширения = Новый Массив();
			ПараметрыОбновленияРасширения.Добавить(РасширениеОбновления.Значение);
			НазваниеЗадачи = СтрШаблон("ОбновлениеРасширенияКонфигурации_%1" + РасширениеОбновления.Ключ);
			БизнесПроцесс.ДобавитьЗадачу(НазваниеЗадачи, ЭтотОбъект, "ОбновлениеРасширенийКонфигурации", ПараметрыОбновленияРасширения, КонтекстБизнесПроцесса);
		
		КонецЦикла;
		
	КонецЕсли;
		
	Если НастройкаОбновления.БлокировкаСеансов Тогда
		БизнесПроцесс.ДобавитьЗадачу("СнятиеБлокировкиСеансов", ЭтотОбъект, "СнятиеБлокировкиСеансов", , КонтекстБизнесПроцесса);
	КонецЕсли;
	
	Возврат БизнесПроцесс;
	
КонецФункции

Процедура ОбработкаОшибкиВыполнения(ЗадачаБизнесПроцесса, ПрерватьВыполнение, СтандартнаяОбработка) Экспорт
	
	БизнесПроцессЗадачи = ЗадачаБизнесПроцесса.ПолучитьБизнесПроцесс();
	КонтекстБизнесПроцесса = БизнесПроцессЗадачи.ПолучитьКонтекст();
	БизнесПроцессОбработкиОшибок = КонтекстБизнесПроцесса.Получить("БПОбработкиОшибки");
	БизнесПроцессОбработкиОшибок.УстановитьКонтекст(КонтекстБизнесПроцесса);

	ПрерватьВыполнение = Истина;
	БизнесПроцессОбработкиОшибок.Запустить();

КонецПроцедуры

Процедура ПолучениеДанныхДляОбновления() Экспорт
	
	// TODO: Формирование кеша файлов
	
КонецПроцедуры

Процедура СозданиеБекапаИнформационнойБазы(НастройкаБекапа, КонтекстВыполнения) Экспорт
	
	// TODO: Сделать формирование бекапа
	
КонецПроцедуры

Функция НастроитьКонфигуратор(НастройкаПодключения) Экспорт
	
	Конфигуратор = Новый УправлениеКонфигуратором;
	Конфигуратор.КаталогСборки(ЛокальныеВременныеФайлы.СоздатьКаталог());
	Конфигуратор.УстановитьКонтекст(НастройкаПодключения.СтрокаПодключения,
									НастройкаПодключения.АвторизацияВИнформационнойБазе.Пользователь,
									НастройкаПодключения.АвторизацияВИнформационнойБазе.Пароль);
	Конфигуратор.ИспользоватьВерсиюПлатформы(НастройкаПодключения.ВерсияПлатформы);
	Конфигуратор.УстановитьКлючРазрешенияЗапуска(НастройкаПодключения.КлючРазрешенияЗапуска);

	Возврат Конфигуратор;
	
КонецФункции

Процедура НастроитьУправлениемСеансами(НастройкиУправленияСеансами)
	
	УправлениемСеансами = Новый УправлениемСеансамиОбновления;
	УправлениемСеансами.УстановитьНастройки(НастройкиУправленияСеансами);
	
КонецПроцедуры

Процедура Блокировка(КонтекстВыполнения) Экспорт
	
	Лог.Информация("Блокировка доступа к информационной базе");
	УправлениемСеансами.БлокировкаДоступа();

	
КонецПроцедуры

Процедура ОбновлениеРасширенийКонфигурации(ПараметрыОбновления, КонтекстВыполнения)
	
	Лог.Информация("Обновление расширения <%1> информационной базы", ПараметрыОбновления.ИмяРасширения);	
	Обновлятор = Новый ОбновляторРасширений;
	Обновлятор.УстановитьУправлениеКонфигуратором(РабочийКонфигуратор);
	Обновлятор.УстановитьНастройкиОбновления(ПараметрыОбновления);
	
	Обновлятор.Запустить();
	
КонецПроцедуры

Процедура ОбновлениеКонфигурации(ПараметрыОбновления, КонтекстВыполнения)
	
	Лог.Информация("Обновление конфигурации информационной базы");	
	Обновлятор = Новый ОбновляторКонфигурации;
	Обновлятор.УстановитьУправлениеКонфигуратором(РабочийКонфигуратор);
	Обновлятор.УстановитьНастройкиОбновления(ПараметрыОбновления);
	Обновлятор.Запустить();
	
КонецПроцедуры

Процедура Разблокировка(КонтекстВыполнения)
	
	Если КонтекстВыполнения.Получить("ДоступКБазеЗаблокирован")Тогда
		Лог.Информация("Разблокировка доступа к информационной базе");
		УправлениемСеансами.РазблокироватьДоступ();		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииОбъекта()
	
	ЛокальныеВременныеФайлы = Новый МенеджерВременныхФайлов;
	ДоступКБазеЗаблокирован = Ложь;
	
КонецПроцедуры
