#Использовать workflow
#Использовать v8runner
#Использовать tempfiles

Перем Лог;
Перем ОшибкаПроцессаВыполнения;
Перем ОписаниеОшибкиОбновления;
Перем НастройкаОбновления;
Перем РабочийКонфигуратор;
Перем ЛокальныеВременныеФайлы;
Перем УправлениеСеансами;
Перем ДоступКБазеЗаблокирован;
Перем МассивСпособовВывода;
Перем ИгнорироватьОшибкуОбновленияКонфигурации;

Перем РезервноеКопирование;

Функция ВыполнитьОбновление(НастройкаОбновления) Экспорт
	
	РезультатОбновления = Новый Структура("Выполнено, ОписаниеОшибки, Задача", Ложь, "", "");
	
	Если НЕ НастройкаОбновления.НадоЧтоТоДелать() Тогда
		Лог.Информация("Отсутствуют этапы работы с информационной базой");
		РезультатОбновления.ОписаниеОшибки = "Отсутствуют этапы работы с информационной базой";
		Возврат РезультатОбновления;
	КонецЕсли;
	
	Лог.Информация("Начало работы с информационной базой");
	
	РабочийКонфигуратор = НастроитьКонфигуратор(НастройкаОбновления);
	
	БизнесПроцессОбновления = СформироватьПроцессОбновления(НастройкаОбновления);
	
	БизнесПроцессОбновления.Запустить();

	Если БизнесПроцессОбновления.Завершен() Тогда
		
		ОписаниеОшибки = БизнесПроцессОбновления.ПолучитьОписаниеОшибки();
		
		Если ОписаниеОшибки = Неопределено Тогда
			РезультатОбновления.Выполнено = Истина;
		Иначе
			РезультатОбновления.ОписаниеОшибки = ПодробноеПредставлениеОшибки(ОписаниеОшибки.Ошибка); // TODO: Краткое - заменить
			РезультатОбновления.Задача = ОписаниеОшибки.Задача.Наименование();
		КонецЕсли;
		
	КонецЕсли;
	
	Лог.Информация("Завершена работа с информационной базой");
	
	ЛокальныеВременныеФайлы.Удалить();
	
	Возврат РезультатОбновления;
	
КонецФункции

Процедура ДобавитьСпособВывода(ПроцессорВывода) Экспорт
	
	МассивСпособовВывода.Добавить(ПроцессорВывода);
	Лог.ДобавитьСпособВывода(ПроцессорВывода);

КонецПроцедуры

Функция СформироватьПроцессОбновления(НастройкаОбновления)
	
	БизнесПроцесс = Новый БизнесПроцесс("Процесс обновления информационной базы");
	БизнесПроцесс.ПриОшибкеВыполненияЗадачи(ЭтотОбъект, "ОбработкаОшибкиВыполнения");
	КонтекстБизнесПроцесса = БизнесПроцесс.ПолучитьКонтекст();
	
	БизнесПроцессОбработкиОшибок = Новый БизнесПроцесс("Процесс обработки ошибки обновления информационной базы");
	КонтекстБизнесПроцесса.Добавить("БПОбработкиОшибки", БизнесПроцессОбработкиОшибок);
	КонтекстБизнесПроцесса.Добавить("ДоступКБазеЗаблокирован", Ложь);
	
	ПараметрыПолученияДанных = Новый Массив();
	ПараметрыПолученияДанных.Добавить(НастройкаОбновления);
	БизнесПроцесс.ДобавитьЗадачу("ПолучениеДанныхДляОбновления", ЭтотОбъект, "ПолучениеДанныхДляОбновления", ПараметрыПолученияДанных);
	
	Если НастройкаОбновления.БлокировкаСеансов() Тогда
		Лог.Отладка("Добавляю задачу <БлокировкаСеансов>");
		ПараметрыБлокировкиСеансов = Новый Массив();
		ПараметрыБлокировкиСеансов.Добавить(НастройкаОбновления);
		БизнесПроцесс.ДобавитьЗадачу("БлокировкаСеансов", ЭтотОбъект, "БлокировкаСеансов", ПараметрыБлокировкиСеансов, КонтекстБизнесПроцесса);
	КонецЕсли; 

	Если НастройкаОбновления.СозданиеБекапаИнформационнойБазы() Тогда
		ПараметрыРезервногоКопирования = Новый Массив();
		ПараметрыРезервногоКопирования.Добавить(НастройкаОбновления.ПараметрыРезервногоКопирования);
		ПараметрыРезервногоКопирования.Добавить(НастройкаОбновления);
		Лог.Отладка("Добавляю задачу <СоздатьРезервнуюКопию>");
		БизнесПроцесс.ДобавитьЗадачу("СоздатьРезервнуюКопию", ЭтотОбъект, "СоздатьРезервнуюКопию", ПараметрыРезервногоКопирования, КонтекстБизнесПроцесса);
	КонецЕсли;
		
	Если НастройкаОбновления.НадоОбновитьКонфигурацию() Тогда
		
		Лог.Отладка("Добавляю задачу <ОбновлениеКонфигурации>");

		ПараметрыОбновленияКонфигурации = Новый Массив();
		ПараметрыОбновленияКонфигурации.Добавить(НастройкаОбновления.ПараметрыОбновленияКонфигурации);
		
		БизнесПроцесс.ДобавитьЗадачу("ОбновлениеКонфигурации", ЭтотОбъект, "ОбновлениеКонфигурации", ПараметрыОбновленияКонфигурации, КонтекстБизнесПроцесса);
		
	КонецЕсли;
	
	Если НастройкаОбновления.НадоОбновитьРасширения() Тогда
		
		Лог.Отладка("Добавляю задачу <ОбновлениеРасширенийКонфигурации>");
		ПараметрыОбновленияРасширения = Новый Массив();
		ПараметрыОбновленияРасширения.Добавить(НастройкаОбновления.ПараметрыОбновленияРасширений);
		БизнесПроцесс.ДобавитьЗадачу("ОбновлениеРасширенийКонфигурации", ЭтотОбъект, "ОбновлениеРасширенийКонфигурации", ПараметрыОбновленияРасширения, КонтекстБизнесПроцесса);
		
	КонецЕсли;

	Если НастройкаОбновления.НадоЗапуститьВРежимеПредприятия() Тогда
		
		Лог.Отладка("Добавляю задачу <ЗапуститьВРежимеПредприятия>");
		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(НастройкаОбновления.ПараметрыЗапускаПредприятия);
		БизнесПроцесс.ДобавитьЗадачу("ЗапуститьВРежимеПредприятия", ЭтотОбъект, "ЗапуститьВРежимеПредприятия", ПараметрыЗапуска, КонтекстБизнесПроцесса);
		
	КонецЕсли;
	
	Если НастройкаОбновления.БлокировкаСеансов() Тогда
		Лог.Отладка("Добавляю задачу <СнятьБлокировкуСеансов>");
		БизнесПроцесс.ДобавитьЗадачу("СнятьБлокировкуСеансов", ЭтотОбъект, "СнятьБлокировкуСеансов", , КонтекстБизнесПроцесса);
	КонецЕсли;

	Если НастройкаОбновления.СозданиеБекапаИнформационнойБазы() Тогда
		Лог.Отладка("Добавляю задачу <УдалитьФайлРезервнойКопии>");
		БизнесПроцесс.ДобавитьЗадачу("УдалитьФайлРезервнойКопии", ЭтотОбъект, "УдалитьФайлРезервнойКопии", , КонтекстБизнесПроцесса);
	КонецЕсли;
	
	Возврат БизнесПроцесс;
	
КонецФункции

Процедура ОбработкаОшибкиВыполнения(ЗадачаБизнесПроцесса, ПродолжитьВыполнение, СтандартнаяОбработка) Экспорт
	
	БизнесПроцессЗадачи = ЗадачаБизнесПроцесса.БизнесПроцесс();
	
	Лог.Отладка("Обработка ошибки задачи <%1> по причине <%2>", ЗадачаБизнесПроцесса.Наименование());
	
	КонтекстБизнесПроцесса = БизнесПроцессЗадачи.ПолучитьКонтекст();
	
	БизнесПроцессОбработкиОшибок = КонтекстБизнесПроцесса.Получить("БПОбработкиОшибки");
	БизнесПроцессОбработкиОшибок.УстановитьКонтекст(КонтекстБизнесПроцесса);
	
	БизнесПроцессОбработкиОшибок.Запустить();
	
КонецПроцедуры

Процедура ПолучениеДанныхДляОбновления(НастройкаОбновления) Экспорт
	
	НастройкаОбновления.ПолучитьФайлыОбновления();
	
КонецПроцедуры

Процедура СоздатьРезервнуюКопию(Знач КонтекстВыполнения, Знач ПараметрыРезервногоКопирования, Знач НастройкаОбновления) Экспорт
	
	РезервноеКопирование = Новый РезервноеКопирование;
	ДобавитьСпособыВыводаВОбъект(РезервноеКопирование);

	РезервноеКопирование.УстановитьУправлениеКонфигуратором(РабочийКонфигуратор);

	Если Не ЗначениеЗаполнено(ПараметрыРезервногоКопирования.ИмяФайлаРезервнойКопии) Тогда
		
		ПараметрыРезервногоКопирования.ИмяФайлаРезервнойКопии = НастройкаОбновления.ИмяИнформационнойБазы();

	КонецЕсли;

	РезервноеКопирование.УстановитьНастройки(ПараметрыРезервногоКопирования);

	РезервноеКопирование.СоздатьРезервнуюКопию();

	Если РезервноеКопирование.ПриОшибкеВосстановитьИзКопии() Тогда
		
		КонтекстВыполнения.Добавить("РезервнаяКопияСделана", Истина);
		БизнесПроцессОбработкиОшибок = КонтекстВыполнения.Получить("БПОбработкиОшибки");
		БизнесПроцессОбработкиОшибок.ДобавитьЗадачу("ВосстановитьРезервнуюКопию", ЭтотОбъект, "ВосстановитьРезервнуюКопию", , КонтекстВыполнения);
		БизнесПроцессОбработкиОшибок.ДобавитьЗадачу("УдалитьФайлРезервнойКопии", ЭтотОбъект, "УдалитьФайлРезервнойКопии", , КонтекстВыполнения);

	КонецЕсли;
		
КонецПроцедуры

Процедура ВосстановитьРезервнуюКопию(Знач КонтекстВыполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(РезервноеКопирование) Тогда
		Возврат;
	КонецЕсли;

	Если КонтекстВыполнения.Получить("РезервнаяКопияСделана")
		И НЕ КонтекстВыполнения.Получить("ОбновлениеКонфигурацииУспешно") Тогда
	
		РезервноеКопирование.ВосстановитьРезервнуюКопию();		

	КонецЕсли;

КонецПроцедуры

Процедура УдалитьФайлРезервнойКопии(КонтекстВыполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(РезервноеКопирование) Тогда
		Возврат;
	КонецЕсли;

	Если КонтекстВыполнения.Получить("РезервнаяКопияСделана") 
		И РезервноеКопирование.НадоУдалитьФайлРезервнойКопии() Тогда
		
		Лог.Информация("Удаление файла резервной копии");
	
		РезервноеКопирование.УдалитьФайлРезервнойКопии();		

	КонецЕсли;

КонецПроцедуры

Функция НастроитьКонфигуратор(НастройкаПодключения)
	
	Конфигуратор = Новый УправлениеКонфигуратором;
	Конфигуратор.КаталогСборки(ЛокальныеВременныеФайлы.СоздатьКаталог());
	
	АвторизацияВИнформационнойБазе = НастройкаПодключения.АвторизацияВИнформационнойБазе();
	Конфигуратор.УстановитьКонтекст(НастройкаПодключения.СтрокаПодключения(),
									АвторизацияВИнформационнойБазе.Пользователь,
									АвторизацияВИнформационнойБазе.Пароль);

	Лог.Отладка("Устанавливаю ключ разрешения запуска <%1>", НастройкаПодключения.КлючРазрешенияЗапуска());
	Конфигуратор.ИспользоватьВерсиюПлатформы(НастройкаПодключения.ВерсияПлатформы());
	Конфигуратор.УстановитьКлючРазрешенияЗапуска(НастройкаПодключения.КлючРазрешенияЗапуска());

	Возврат Конфигуратор;
	
КонецФункции

Процедура НастроитьУправлениемСеансами(НастройкиУправленияСеансами)
	
	УправлениеСеансами = Новый УправлениеСеансами;
	ДобавитьСпособыВыводаВОбъект(УправлениеСеансами);
	УправлениеСеансами.УстановитьНастройки(НастройкиУправленияСеансами);
	
КонецПроцедуры

Процедура БлокировкаСеансов(КонтекстВыполнения, ПараметрыБлокировкиСеансов) Экспорт
	
	Если УправлениеСеансами = Неопределено Тогда
		НастроитьУправлениемСеансами(ПараметрыБлокировкиСеансов);
	КонецЕсли;

	Лог.Информация("Блокировка доступа к информационной базе");	
	УправлениеСеансами.БлокировкаДоступа();
	
	КонтекстВыполнения.Добавить("ДоступКБазеЗаблокирован", Истина);
	БизнесПроцессОбработкиОшибок = КонтекстВыполнения.Получить("БПОбработкиОшибки");
	БизнесПроцессОбработкиОшибок.ДобавитьЗадачу("СнятьБлокировкуСеансов", ЭтотОбъект, "СнятьБлокировкуСеансов", , КонтекстВыполнения);

КонецПроцедуры

Процедура ОбновлениеРасширенийКонфигурации(КонтекстВыполнения, ПараметрыОбновления) Экспорт
	
	Обновлятор = Новый ОбновляторРасширений;
	ДобавитьСпособыВыводаВОбъект(Обновлятор);
	Обновлятор.УстановитьУправлениеКонфигуратором(РабочийКонфигуратор);
	Обновлятор.УстановитьНастройкиОбновления(ПараметрыОбновления);
	Обновлятор.Запустить();
	
КонецПроцедуры

Процедура ЗапуститьВРежимеПредприятия(КонтекстВыполнения, ПараметрыЗапускаПредприятия) Экспорт

	ЗапускПредприятия = Новый ЗапускПредприятия;
	ДобавитьСпособыВыводаВОбъект(ЗапускПредприятия);

	Для каждого ПараметрыЗапуска Из ПараметрыЗапускаПредприятия Цикл
		ЗапускПредприятия.УстановитьУправлениеКонфигуратором(РабочийКонфигуратор);
		ЗапускПредприятия.УстановитьНастройки(ПараметрыЗапуска);
		ЗапускПредприятия.Запустить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеКонфигурации(КонтекстВыполнения, ПараметрыОбновления) Экспорт

	КонтекстВыполнения.Добавить("ОбновлениеКонфигурацииУспешно", Ложь);

	Обновлятор = Новый ОбновляторКонфигурации;
	ДобавитьСпособыВыводаВОбъект(Обновлятор);
	Обновлятор.УстановитьУправлениеКонфигуратором(РабочийКонфигуратор);
	Обновлятор.УстановитьНастройкиОбновления(ПараметрыОбновления);
	Обновлятор.Запустить();

	КонтекстВыполнения.Добавить("ОбновлениеКонфигурацииУспешно", Истина);

КонецПроцедуры

Процедура ДобавитьСпособыВыводаВОбъект(Знач Класс)
	
	Для каждого СпособВывода Из МассивСпособовВывода Цикл
		Класс.ДобавитьСпособВывода(СпособВывода);
	КонецЦикла;

КонецПроцедуры

Процедура СнятьБлокировкуСеансов(КонтекстВыполнения) Экспорт
	
	Если КонтекстВыполнения.Получить("ДоступКБазеЗаблокирован")Тогда
		Лог.Информация("Разблокировка доступа к информационной базе");
	
		УправлениеСеансами.РазблокироватьДоступ();		

	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииОбъекта()
	
	ЛокальныеВременныеФайлы = Новый МенеджерВременныхФайлов;
	ДоступКБазеЗаблокирован = Ложь;
	МассивСпособовВывода = Новый Массив();
	Лог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB.UpdateManager");
	//Лог.УстановитьУровень(УровниЛога.Отладка);

КонецПроцедуры
