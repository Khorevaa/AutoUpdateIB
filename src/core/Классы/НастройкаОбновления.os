
#Использовать "./intrenal"
#Использовать "./intrenal/files"

#Использовать logos
#Использовать configor

Перем ЛогНастройки; // Класс Логирование

Перем ПараметрыПодключения;
Перем ПараметрыОбновленияКонфигурации;
Перем ПараметрыОбновленияРасширений;
Перем ПараметрыКластера;
Перем ПараметрыБекапа;

Функция БлокировкаСеансов() Экспорт
	Возврат ПараметрыКластера.БлокироватьСеансы;
КонецФункции

Функция СозданиеБекапаИнформационнойБазы() Экспорт
	Возврат ПараметрыБекапа.СоздаватьБекап;
КонецФункции

Функция СтрокаПодключения() Экспорт
	
	// TODO Получить  строку подключения
	Возврат ПараметрыПодключения.СтрокаПодключения;	
КонецФункции

Функция АвторизацияВИнфомарционнойБазе() Экспорт
	Возврат Новый Структура("Пользователь, Пароль", ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль);;	
КонецФункции

Функция КлючРазрешенияЗапуска() Экспорт
	Возврат ПараметрыПодключения.КлючРазрешенияЗапуска;	
КонецФункции

Функция ВерсияПлатформы() Экспорт
	Возврат ПараметрыПодключения.ВерсияПлатформы;	
КонецФункции

Процедура КонструкторПараметровПодключения()
	
	КонструкторПараметров = Новый КонструкторПараметров;

	ПодключениеКФайловойбазе = КонструкторПараметров.НовыеПараметры();
	ПодключениеКФайловойбазе
		.ПолеСтрока("ПутьККаталогу path dir", "")
		;

	ПодключениеКСервернойбазе = Конструктор.НовыеПараметры();
	ПодключениеКСервернойбазе
		.ПолеСтрока("Сервер ИмяСервера server", "")
		.ПолеСтрока("Порт ПортСервера port", "")
		.ПолеСтрока("База ИмяБазыНаСервере ИмяБазы ib-name base", "")
	;

	КонструкторПараметров.ПолеСтрока("Пользователь user usr", "")
		.ПолеСтрока("Пароль password pwd", "")
		.ПолеОбъект("СервернаяБаза server", ПодключениеКСервернойбазе)
		.ПолеОбъект("ФайловаяБаза file", ПодключениеКФайловойбазе)
		.ПолеСтрока("ВерсияПлатформы v8version", "")
		.ПолеСтрока("Наименование name ib-name", "")
		.ПолеСтрока("КлючРазрешенияЗапуска unlock-code uc", "")
		;

	Возврат КонструкторПараметров;

КонецПроцедуры


Процедура УстановитьПутьКФайлуОбновления(Знач ПутьКФайлу) Экспорт

	НастройкаПолученияФайлаОбновления = Новый Структура("Файл");
	НастройкаПолученияФайлаОбновления.Файл = Новый Соответствие();
	НастройкаПолученияФайлаОбновления.Файл.Вставить("ПутьКФайлу", ПутьКФайлу);
	ФайлОбновления = Новый ПолучениеФайлов();
	ФайлОбновления.КаталогКешированияФайлов(КаталогКешаФайлов).Параметры(НастройкаПолученияФайлаОбновления);
	
КонецПроцедуры


// Устанавливает параметры авторизации в хранилище конфигурации 1С
//
// Параметры:
//   Пользователь - Строка - пользователь хранилища конфигурации 1С
//   Пароль - Строка - пароль пользователя хранилища конфигурации 1С
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция АвторизацияВИнфомарционнойБазе(Знач Пользователь, Знач Пароль) Экспорт

	АвторизацияВИнфомарционнойБазе.Вставить("Пользователь" , Пользователь);
	АвторизацияВИнфомарционнойБазе.Вставить("Пароль", Пароль);

	Возврат ЭтотОбъект;

КонецФункции

Процедура УстановитьКаталогКешаФайлов(НовыйКаталогКешаФайлов) Экспорт
	КаталогКешаФайлов = НовыйКаталогКешаФайлов;
КонецПроцедуры

Процедура ИзСоответствия(ВходящееСоответствие) Экспорт
	
	КонструкторВерсии = КонструкторВерсии();
	КонструкторВерсии.ИзСоответствия(ВходящееСоответствие);
	СтруктураВерсии = КонструкторВерсии.ВСтруктуру();

	ВерсияНастройки = СтруктураВерсии.Версия;

	ИндексЗначений = Новый ИндексЗначений;

	Если ВерсияНастройки = "1.0" Тогда

		КонструкторПараметров = КонструкторПараметровВерсии10();
		КонструкторПараметров.ИзСоответствия(ВходящееСоответствие);
		СоответствиеПараметров = КонструкторПараметров.ВСтруктуру();
		ИндексЗначений.Коллекция(СоответствиеПараметров);
		ПрочитатьНастройкиПоВерсии10(ИндексЗначений);

	Иначе
		ВызватьИсключение "Не корректные настройки обновления";
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьСтрокуПодключения(ИндексЗначений)
	
	ФайловаяБаза = ИндексЗначений.Значение("НастройкаПодключения.ФайловаяБаза");
	
	Если ЗначениеЗаполнено(ФайловаяБаза["ПутьККаталогу"]) Тогда
		СтрокаПодключения = СтрШаблон("/F%1", ФайловаяБаза["ПутьККаталогу"]);
	Иначе
		СервернаяБаза = ИндексЗначений.Значение("НастройкаПодключения.СервернаяБаза");
		СерверПриложений = СервернаяБаза.Сервер;
		ПортСервера = СервернаяБаза.Порт; // TODO: Доделать добавление порта в строку подключения
		ИмяБазыНаСервере = СервернаяБаза.База;
		СтрокаПодключения = СтрШаблон("/S""%1\%2""", СерверПриложений, ИмяБазыНаСервере);
	КонецЕсли;

	Пользователь = ИндексЗначений.Значение("НастройкаПодключения.Пользователь");
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Пароль = ИндексЗначений.Значение("НастройкаПодключения.Пароль");
		Если Пароль = Неопределено Тогда
			Пароль = "";
		КонецЕсли;
		АвторизацияВИнфомарционнойБазе(Пользователь, Пароль);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьНастройкиПоВерсии10(ИндексЗначений)
	
	СформироватьСтрокуПодключения(ИндексЗначений);

	ВерсияПлатформы = ЗначениеИзИндекса(ИндексЗначений, "НастройкаОбновления.ВерсияПлатформы", "8.3");
	НаСервере = ЗначениеИзИндекса(ИндексЗначений, "НастройкаОбновления.НаСервере", НаСервере);
	ДинамическоеОбновление = ЗначениеИзИндекса(ИндексЗначений, "НастройкаОбновления.Динамическое", ДинамическоеОбновление);
	ПредупрежденияКакОшибки = ЗначениеИзИндекса(ИндексЗначений, "НастройкаОбновления.ПредупрежденияКакОшибки", ПредупрежденияКакОшибки);
	ИспользоватьПолныйДистрибутив = ЗначениеИзИндекса(ИндексЗначений, "НастройкаОбновления.ИспользоватьПолныйДистрибутив", ИспользоватьПолныйДистрибутив);
	
	ЗагрузкаКонфигурацииВместоОбновления = ЗначениеИзИндекса(ИндексЗначений, "ЗагрузитьКонфигурацию", ЗагрузкаКонфигурацииВместоОбновления);
	
	БлокировкаСеансов = ЗначениеИзИндекса(ИндексЗначений, "БлокировкаСеансов.Заблокировать", БлокировкаСеансов);
	КлючРазрешенияЗапуска = ЗначениеИзИндекса(ИндексЗначений, "БлокировкаСеансов.КодРазрешенияЗапуска", КлючРазрешенияЗапуска);

	НастройкаПолученияФайлаОбновления = ЗначениеИзИндекса(ИндексЗначений, "Обновление", Неопределено);

	Если НастройкаПолученияФайлаОбновления = Неопределено Тогда
		ВызватьИсключение "Не передано настройки обновления";
	КонецЕсли;

	ФайлОбновления = Новый ПолучениеФайлов();
	ФайлОбновления.КаталогКешированияФайлов(КаталогКешаФайлов).Параметры(НастройкаПолученияФайлаОбновления);

	НастройкаПолученияФайлаПередОбновлением = ЗначениеИзИндекса(ИндексЗначений, "ПередОбновлением", "");
	НастройкаПолученияФайлаПослеОбновления = ЗначениеИзИндекса(ИндексЗначений, "ПослеОбновления", "");

	ПолучениеФайлаПередОбновлением = Новый ПолучениеФайлов();
	ПолучениеФайлаПередОбновлением.КаталогКешированияФайлов(КаталогКешаФайлов).Параметры(НастройкаПолученияФайлаПередОбновлением);

	ПолучениеФайлаПослеОбновления = Новый ПолучениеФайлов();
	ПолучениеФайлаПослеОбновления.КаталогКешированияФайлов(КаталогКешаФайлов).Параметры(НастройкаПолученияФайлаПередОбновлением);

КонецПроцедуры

Функция ЗначениеИзИндекса(Индекс, ИмяПараметра, ЗначениеПоУмолчанию)
	
	ЗначениеИзИндекса = Индекс.Значение(ИмяПараметра);

	Если НЕ ЗначениеИзИндекса = Неопределено Тогда
		Возврат ЗначениеИзИндекса;
	КонецЕсли;

	Возврат ЗначениеПоУмолчанию;

КонецФункции

Функция ПослеОбновления() Экспорт
	
	Возврат ЗначениеЗаполнено(ПолучениеФайлаПослеОбновления);

КонецФункции

Функция ПередОбновлением() Экспорт
	
	Возврат ЗначениеЗаполнено(ПолучениеФайлаПередОбновлением);

КонецФункции

Функция ИмяЛога() Экспорт
	Возврат СтрШаблон("oscript.app.AutoUpdateIB.%1", НаименованиеНастройки);
КонецФункции

Функция Лог() Экспорт
	Возврат ЛогНастройки;
КонецФункции

Процедура ДобавитьСпособВывода(ПроцессорВывода) Экспорт
	ЛогНастройки.ДобавитьСпособВывода(ПроцессорВывода);
КонецПроцедуры

#Область Интерфейс_конструктора_параметров

Функция КонструкторПараметровВерсии10()

	Конструктор = Новый КонструкторПараметров();

	ПодключениеКФайловойбазе = Конструктор.НовыеПараметры();
	ПодключениеКФайловойбазе
		.ПолеСтрока("ПутьККаталогу path dir", "")
		;

	ПодключениеКСервернойбазе = Конструктор.НовыеПараметры();
	ПодключениеКСервернойбазе
		.ПолеСтрока("Сервер ИмяСервера server", "")
		.ПолеСтрока("Порт ПортСервера port", "")
		.ПолеСтрока("База ИмяБазыНаСервере ИмяБазы ib-name base", "")
	;

	НастройкаПодключения = Конструктор.НовыеПараметры();
	НастройкаПодключения
		.ПолеСтрока("Пользователь user usr", "")
		.ПолеСтрока("Пароль password pwd", "")
		.ПолеОбъект("СервернаяБаза server", ПодключениеКСервернойбазе)
		.ПолеОбъект("ФайловаяБаза file", ПодключениеКФайловойбазе)
		;
	
	НастройкаОбновления = Конструктор.НовыеПараметры();
	НастройкаОбновления
		.ПолеСтрока("ВерсияПлатформы v8version v8", "8.3")
		.ПолеБулево("НаСервере server Server update-on-server", Истина)
		.ПолеБулево("Динамическое ДинамическоеОбновление dynamic Dynamic", Ложь)
		.ПолеБулево("ПредупрежденияКакОшибки warnings-as-errors WarningsAsErrors", Ложь)
		.ПолеБулево("ИспользоватьПолныйДистрибутив ДинамическоеОбновление dynamic", Ложь)
		.ПолеБулево("ЗагрузитьКонфигурацию load-cf", Ложь)
		;
	
	КластерПриложений = Конструктор.НовыеПараметры();
	КластерПриложений
		.ПолеСтрока("Пользователь user usr", "")
		.ПолеСтрока("Пароль password pwd", "")
		.ПолеЧисло("Порт port", 1542)
		;

	БлокировкаСеансов = Конструктор.НовыеПараметры();
	БлокировкаСеансов
		.ПолеБулево("Заблокировать block-session block-users block-ib", Ложь)
		.ПолеСтрока("КодРазрешенияЗапуска uc uc-code", "")
		.ПолеЧисло("ВремяОжиданияЗавершенияРаботы timer timer-work-off", 300 * 60)
		;

	ПолеПолученияФайлов = Новый ПолучениеФайлов;
	Конструктор
		.ПолеСтрока("Версия version config-version", "")
		.ПолеСтрока("Наименование name ib-name", "")
		.ПолеСтрока("Код code ib-code", "")
		.ПолеБулево("ЗагрузитьКонфигурацию load-cf", Ложь)
		.ПолеОбъект("НастройкаПодключения СтрокаПодключения connect-config", НастройкаПодключения)
		.ПолеОбъект("Обновление update release-update", ПолеПолученияФайлов)
		.ПолеОбъект("НастройкаОбновления update-config", НастройкаОбновления)
		.ПолеОбъект("КластерПриложений cluster cluster-config", КластерПриложений)
		.ПолеОбъект("БлокировкаСеансов session session-config", БлокировкаСеансов)
		.ПолеОбъект("ПередОбновлением pre-update", ПолеПолученияФайлов)
		.ПолеОбъект("ПослеОбновления post-update", ПолеПолученияФайлов)
		;
	
	Возврат Конструктор;

КонецФункции

Функция КонструкторВерсии()
	
	Конструктор = Новый КонструкторПараметров();
	Конструктор.ПолеСтрока("Версия version config-version", "")
	;

	Возврат Конструктор;

КонецФункции

#КонецОбласти

Процедура ПриСозданииОбъекта(Знач Наименование)
	
	НаименованиеНастройки = Наименование;
	ЛогНастройки = Логирование.ПолучитьЛог(ИмяЛога());
	// ПроцессорВыводаЛогаВТаблицуЗначений = Новый ВыводЛогаВТаблицуЗначений;
	// ЛогНастройки.ДобавитьСпособВывода(ПроцессорВыводаЛогаВТаблицуЗначений);
	АвторизацияВИнфомарционнойБазе = Новый Структура("Пользователь, Пароль", "", "");
		
	ВыводВКонсоль = Новый ВыводЛогаВКонсоль();
	ЛогНастройки.ДобавитьСпособВывода(ВыводВКонсоль);

	БлокировкаСеансов = Ложь;
	ЗагрузкаКонфигурацииВместоОбновления = Ложь;
	ИспользоватьПолныйДистрибутив = Истина;

	ПредупрежденияКакОшибки = Ложь;
	НаСервере = Истина; 
	ДинамическоеОбновление = Ложь;
	ИмяРасширения = "";

	НастройкаКластера = Новый Структура("Пользователь, Пароль, Порт", "", "", 1545);

КонецПроцедуры