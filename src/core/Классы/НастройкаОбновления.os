
#Использовать "./intrenal"
#Использовать "./intrenal/files"

#Использовать logos
#Использовать configor

Перем Лог; // Класс Логирование
Перем КаталогКешаФайлов; // Путь к каталогу кеша файлов
Перем КешФайлов; 

Перем ПараметрыПодключения;
Перем ПараметрыОбновленияКонфигурации;
Перем ПараметрыОбновленияРасширений;
Перем ПараметрыБлокировкиСеансов;
Перем ПараметрыКластера;
Перем ПараметрыРезервногоКопирования;

Перем КонструкторПараметровНастройкиОбновления;

Функция БлокировкаСеансов() Экспорт
	Возврат ПараметрыКластера.БлокироватьСеансы;
КонецФункции

Функция СозданиеБекапаИнформационнойБазы() Экспорт
	Возврат ПараметрыБекапа.СоздаватьБекап;
КонецФункции

Функция СтрокаПодключения() Экспорт
	
	// TODO Получить  строку подключения
	Возврат ПараметрыПодключения.СтрокаПодключения;	
КонецФункции

Функция АвторизацияВИнфомарционнойБазе() Экспорт
	Возврат Новый Структура("Пользователь, Пароль", ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль);;	
КонецФункции

Функция КлючРазрешенияЗапуска() Экспорт
	Возврат ПараметрыПодключения.КлючРазрешенияЗапуска;	
КонецФункции

Функция ВерсияПлатформы() Экспорт
	Возврат ПараметрыПодключения.ВерсияПлатформы;	
КонецФункции

Функция КонструкторПараметровПодключения()
	
	КонструкторПараметров = Новый КонструкторПараметров;
	
	ПодключениеКФайловойбазе = КонструкторПараметров.НовыеПараметры();
	ПодключениеКФайловойбазе.ПолеСтрока("ПутьККаталогу path dir", "");
	
	ПодключениеКСервернойбазе = Конструктор.НовыеПараметры();
	ПодключениеКСервернойбазе
							.ПолеСтрока("Сервер ИмяСервера server", "")
							.ПолеСтрока("Порт ПортСервера port", "")
							.ПолеСтрока("База ИмяБазыНаСервере ИмяБазы ib-name base", "")
							;
	
	КонструкторПараметров
						.ПолеСтрока("Пользователь user usr", "")
						.ПолеСтрока("Пароль password pwd", "")
						.ПолеОбъект("СервернаяБаза server", ПодключениеКСервернойбазе)
						.ПолеОбъект("ФайловаяБаза file", ПодключениеКФайловойбазе)
						.ПолеСтрока("ВерсияПлатформы v8version", "")
						.ПолеСтрока("Наименование name ib-name", "")
						.ПолеСтрока("КлючРазрешенияЗапуска unlock-code uc", "")
						;
	
	Возврат КонструкторПараметров;
	
КонецФункции

Функция КонструкторПараметровБлокировкиСеансов()
	
	КонструкторПараметров = Новый КонструкторПараметров;
	
	КонструкторПараметров
						.ПолеБулево("Заблокировать block-session block-users block-ib", Ложь)
						.ПолеЧисло("ВремяОжиданияЗавершенияРаботы timer timer-work-off", 300 * 60)
						.ПолеСтрока("КлючРазрешенияЗапуска unlock-code uc", "")

	;
	
	Возврат КонструкторПараметров;
	
КонецФункции

Функция КонструкторПараметровКластера()
	
	КонструкторПараметров = Новый КонструкторПараметров;
	
	КонструкторПараметров
						.ПолеСтрока("Пользователь user usr", "")
						.ПолеСтрока("Пароль password pwd", "")
						.ПолеСтрока("Сервер server", "")
						.ПолеЧисло("Порт port", 1452)
						;
					
	Возврат КонструкторПараметров;
	
КонецФункции

Процедура ПолучитьФайлыОбновления() Экспорт
	
	КешФайлов.Обновить();

	ПолучитьФайлЕслиТребуется(ПараметрыОбновленияКонфигурации, "Обновление", "ПутьКФайлуОбновления");
	ПолучитьФайлЕслиТребуется(ПараметрыОбновленияКонфигурации, "ПередОбновлением", "ПутьКОбработкеПередОбновлением");
	ПолучитьФайлЕслиТребуется(ПараметрыОбновленияКонфигурации, "ПослеОбновления", "ПутьКОбработкеПослеОбновления");

КонецПроцедуры

Процедура ПолучитьФайлЕслиТребуется(Параметры, КлючСвойства, КлючСвойстваЗаписи)
	
	ПолучениеФайлов = Неопределено;

	Если НЕ Параметры.Свойство(КлючСвойства, ПолучениеФайлов) Тогда
		Возврат;
	КонецЕсли;
	ПутьКФайлу = "";

	


	Параметры.Вставить(КлючСвойстваЗаписи, ПутьКФайлу);

КонецПроцедуры


Функция КонструкторПараметровОбновленияКонфигурации()
	
	КонструкторПараметров = Новый КонструкторПараметров;
	
	ПолеПолученияФайлов = Новый ПолучениеФайлов;
	
	КонструкторПараметров
						.ПолеБулево("НаСервере server update-on-server", Истина)
						.ПолеБулево("ДинамическоеОбновление dynamic ", Ложь)
						.ПолеБулево("ПредупрежденияКакОшибки warnings-as-errors WarningsAsErrors", Ложь)
						.ПолеБулево("ЗагрузитьКонфигурацию load-cf", Ложь)
						.ПолеСтрока("ПутьКФайлуОбновления", "")
						.ПолеСтрока("ПутьКОбработкеПередОбновлением", "")
						.ПолеСтрока("ПутьКОбработкеПослеОбновления", "")
						.ПолеОбъект("Обновление update release", ПолеПолученияФайлов)
						.ПолеОбъект("ПередОбновлением pre-update", ПолеПолученияФайлов)
						.ПолеОбъект("ПослеОбновления post-update", ПолеПолученияФайлов)
						;
	Возврат КонструкторПараметров;
	
КонецФункции

Функция КонструкторПараметровОбновленияРасширений()
	
	КонструкторПараметров = Новый КонструкторПараметров;
	
	// ПолеПолученияФайлов = Новый ПолучениеФайлов;
	
	// КонструкторПараметров
	// .ПолеБулево("НаСервере server update-on-server", Истина)
	// .ПолеБулево("ДинамическоеОбновление dynamic ", Ложь)
	// .ПолеБулево("ПредупрежденияКакОшибки warnings-as-errors WarningsAsErrors", Ложь)
	// .ПолеБулево("ЗагрузитьКонфигурацию load-cf", Ложь)
	// .ПолеСтрока("ПутьКФайлуОбновления", "")
	// .ПолеСтрока("ПутьКОбработкеПередОбновлением", "")
	// .ПолеСтрока("ПутьКОбработкеПослеОбновления", "")
	// .ПолеОбъект("Обновление update release", ПолеПолученияФайлов)
	// .ПолеОбъект("ПередОбновлением pre-update", ПолеПолученияФайлов)
	// .ПолеОбъект("ПослеОбновления post-update", ПолеПолученияФайлов)
	;
	Возврат КонструкторПараметров;
	
КонецФункции

Функция КонструкторПараметровРезервногоКопирования()
	
	КонструкторПараметров = Новый КонструкторПараметров;
	
	// ПолеПолученияФайлов = Новый ПолучениеФайлов;
	
	// КонструкторПараметров
	// .ПолеБулево("НаСервере server update-on-server", Истина)
	// .ПолеБулево("ДинамическоеОбновление dynamic ", Ложь)
	// .ПолеБулево("ПредупрежденияКакОшибки warnings-as-errors WarningsAsErrors", Ложь)
	// .ПолеБулево("ЗагрузитьКонфигурацию load-cf", Ложь)
	// .ПолеСтрока("ПутьКФайлуОбновления", "")
	// .ПолеСтрока("ПутьКОбработкеПередОбновлением", "")
	// .ПолеСтрока("ПутьКОбработкеПослеОбновления", "")
	// .ПолеОбъект("Обновление update release", ПолеПолученияФайлов)
	// .ПолеОбъект("ПередОбновлением pre-update", ПолеПолученияФайлов)
	// .ПолеОбъект("ПослеОбновления post-update", ПолеПолученияФайлов)
	;
	Возврат КонструкторПараметров;
	
КонецФункции

Процедура УстановитьКешФайлов(Знач ПутьККаталогу) Экспорт
	
	КаталогКешаФайлов = НовыйКаталогКешаФайлов;
	КешФайлов = Новый ЛокальныйКешФайлов(КаталогКешаФайлов);
	
КонецПроцедуры

Процедура Заполнить(ВходящееСоответствие) Экспорт
	
	КонструкторПараметровНастройкиОбновления.ИзСоответствия(ВходящееСоответствие);
	
	СтруктураПараметров = КонструкторПараметров.ВСтруктуру();
	ПараметрыПодключения = СтруктураПараметров.ПараметрыПодключения;
	ПараметрыОбновленияКонфигурации = СтруктураПараметров.ПараметрыОбновленияКонфигурации;
	ПараметрыОбновленияРасширений = СтруктураПараметров.ПараметрыОбновленияРасширений;
	ПараметрыБлокировкиСеансов = СтруктураПараметров.ПараметрыБлокировкиСеансов;
	ПараметрыКластера = СтруктураПараметров.ПараметрыКластера;
	ПараметрыРезервногоКопирования = СтруктураПараметров.ПараметрыРезервногоКопирования;
		
	ПроверитьКорректностьЗаполнения();

КонецПроцедуры

Процедура ПроверитьКорректностьЗаполнения()

	// TODO: Сделать проверку
	// ВызватьИсключение "Параметры заполнены не корректно";
	
КонецПроцедуры

Процедура СформироватьСтрокуПодключения(ИндексЗначений)
	
	ФайловаяБаза = ИндексЗначений.Значение("НастройкаПодключения.ФайловаяБаза");
	
	Если ЗначениеЗаполнено(ФайловаяБаза["ПутьККаталогу"]) Тогда
		СтрокаПодключения = СтрШаблон("/F%1", ФайловаяБаза["ПутьККаталогу"]);
	Иначе
		СервернаяБаза = ИндексЗначений.Значение("НастройкаПодключения.СервернаяБаза");
		СерверПриложений = СервернаяБаза.Сервер;
		ПортСервера = СервернаяБаза.Порт; // TODO: Доделать добавление порта в строку подключения
		ИмяБазыНаСервере = СервернаяБаза.База;
		СтрокаПодключения = СтрШаблон("/S""%1\%2""", СерверПриложений, ИмяБазыНаСервере);
	КонецЕсли;
	
	Пользователь = ИндексЗначений.Значение("НастройкаПодключения.Пользователь");
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Пароль = ИндексЗначений.Значение("НастройкаПодключения.Пароль");
		Если Пароль = Неопределено Тогда
			Пароль = "";
		КонецЕсли;
		АвторизацияВИнфомарционнойБазе(Пользователь, Пароль);
	КонецЕсли;
	
КонецПроцедуры

Функция Лог() Экспорт
	Возврат Лог;
КонецФункции

Процедура ДобавитьСпособВывода(ПроцессорВывода) Экспорт
	Лог.ДобавитьСпособВывода(ПроцессорВывода);
КонецПроцедуры

#Область Интерфейс_конструктора_параметров

#КонецОбласти

Процедура ПриСозданииОбъекта(Знач Наименование)
	
	НаименованиеНастройки = Наименование;
	Лог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB.config");
	
	ВыводВКонсоль = Новый ВыводЛогаВКонсоль();
	ДобавитьСпособВывода(ВыводВКонсоль);

	КонструкторПараметров = Новый КонструкторПараметров();
	КонструкторПараметров.ПолеСтрока("Версия version", "1.0")
						 .ПолеОбъект("ПараметрыПодключения ib-connect", КонструкторПараметровПодключения());
						 .ПолеОбъект("ПараметрыОбновленияКонфигурации configuration", КонструкторПараметровОбновленияКонфигурации());
						 .ПолеОбъект("ПараметрыОбновленияРасширений ext extensions", КонструкторПараметровОбновленияРасширений());
						 .ПолеОбъект("ПараметрыБлокировкиСеансов sessions block-sessions", КонструкторПараметровБлокировкиСеансов());
						 .ПолеОбъект("ПараметрыКластера cluster", КонструкторПараметровКластера());
						 .ПолеОбъект("ПараметрыРезервногоКопирования backup", КонструкторПараметровРезервногоКопирования());
							
	КонструкторПараметровНастройкиОбновления = КонструкторПараметров;
	
КонецПроцедуры