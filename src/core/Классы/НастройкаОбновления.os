
#Использовать logos

Перем ЛогНастройки; // Класс Логирование
Перем НаименованиеНастройки; // Наименование настройки для обновления

Перем БлокировкаСеансов Экспорт; // Булево, признак блокировки пользователей
Перем ЗагрузкаКонфигурацииВместоОбновления Экспорт; // Булево

Перем ПутьКОбновлению Экспорт; // Строка, путь к файлу или каталогу содержащему обновление
Перем ИспользоватьПолныйДистрибутив Экспорт;
Перем СтрокаПодключения Экспорт; // Строка
Перем АвторизацияВИнфомарционнойБазе Экспорт; // Структура 
Перем КлючРазрешенияЗапуска Экспорт; // Строка
Перем ВерсияПлатформы Экспорт; // Строка 
Перем ПутьКОбработкеПередОбновлением Экспорт; // Путь к файлу обработки перед обновлением 
Перем ПутьКОбработкеПослеОбновления Экспорт; // Путь к файлу обработки перед обновлением 

// Настройки обновления

Перем ПредупрежденияКакОшибки Экспорт; // Булево
Перем НаСервере Экспорт; // Булево
Перем ДинамическоеОбновление Экспорт; // Булево
Перем ИмяРасширения Экспорт; // Строка

Перем Параметры;
// Настройка подключения к кластеру

Перем НастройкаКластера Экспорт;

Перем ПроцессорВыводаЛогаВТаблицуЗначений;

Функция ПередОбновлением() Экспорт
	
	Возврат ЗначениеЗаполнено(ПутьКОбработкеПередОбновлением);

КонецФункции

// Устанавливает параметры авторизации в хранилище конфигурации 1С
//
// Параметры:
//   Пользователь - Строка - пользователь хранилища конфигурации 1С
//   Пароль - Строка - пароль пользователя хранилища конфигурации 1С
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция АвторизацияВИнфомарционнойБазе(Знач Пользователь, Знач Пароль) Экспорт

	// Лог.Отладка("Установлена авторизация в информационной базе пользователь <%1>, пароль <%2>", Пользователь, Пароль);
	АвторизацияВИнфомарционнойБазе.Вставить("Пользователь" , Пользователь);
	АвторизацияВИнфомарционнойБазе.Вставить("Пароль", Пароль);

	Возврат ЭтотОбъект;

КонецФункции

Функция ПослеОбновления() Экспорт
	
	Возврат ЗначениеЗаполнено(ПутьКОбработкеПослеОбновления);

КонецФункции

Функция ИмяЛога() Экспорт
	Возврат СтрШаблон("oscript.app.AutoUpdateIB.%1", НаименованиеНастройки);
КонецФункции

Функция Лог() Экспорт
	Возврат ЛогНастройки;
КонецФункции

Функция ТаблицаЛогов() Экспорт
	Возврат ПроцессорВыводаЛогаВТаблицуЗначений.ПолучитьТаблицуЛога();
КонецФункции

Процедура ИзСоответствия(ВходящееСоответствие) Экспорт
	// TODO: Сделать чтение параметров настроек из входящего соответствия
КонецПроцедуры

Процедура РазобратьСтрокуПодключения()
	
КонецПроцедуры

#Область Интерфейс_конструктора_параметров

Функция Параметры() Экспорт
	Возврат Параметры;
КонецФункции

Процедура УстановитьПараметры(Знач ВходящиеПараметры) Экспорт
	Параметры = ВходящиеПараметры;
КонецПроцедуры

Процедура ОписаниеПараметров(Знач Конструктор) Экспорт

	// ПараметрыПлагины = Конструктор.НовыеПараметры("Плагины");
	// ПараметрыПлагины.ПолеМассив("ВключенныеПлагины enable", Тип("Строка"))
	// 	.ПолеМассив("ОтключенныеПлагины disable", Тип("Строка"))
	// 	;

	// ПараметрыНастроекПлагинов = Конструктор.НовыеПараметры("НастройкиПлагинов");
	// ПараметрыНастроекПлагинов.ПроизвольныеПоля();

	// ГлобальныеПараметры = Конструктор.НовыеПараметры("ГлобальныеПараметры");
	// ГлобальныеПараметры.ПолеСтрока("ПользовательХранилища storage-user user", АвторизацияВХранилище.ПользовательХранилища)
	// 	.ПолеСтрока("ПарольПользователяХранилища storage-pwd storage-password password pwd", АвторизацияВХранилище.ПарольХранилища)
	// 	.ПолеСтрока("ПутьИсполняемомуФайлуГит git-path git", ПутьКИсполняемомуФайлуGit)
	// 	.ПолеСтрока("ПутьКВременномуКаталогу temp-dir tempdir temp", ПутьКВременномуКаталогу)
	// 	.ПолеСтрока("ВерсияПлатформы v8version v8", ТекущаяВерсияПлатформы)
	// 	.ПолеСтрока("ДоменПочтыПоУмолчанию domain-email email", ДоменПочтыДляGitПоУмолчанию)
	// 	.ПолеЧисло("КоличествоЦикловОжиданияЛицензии lic-try-count", КоличествоЦикловОжиданияЛицензииПоУмолчанию)
	// 	.ПолеОбъект("Плагины plugins", ПараметрыПлагины)
	// 	.ПолеОбъект("НастройкиПлагинов plugins-config flags", ПараметрыНастроекПлагинов)
	// 	;

	// ПараметрыПлагиныРепозитория = ПараметрыПлагины.Скопировать("ПлагиныРепозитория");
	// ПараметрыПлагиныРепозитория.ПолеМассив("ДополнительныеПлагины extra additional more", Тип("Строка"));

	// ПараметрыРепозитория = Конструктор.НовыеПараметры("Репозиторий");
	// ПараметрыРепозитория.ПолеБулево("Отключено disable", Ложь)
	// 	.ПолеСтрока("Наименование storage-name name")
	// 	.ПолеСтрока("ПутьКХранилищу storage-path path")
	// 	.ПолеСтрока("ПутьКРабочемуКаталогу work-dir git-local-path dir")
	// 	// Стандартные поля
	// 	.ПолеСтрока("ПользовательХранилища storage-user user")
	// 	.ПолеСтрока("ПарольПользователяХранилища storage-pwd storage-password password pass")
	// 	.ПолеСтрока("ПутьИсполняемомуФайлуГит git-path git")
	// 	.ПолеСтрока("ПутьКВременномуКаталогу temp-dir tempdir temp")
	// 	.ПолеСтрока("ВерсияПлатформы v8version v8")
	// 	.ПолеСтрока("ДоменПочтыПоУмолчанию domain-email email")
	// 	.ПолеЧисло("КоличествоЦикловОжиданияЛицензии lic-try-count", КоличествоЦикловОжиданияЛицензииПоУмолчанию)
	// 	.ПолеОбъект("Плагины plugins", ПараметрыПлагиныРепозитория)
	// 	.ПолеОбъект("НастройкиПлагинов plugins-config flags", ПараметрыНастроекПлагинов)
	// 	;

	// Конструктор.ПолеОбъект("НастройкиПоУмолчанию globals default", ГлобальныеПараметры)
	// 	.ПолеМассив("Репозитории repositories", ПараметрыРепозитория)
	// 	;

КонецПроцедуры

#КонецОбласти

Процедура ПриСозданииОбъекта(Знач Наименование)
	
	НаименованиеНастройки = Наименование;
	ЛогНастройки = Логирование.ПолучитьЛог(ИмяЛога());
	ПроцессорВыводаЛогаВТаблицуЗначений = Новый ВыводЛогаВТаблицуЗначений;
	АвторизацияВИнфомарционнойБазе = Новый Структура("Пользователь, Пароль", "", "");
	ЛогНастройки.ДобавитьСпособВывода(ПроцессорВыводаЛогаВТаблицуЗначений);
	
	БлокировкаСеансов = Ложь;
	ЗагрузкаКонфигурацииВместоОбновления = Ложь;
	ИспользоватьПолныйДистрибутив = Истина;

	ПредупрежденияКакОшибки = Ложь;
	НаСервере = Истина; 
	ДинамическоеОбновление = Ложь;
	ИмяРасширения = "";

	НастройкаКластера = Новый Структура("Пользователь, Пароль, Порт", "", "", 1545);

КонецПроцедуры