#Использовать "./intrenal"
#Использовать datetime

Перем ИдентификаторРабочегоПроцесса;
Перем ВыводитьЛогВКонсоль;
Перем ФайлЖурнала;
Перем КаталогЛогов;
Перем ПровайдерRMQ;
Перем Лог;
Перем ДанныеПоСистеме;
Перем ДинамическиеПараметрыЛога;
Перем ВыводВRabbitMQ;

Перем КаталогКешаФайлов;

Функция РабочийКаталог(Знач НовыйКаталогЛогов) Экспорт
	КаталогЛогов = НовыйКаталогЛогов;
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьКаталогКешаФайлов(Знач НовыйКаталогКешаФайлов) Экспорт
	КаталогКешаФайлов = НовыйКаталогКешаФайлов;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает таймер повторения пакетной синхронизации
//
// Параметры:
//   НовыйПровайдерОчереди - Класс - таймер повторной синхронизации, сек
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция НастроитьRMQ(Знач НовыеНастройкиПровайдера) Экспорт
	
	ПровайдерRMQ = Новый ОчередьОбновленияRMQ();
	ПровайдерRMQ.Инициализировать(НовыеНастройкиПровайдера);
	
	Возврат ЭтотОбъект;

КонецФункции

Функция Идентификатор() Экспорт

	Возврат ИдентификаторРабочегоПроцесса;

КонецФункции

// Выполняет пакетную синхронизацию
//
Процедура Запустить(ПутьКФайлуСообщения) Экспорт

	НастроитьЛогирование();

	ДанныеРабочегоПроцесса = ДанныеПрочитатьФайлСообщенияРабочегоПроцесса(ПутьКФайлуСообщения);

	ВыполнитьПакетноеОбновления(ДанныеРабочегоПроцесса);

	ФайлЖурнала.Закрыть();

КонецПроцедуры

Процедура ВыполнитьПакетноеОбновления(ДанныеРабочегоПроцесса)

	ДинамическиеПараметрыЛога.Вставить("КлючСообщения", ДанныеРабочегоПроцесса["КлючСообщения"]);
	ДинамическиеПараметрыЛога.Вставить("КлючМаршрутизации", ДанныеРабочегоПроцесса["КлючМаршрутизации"]);

	РезультатВыполнения = ВыполнитьОбновлениеПоНастройки(ДанныеРабочегоПроцесса);
	
	ОтправитьИнформацииОЗавершении(ДанныеРабочегоПроцесса,
									РезультатВыполнения.Выполнено, РезультатВыполнения.ОписаниеОшибки);

	Если РезультатВыполнения.Выполнено Тогда
		Лог.Информация("Рабочий процесс завершил работу. Задание выполнено");
	Иначе
		Лог.Информация("Рабочий процесс завершил работу. Задание не выполнено по причине:
		|<%1>", РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьИнформацииОЗавершении(ДанныеРабочегоПроцесса, РезультатЗавершения, ОписаниеОшибки)

	ДанныеОЗавершении = Новый Структура;
	ДанныеОЗавершении.Вставить("ПользовательОС", ДанныеПоСистеме.ПользовательОС);
	ДанныеОЗавершении.Вставить("ИмяКомпьютера", ДанныеПоСистеме.ИмяКомпьютера);
	ДанныеОЗавершении.Вставить("Завершен", РезультатЗавершения);
	ДанныеОЗавершении.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	ДанныеОЗавершении.Вставить("ИдентификаторРабочегоПроцесса", ДанныеПоСистеме.ИдентификаторРабочегоПроцесса);
	ДанныеОЗавершении.Вставить("ДатаВремя", ТекущаяДата());

	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("correlation_id", ДанныеРабочегоПроцесса["КлючСообщения"]);
	ПараметрыСообщения.Вставить("timestamp", РаботаСДатой.ТекущаяДатаВМеткуВремени());

	ПровайдерRMQ.ОтправитьДанныеВОчередь(ДанныеОЗавершении,
					ПараметрыСообщения,
					ДанныеРабочегоПроцесса["КлючМаршрутизации"]);
	
КонецПроцедуры

Функция ВыполнитьОбновлениеПоНастройки(СоответствиеНастройки)

	НастройкиОбновления = ПрочитатьНастройкиОбновления(СоответствиеНастройки);
	ПроцессорОбновления = Новый МенеджерОбновления();
	Результат = ПроцессорОбновления.ОбновлениеПоНастройке(НастройкиОбновления);
	Возврат Результат;

КонецФункции

Функция ПрочитатьНастройкиОбновления(СоответствиеНастройки)
	
	НастройкиОбновления = Новый НастройкаОбновления(Новый УникальныйИдентификатор);
	НастройкиОбновления.УстановитьКаталогКешаФайлов(КаталогКешаФайлов);
	НастройкиОбновления.ИзСоответствия(СоответствиеНастройки);
	ЛокальныйВыводВRabbitMQ = Новый ВыводЛогаВRabbitMQ(ПровайдерRMQ, ДанныеПоСистеме, ДинамическиеПараметрыЛога);
	НастройкиОбновления.ДобавитьСпособВывода(ЛокальныйВыводВRabbitMQ);

	Возврат НастройкиОбновления;

КонецФункции

Функция ИмяЛога() Экспорт
	
	Возврат "oscript.app.AutoUpdateIB.agent";

КонецФункции

Функция ИмяФайлаЛога() Экспорт

	Возврат ОбъединитьПути(КаталогЛогов, Строка(ИдентификаторРабочегоПроцесса) + ".log");
	
КонецФункции

Процедура НастроитьЛогирование()
	
	ФайлЖурнала = Новый ВыводЛогаВФайл;
	ФайлЖурнала.ОткрытьФайл(ИмяФайлаЛога());
	Лог.ДобавитьСпособВывода(ФайлЖурнала);
	ДобавитьВыводЛогаВКонсоль();

КонецПроцедуры

Процедура ДобавитьВыводЛогаВКонсоль()
	
	Если ВыводитьЛогВКонсоль Тогда
	
		ВыводВКонсоль = Новый ВыводЛогаВКонсоль();
		Лог.ДобавитьСпособВывода(ВыводВКонсоль);
	
	КонецЕсли;

КонецПроцедуры

Функция ДанныеПрочитатьФайлСообщенияРабочегоПроцесса(ИмяФайлаСообщения)

	ЗаписьТекста = Новый ЧтениеТекста(ИмяФайлаСообщения);
	ТекстФайлаСообщения = ЗаписьТекста.Прочитать();
	ЗаписьТекста.Закрыть();

	УдалитьФайлы(ИмяФайлаСообщения);

	ПарсерJSON = Новый ПарсерJSON;
	ДанныеРабочегоПроцесса = ПарсерJSON.ПрочитатьJSON(ТекстФайлаСообщения);

	Возврат ДанныеРабочегоПроцесса;

КонецФункции

Процедура ДобавитьВыводЛогаВRabbitMQ()
	
	Лог.Отладка("Провайдер <%1>", ПровайдерRMQ);
	ВыводВRabbitMQ = Новый ВыводЛогаВRabbitMQ(ПровайдерRMQ, ДанныеПоСистеме, ДинамическиеПараметрыЛога);
	Лог.ДобавитьСпособВывода(ВыводВRabbitMQ);

КонецПроцедуры

Процедура ПриСозданииОбъекта(ВходящийИдентификаторРабочегоПроцесса = Неопределено)

	Если ВходящийИдентификаторРабочегоПроцесса = Неопределено Тогда
		ИдентификаторРабочегоПроцесса = Новый УникальныйИдентификатор;
	Иначе
		ИдентификаторРабочегоПроцесса = ВходящийИдентификаторРабочегоПроцесса;
	КонецЕсли;

	ВыводитьЛогВКонсоль = Истина;

	СИ = Новый СистемнаяИнформация;
	ДанныеПоСистеме = Новый Структура;
	ДанныеПоСистеме.Вставить("ИдентификаторРабочегоПроцесса", ИдентификаторРабочегоПроцесса);
	ДанныеПоСистеме.Вставить("ПользовательОС", СИ.ПользовательОС);
	ДанныеПоСистеме.Вставить("ИмяКомпьютера", СИ.ИмяКомпьютера);

	ДинамическиеПараметрыЛога = Новый Структура("КлючСообщения, КлючМаршрутизации", "", "");

	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	Лог.УстановитьРаскладку(ЭтотОбъект);

КонецПроцедуры

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт
	
	Возврат СтрШаблон("[%1] %2 - %3", ИдентификаторРабочегоПроцесса, УровниЛога.НаименованиеУровня(Уровень), Сообщение);
	
КонецФункции