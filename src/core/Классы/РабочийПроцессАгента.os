#Использовать "./intrenal"
#Использовать datetime

Перем ИдентификаторРабочегоПроцесса;
Перем ВыводитьЛогВКонсоль;
Перем ФайлЖурнала;
Перем КаталогЛогов;
Перем КлиентRMQ;
Перем Лог;
Перем ДанныеПоСистеме;

Перем КаталогКешаФайлов;
Перем ДанныеРабочегоПроцесса;
Перем ИспользуетсяОтправкаЛогаВRMQ;

Функция РабочийКаталог(Знач НовыйКаталогЛогов) Экспорт
	КаталогЛогов = НовыйКаталогЛогов;
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьКаталогКешаФайлов(Знач НовыйКаталогКешаФайлов) Экспорт
	КаталогКешаФайлов = НовыйКаталогКешаФайлов;
	Возврат ЭтотОбъект;
КонецФункции

Функция НастроитьRMQ()
	
	КлиентRMQ = Новый КлиентRMQ();
	
	НастройкаRMQ = ДанныеРабочегоПроцесса["НастройкаRMQ"];
	Лог.Отладка("Виртуальный хост <%1>", НастройкаRMQ.Получить("ВиртуальныйХост"));
	КлиентRMQ.УстановитьНастройкиПодключения(НастройкаRMQ);
	КлиентRMQ.УстановитьВиртуальныйХост(НастройкаRMQ.Получить("ВиртуальныйХост"));

	ИспользуетсяОтправкаЛогаВRMQ = Истина;

	Возврат ЭтотОбъект;

КонецФункции

Функция Идентификатор() Экспорт

	Возврат ИдентификаторРабочегоПроцесса;

КонецФункции

// Выполняет пакетную синхронизацию
//
Процедура Запустить(Знач ПутьКФайлуСообщения) Экспорт
	
	НастроитьЛогирование();

	ДанныеРабочегоПроцесса = ПрочитатьФайлСообщенияРабочегоПроцесса(ПутьКФайлуСообщения);

	Лог.Отладка("ДанныеРабочегоПроцесса <%1>", ДанныеРабочегоПроцесса);
	Лог.Отладка("Настройка RMQ");
	НастроитьRMQ();
	
	Лог.Отладка("Выполняю действие рабочего процесса ");
	ВыполнитьДействияРабочегоПроцесса();

	ФайлЖурнала.Закрыть();

	УдалитьФайлы(ПутьКФайлуСообщения);

КонецПроцедуры

Процедура ВыполнитьДействияРабочегоПроцесса()

	Лог.Информация("Рабочий процесс начал работу");
	
	ДанныеСообщенияRMQ = ДанныеРабочегоПроцесса["ДанныеСообщенияRMQ"];

	ВходящееСообщениеRMQ = Новый СообщениеRMQ;
	ВходящееСообщениеRMQ.ИзСоответствия(ДанныеСообщенияRMQ);

	КлючСообщения = ВходящееСообщениеRMQ.ЗначениеПараметра("КлючСообщения");
	КлючМаршрутизации = ВходящееСообщениеRMQ.ЗначениеПараметра("АдресОтвета");
	
	ОтправитьИнформацииОНачале(КлючСообщения, КлючМаршрутизации);

	ДанныеСообщения = ВходящееСообщениеRMQ.ДанныеСообщения;
	НастройкиОбновления = Новый НастройкаОбновления();
	ПроцессорОбновления = Новый МенеджерОбновления();

	Если ИспользуетсяОтправкаЛогаВRMQ Тогда
		ВыводВRabbitMQ = Новый ВыводЛогаВRabbitMQ(ЭтотОбъект, КлючСообщения, КлючМаршрутизации);
		ПроцессорОбновления.ДобавитьСпособВывода(ВыводВRabbitMQ);
		НастройкиОбновления.ДобавитьСпособВывода(ВыводВRabbitMQ);		
	КонецЕсли;

	СоответствиеСообщения = ИзJson(ДанныеСообщения);
	НастройкиОбновления.УстановитьКешФайлов(КаталогКешаФайлов);
	НастройкиОбновления.Заполнить(СоответствиеСообщения);

	РезультатВыполнения = ПроцессорОбновления.ВыполнитьОбновление(НастройкиОбновления);

	ОтправитьИнформацииОЗавершении(КлючСообщения, КлючМаршрутизации, РезультатВыполнения.Выполнено, РезультатВыполнения.ОписаниеОшибки);

	Если РезультатВыполнения.Выполнено Тогда
		Лог.Информация("Рабочий процесс завершил работу. Задание выполнено");
	Иначе
		Лог.Информация("Рабочий процесс завершил работу. Задание не выполнено по причине:
		|<%1>", РезультатВыполнения.ОписаниеОшибки );
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьИнформацииОЗавершении(КлючСоответствия, КлючМаршрутизации, РезультатЗавершения, ОписаниеОшибки)

	ДанныеОЗавершении = Новый Структура;
	ДанныеОЗавершении.Вставить("Завершен", РезультатЗавершения);
	ДанныеОЗавершении.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	ДанныеОЗавершении.Вставить("Сообщение", СтрШаблон("Закончена процедура обновления по сообщению <%1>", КлючСоответствия));
	ДанныеОЗавершении.Вставить("УровеньСообщения", 1);
	ДанныеОЗавершении.Вставить("ДатаВремя", ТекущаяДата());

	ОтправитьИнформации(КлючСоответствия, КлючМаршрутизации, ДанныеОЗавершении);
	
КонецПроцедуры

Процедура ОтправитьИнформацииОНачале(КлючСоответствия, КлючМаршрутизации)

	ДанныОНачале = Новый Структура;
	ДанныОНачале.Вставить("Сообщение", СтрШаблон("Начата процедура обновления по сообщению <%1>", КлючСоответствия));
	ДанныОНачале.Вставить("УровеньСообщения", 1);
	ДанныОНачале.Вставить("ДатаВремя", ТекущаяДата());
		
	ОтправитьИнформации(КлючСоответствия, КлючМаршрутизации, ДанныОНачале);
	
КонецПроцедуры

Процедура ОтправитьИнформации(КлючСоответствия, КлючМаршрутизации, ДополнительнаяИнформация = Неопределено) Экспорт

	Если НЕ ИспользуетсяОтправкаЛогаВRMQ Тогда
		Возврат;
	КонецЕсли;

	МеткаВремени = РаботаСДатой.ТекущаяДатаВМеткуВремени();

	ДанныеСообщения = НовыеДанныеСообщения();

	Если ДополнительнаяИнформация = Неопределено Тогда
		ДополнительнаяИнформация = Новый Структура();
	КонецЕсли;

	Для каждого КлючЗначение Из ДополнительнаяИнформация Цикл
		ДанныеСообщения.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	СообщениеRMQ = Новый СообщениеRMQ;
	СообщениеRMQ.Параметр("КлючСоотвествия", КлючСоответствия)
				.Параметр("МоментВремени", МеткаВремени);
	
	СообщениеRMQ.КлючМаршрутизации = КлючМаршрутизации;
	СообщениеRMQ.ДанныеСообщения = ВJson(ДанныеСообщения);

	ОтправитьСообщение(СообщениеRMQ);
	
КонецПроцедуры

Функция НовыеДанныеСообщения()
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("ПользовательОС", ДанныеПоСистеме.ПользовательОС);
	ДанныеСообщения.Вставить("ИмяКомпьютера", ДанныеПоСистеме.ИмяКомпьютера);
	ДанныеСообщения.Вставить("ИдентификаторРабочегоПроцесса", ДанныеПоСистеме.ИдентификаторРабочегоПроцесса);
	
	Возврат ДанныеСообщения;

КонецФункции

Процедура ОтправитьСообщение(СообщениеRMQ)

	КлиентRMQ.ОтправитьСообщениеRMQ(СообщениеRMQ);

КонецПроцедуры

Функция ПрочитатьНастройкиОбновления(СоответствиеНастройки)
	
	НастройкиОбновления = Новый НастройкаОбновления(Новый УникальныйИдентификатор);
	НастройкиОбновления.УстановитьКаталогКешаФайлов(КаталогКешаФайлов);
	НастройкиОбновления.ИзСоответствия(СоответствиеНастройки);

	Возврат НастройкиОбновления;

КонецФункции

Функция ИмяЛога() Экспорт
	
	Возврат "oscript.app.AutoUpdateIB.agent";

КонецФункции

Функция ИмяФайлаЛога() Экспорт

	Возврат ОбъединитьПути(КаталогЛогов, Строка(ИдентификаторРабочегоПроцесса) + ".log");
	
КонецФункции

Функция ВJson(Знач ДанныеСериализации)
	
	ПарсерJSON = Новый ПарсерJSON;
	Возврат ПарсерJSON.ЗаписатьJSON(ДанныеСериализации);

КонецФункции

Функция ИзJson(ТекстJSON)
	
	Парсер = Новый ПарсерJSON;
	Результат = Парсер.ПрочитатьJSON(ТекстJSON);

	Возврат Результат;

КонецФункции

Процедура НастроитьЛогирование()
	
	ФайлЖурнала = Новый ВыводЛогаВФайл;
	ФайлЖурнала.ОткрытьФайл(ИмяФайлаЛога());
	Лог.ДобавитьСпособВывода(ФайлЖурнала);
	ДобавитьВыводЛогаВКонсоль();

КонецПроцедуры

Процедура ДобавитьВыводЛогаВКонсоль()
	
	Если ВыводитьЛогВКонсоль Тогда
	
		ВыводВКонсоль = Новый ВыводЛогаВКонсоль();
		Лог.ДобавитьСпособВывода(ВыводВКонсоль);
	
	КонецЕсли;

КонецПроцедуры

Функция ПрочитатьФайлСообщенияРабочегоПроцесса(Знач ИмяФайлаСообщения)

	Лог.Отладка("Читаю текст сообщения рабочего процесса агента");
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаСообщения);
	ТекстФайлаСообщения = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Лог.Отладка("Текст сообщения <%1>", ТекстФайлаСообщения);
	СообщениеРабочегоПроцесса = Новый СообщениеРабочегоПроцесса;
	СообщениеРабочегоПроцесса.ПрочитатьСообщение(ТекстФайлаСообщения);

	ДанныеРабочегоПроцесса = СообщениеРабочегоПроцесса.ПолучитьДанныеСообщения();

	Возврат ДанныеРабочегоПроцесса;

КонецФункции

Процедура ПриСозданииОбъекта(ВходящийИдентификаторРабочегоПроцесса = Неопределено)

	Если ВходящийИдентификаторРабочегоПроцесса = Неопределено Тогда
		ИдентификаторРабочегоПроцесса = Новый УникальныйИдентификатор;
	Иначе
		ИдентификаторРабочегоПроцесса = ВходящийИдентификаторРабочегоПроцесса;
	КонецЕсли;

	ВыводитьЛогВКонсоль = Истина;

	СИ = Новый СистемнаяИнформация;
	ДанныеПоСистеме = Новый Структура;
	ДанныеПоСистеме.Вставить("ИдентификаторРабочегоПроцесса", ИдентификаторРабочегоПроцесса);
	ДанныеПоСистеме.Вставить("ПользовательОС", СИ.ПользовательОС);
	ДанныеПоСистеме.Вставить("ИмяКомпьютера", СИ.ИмяКомпьютера);

	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	Лог.УстановитьРаскладку(ЭтотОбъект);
	// Лог.УстановитьУровень(УровниЛога.Отладка);

	ИспользуетсяОтправкаЛогаВRMQ = Ложь;

КонецПроцедуры

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт
	
	Возврат СтрШаблон("[%1] %2 - %3", ИдентификаторРабочегоПроцесса, УровниЛога.НаименованиеУровня(Уровень), Сообщение);
	
КонецФункции