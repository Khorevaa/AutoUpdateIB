#Использовать "./internal"
#Использовать datetime

Перем ИдентификаторРабочегоПроцесса;
Перем ВыводитьЛогВКонсоль;
Перем ФайлЖурнала;
Перем КаталогЛогов;
Перем ВыводЛогаВRabbitMQ;
Перем Лог;
Перем ДанныеПоСистеме;

Перем КаталогКешаФайлов;
Перем ИспользуетсяОтправкаЛогаВRMQ;

Функция РабочийКаталог(Знач НовыйКаталогЛогов) Экспорт
	КаталогЛогов = НовыйКаталогЛогов;
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьКаталогКешаФайлов(Знач НовыйКаталогКешаФайлов) Экспорт
	КаталогКешаФайлов = НовыйКаталогКешаФайлов;
	Возврат ЭтотОбъект;
КонецФункции

Процедура НастроитьВыводЛогаВRabbitMQ(Знач НастройкаRMQ, ЗНач КлючСообщения, Знач КлючМаршрутизации)
	
	Если НастройкаRMQ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Лог.Поля("КлючСообщения", КлючСообщения,
			"КлючМаршрутизации", КлючМаршрутизации).Отладка("Выполняю настройки вывода лога в RMQ");
	ВыводЛогаВRabbitMQ = Новый ВыводЛогаВRabbitMQ(НастройкаRMQ);
	ВыводЛогаВRabbitMQ.УстановитьКлючСоответствия(КлючСообщения);
	ВыводЛогаВRabbitMQ.УстановитьКлючМаршрутизации(КлючМаршрутизации);

	ИспользуетсяОтправкаЛогаВRMQ = Истина;
	
КонецПроцедуры

Функция Идентификатор() Экспорт

	Возврат ИдентификаторРабочегоПроцесса;

КонецФункции

// Выполняет пакетную синхронизацию
//
Процедура Запустить(Знач ПутьКФайлуСообщения) Экспорт
	
	Лог.Информация("Подготовка рабочего процесса");

	ДанныеРабочегоПроцесса = ПрочитатьФайлСообщенияРабочегоПроцесса(ПутьКФайлуСообщения);
	ДанныеСообщенияRMQ = ДанныеРабочегоПроцесса["ДанныеСообщенияRMQ"];
	
	ВходящееСообщениеRMQ = Новый СообщениеRMQ;
	ВходящееСообщениеRMQ.ИзСоответствия(ДанныеСообщенияRMQ);
	КлючСообщения = ВходящееСообщениеRMQ.ЗначениеПараметра("КлючСообщения");
	КлючМаршрутизации = ВходящееСообщениеRMQ.ЗначениеПараметра("АдресОтвета");
	
	НастройкаRMQ = ДанныеРабочегоПроцесса["НастройкаRMQ"];
	
	НастроитьВыводЛогаВRabbitMQ(НастройкаRMQ, КлючСообщения, КлючМаршрутизации);

	ДанныеСообщения = ВходящееСообщениеRMQ.ДанныеСообщения;
	ПараметрыОбновления = ИзJson(ДанныеСообщения);
	
	ВыполнитьДействияРабочегоПроцесса(ПараметрыОбновления);

	ФайлЖурнала.Закрыть();

	УдалитьФайлы(ПутьКФайлуСообщения);

КонецПроцедуры

Процедура ВыполнитьДействияРабочегоПроцесса(Знач ПараметрыОбновления)

	Лог.Информация("Рабочий процесс начал работу");

	ОбщиеПоля = Новый Соответствие();
	ОбщиеПоля.Вставить("id", ПараметрыОбновления.Идентификатор());
	ОбщиеПоля.Вставить("РабочийПроцесс", ИдентификаторРабочегоПроцесса,);

	ОсновнойЛог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB");
	ОсновнойЛог.ДополнительныеПоля(ОбщиеПоля);
	
	НастройкиОбновления = Новый НастройкаОбновления();	
	ПроцессорОбновления = Новый МенеджерОбновления();

	Если ИспользуетсяОтправкаЛогаВRMQ Тогда
		ПроцессорОбновления.ДобавитьСпособВывода(ВыводЛогаВRabbitMQ);
		НастройкиОбновления.ДобавитьСпособВывода(ВыводЛогаВRabbitMQ);		
	КонецЕсли;

	НастройкиОбновления.УстановитьКешФайлов(КаталогКешаФайлов);
	НастройкиОбновления.Заполнить(ПараметрыОбновления);

	РезультатВыполнения = ПроцессорОбновления.ВыполнитьОбновление(НастройкиОбновления);
	
	Если РезультатВыполнения.Выполнено Тогда
		Лог.Информация("Успешно выполнено задание рабочего процесса");
	Иначе
		Лог.Поля("ОписаниеОшибки", РезультатВыполнения.ОписаниеОшибки).КритическаяОшибка("Рабочий процесс завершил работу с ошибкой");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередатьРабочийПроцессВОбъект(Знач ОбъектПриемник)
	
	Если Не ИдентификаторРабочегоПроцесса = Неопределено Тогда
		ОбъектПриемник.ДобавитьРабочийПроцессВЛог(ИдентификаторРабочегоПроцесса);
	КонецЕсли;

КонецПроцедуры

Функция ПрочитатьНастройкиОбновления(СоответствиеНастройки)
	
	НастройкиОбновления = Новый НастройкаОбновления(Новый УникальныйИдентификатор);
	НастройкиОбновления.УстановитьКаталогКешаФайлов(КаталогКешаФайлов);
	НастройкиОбновления.ИзСоответствия(СоответствиеНастройки);

	Возврат НастройкиОбновления;

КонецФункции

Функция ИмяФайлаЛога() Экспорт

	Возврат ОбъединитьПути(КаталогЛогов, Строка(ИдентификаторРабочегоПроцесса) + ".log");
	
КонецФункции

Функция ВJson(Знач ДанныеСериализации)
	
	ПарсерJSON = Новый ПарсерJSON;
	Возврат ПарсерJSON.ЗаписатьJSON(ДанныеСериализации);

КонецФункции

Функция ИзJson(ТекстJSON)
	
	Парсер = Новый ПарсерJSON;
	Результат = Парсер.ПрочитатьJSON(ТекстJSON);

	Возврат Результат;

КонецФункции

Процедура НастроитьЛогирование()
	
	ФайлЖурнала = Новый ВыводЛогаВФайл;
	ФайлЖурнала.ОткрытьФайл(ИмяФайлаЛога());
	ФайлЖурнала.УстановитьФорматВывода("json");
	Лог.ДобавитьСпособВывода(ФайлЖурнала);

КонецПроцедуры

Функция ПрочитатьФайлСообщенияРабочегоПроцесса(Знач ИмяФайлаСообщения)

	Лог.Отладка("Читаю текст сообщения рабочего процесса агента");
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаСообщения);
	ТекстФайлаСообщения = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Лог.Отладка("Текст сообщения <%1>", ТекстФайлаСообщения);
	СообщениеРабочегоПроцесса = Новый СообщениеРабочегоПроцесса;
	СообщениеРабочегоПроцесса.ПрочитатьСообщение(ТекстФайлаСообщения);

	ДанныеРабочегоПроцесса = СообщениеРабочегоПроцесса.ПолучитьДанныеСообщения();

	Возврат ДанныеРабочегоПроцесса;

КонецФункции

Процедура ПриСозданииОбъекта(ВходящийИдентификаторРабочегоПроцесса = Неопределено)

	Если ВходящийИдентификаторРабочегоПроцесса = Неопределено Тогда
		ИдентификаторРабочегоПроцесса = Новый УникальныйИдентификатор;
	Иначе
		ИдентификаторРабочегоПроцесса = ВходящийИдентификаторРабочегоПроцесса;
	КонецЕсли;

	ВыводитьЛогВКонсоль = Истина;

	СИ = Новый СистемнаяИнформация;
	Лог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB");
	НастроитьЛогирование();

	Лог = Лог.Поля("Префикс", "worker","РабочийПроцесс", ИдентификаторРабочегоПроцесса, 
												  "ПользовательОС", СИ.ПользовательОС, 
												  "ИмяКомпьютера", СИ.ИмяКомпьютера);
	// Лог.УстановитьУровень(УровниЛога.Отладка);

	ИспользуетсяОтправкаЛогаВRMQ = Ложь;

КонецПроцедуры

