#Использовать v8runner
#Использовать logos

Перем РабочийКонфигуратор;
Перем Лог;

Перем ЗагрузкаКонфигурацииВместоОбновления; // Булево
Перем ИспользоватьПолныйДистрибутив; // Булево
Перем ПредупрежденияКакОшибки; // Булево
Перем НаСервере; // Булево
Перем ДинамическоеОбновление; // Булево
Перем ПутьКФайлуОбновления; // Путь к файлу обновления 
Перем ВозвратККонфигурацииБазыДанных; // Булево

Перем МассивСпособовВывода;

Перем ОбработчикиПередОбновления;
Перем ОбработчикиПослеОбновления;
Перем ИдентификаторРабочегоПроцесса;


Процедура ПриСозданииОбъекта()
	
	ЗагрузкаКонфигурацииВместоОбновления = Ложь;
	ИспользоватьПолныйДистрибутив = Ложь;
	ПредупрежденияКакОшибки = Ложь;
	НаСервере = Ложь;
	ДинамическоеОбновление = Ложь;
	ВозвратККонфигурацииБазыДанных = Ложь;
	
	ОбработчикиПередОбновления = Новый Массив();
	ОбработчикиПослеОбновления = Новый Массив();
	
	МассивСпособовВывода = Новый Массив();	
	
	Лог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB").Поля("Префикс", "сonfig-updater");

КонецПроцедуры

Процедура ДобавитьСпособВывода(ПроцессорВывода) Экспорт
	
	Лог.ДобавитьСпособВывода(ПроцессорВывода);
	МассивСпособовВывода.Добавить(ПроцессорВывода);
	
КонецПроцедуры

Процедура ДобавитьПолеВЛог(Знач ИмяПоля, Знач ЗначениеПоля) Экспорт
	Лог = Лог.Поля(ИмяПоля, ЗначениеПоля);
КонецПроцедуры

Процедура ДобавитьРабочийПроцессВЛог(Знач ПИдентификаторРабочегоПроцесса) Экспорт
	
	ДобавитьПолеВЛог("РабочийПроцесс", ПИдентификаторРабочегоПроцесса);
	ИдентификаторРабочегоПроцесса = ПИдентификаторРабочегоПроцесса; 
	
КонецПроцедуры

Процедура ПередатьРабочийПроцессВОбъект(Знач ОбъектПриемник)
	
	Если Не ИдентификаторРабочегоПроцесса = Неопределено Тогда
		ОбъектПриемник.ДобавитьРабочийПроцессВЛог(ИдентификаторРабочегоПроцесса);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУправлениеКонфигуратором(НовоеУправлениеКонфигуратором) Экспорт
	РабочийКонфигуратор = НовоеУправлениеКонфигуратором;
КонецПроцедуры

Процедура УстановитьНастройкиОбновления(НастройкиОбновления) Экспорт
	
	НастройкиОбновления.Свойство("ЗагрузитьКонфигурацию", ЗагрузкаКонфигурацииВместоОбновления);
	НастройкиОбновления.Свойство("ИспользоватьПолныйДистрибутив", ИспользоватьПолныйДистрибутив);
	НастройкиОбновления.Свойство("ПредупрежденияКакОшибки", ПредупрежденияКакОшибки);
	НастройкиОбновления.Свойство("НаСервере", НаСервере);
	НастройкиОбновления.Свойство("ДинамическоеОбновление", ДинамическоеОбновление);
	НастройкиОбновления.Свойство("ПутьКФайлуОбновления", ПутьКФайлуОбновления);
	НастройкиОбновления.Свойство("ВозвратККонфигурацииБазыДанных", ВозвратККонфигурацииБазыДанных);

	Если НастройкиОбновления.Свойство("ПослеОбновления") Тогда
		
		МассивОбработчиков = НастройкиОбновления.ПослеОбновления;
		ЗаполнитьОбработчик("ПослеОбновления", МассивОбработчиков)
		
	КонецЕсли;
	
	Если НастройкиОбновления.Свойство("ПередОбновлением") Тогда
		
		МассивОбработчиков = НастройкиОбновления.ПередОбновлением;
		ЗаполнитьОбработчик("ПередОбновлением", МассивОбработчиков)
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбработчик(ИмяСобытия, МассивОбработчиков)
	
	Если ИмяСобытия = "ПередОбновлением" Тогда
		Обработчики = ОбработчикиПередОбновления;
	ИначеЕсли ИмяСобытия = "ПослеОбновления" Тогда
		Обработчики = ОбработчикиПослеОбновления;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для каждого Обработчик Из МассивОбработчиков Цикл
		
		ЗапускПредприятия = Новый ЗапускПредприятия;
		ПередатьРабочийПроцессВОбъект(ЗапускПредприятия);
		ЗапускПредприятия.УстановитьУправлениеКонфигуратором(РабочийКонфигуратор);
		Для каждого СпособВывода Из МассивСпособовВывода Цикл
			ЗапускПредприятия.ДобавитьСпособВывода(СпособВывода);
		КонецЦикла;
		
		ЗапускПредприятия.УстановитьНастройки(Обработчик);
		
		Обработчики.Добавить(ЗапускПредприятия);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПутьКФайлуОбновления(Знач ПутьКФайлу) Экспорт
	ПутьКФайлуОбновления = ПутьКФайлу;
КонецПроцедуры

Процедура Запустить() Экспорт
	
	ВыполнитьОбработчикПриСобытия("ПередОбновлением");
	
	ТрассировкаЗадач = Новый ТрассировкаЗадач(Лог, Ложь);
	Попытка
		ТрассировкаЗадач.Трассировать("Обновление конфигурации", "Начало обновления конфигурации информационной базы");
		ВыполнитьОбновление();
		ТрассировкаЗадач.Трассировать("Обновление конфигурации", "Завершено обновления конфигурации информационной базы", "success");
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТрассировкаЗадач.Трассировать("Обновление конфигурации", "Ошибка обновления конфигурации информационной базы", "error", ИнформацияОбОшибке);
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	ВыполнитьОбработчикПриСобытия("ПослеОбновления");
	
КонецПроцедуры

Процедура ПроверитьВозможностьОбновления()
	
	ФайлОбновления = Новый Файл(ПутьКФайлуОбновления);
	
	Если НЕ ФайлОбновления.Существует() Тогда
		ТекстОшибки = СтрШаблон("Файл обновления <%1> не найден", ФайлОбновления.ПолноеИмя);
		ВызватьИсключение Новый ИнформацияОбОшибке(ТекстОшибки);
	КонецЕсли;

	Если ЗагрузкаКонфигурацииВместоОбновления Тогда
		Если ФайлОбновления.ЭтоКаталог() Тогда
		
			ТекстОшибки = СтрШаблон("Файл обновления <%1> является каталогом, а не файлом", ФайлОбновления.ПолноеИмя);
			ВызватьИсключение Новый ИнформацияОбОшибке(ТекстОшибки);

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбновление()
	
	ПроверитьВозможностьОбновления();

	ФайлОбновления = Новый Файл(ПутьКФайлуОбновления);

	ТрассировкаЗадач = Новый ТрассировкаЗадач(Лог);
	
	Если ВозвратККонфигурацииБазыДанных Тогда
		
		ТрассировкаЗадач.Трассировать("Возврат к конфигурации базы данных", "Возврат к конфигурации информационной базы");
		РабочийКонфигуратор.ВернутьсяККонфигурацииБазыДанных();
		ТрассировкаЗадач.Трассировать("Возврат к конфигурации базы данных", "Выполнен возврат к конфигурации информационной базы", "success");

	КонецЕсли;

	Если ЗагрузкаКонфигурацииВместоОбновления Тогда
		
		ТрассировкаЗадач.Трассировать("Загрузка конфигурации", "Загрузка конфигурации в конфигуратор информационной базы");
		РабочийКонфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлОбновления.ПолноеИмя);
		ТрассировкаЗадач.Трассировать("Загрузка конфигурации", "Загружена конфигурация в конфигуратор информационной базы", "success");
		
	Иначе
		
		ПутьКОбновлению = ФайлОбновления.ПолноеИмя;
		
		ТрассировкаЗадач.Трассировать("Загрузка обновления", "Загрузка обновления в конфигуратор информационной базы");
		РабочийКонфигуратор.ОбновитьКонфигурациюИзФайла(ПутьКОбновлению);
		ТрассировкаЗадач.Трассировать("Загрузка обновления", "Загружено обновления в конфигуратор информационной базы", "success");
		
	КонецЕсли;
	
	ДопПоля = Новый Структура("Динамическое, ПредупрежденияКакОшибки, НаСервере", ДинамическоеОбновление, ПредупрежденияКакОшибки, НаСервере);
	ТрассировкаЗадач.Трассировать("Применение конфигурации", "Применение конфигурации информационной базы", , , ДопПоля);
	РабочийКонфигуратор.ОбновитьКонфигурациюБазыДанных(ПредупрежденияКакОшибки,
														НаСервере,
														ДинамическоеОбновление);
	ТрассировкаЗадач.Трассировать("Применение конфигурации", "Обновлена конфигурация информационной базы", "success", , ДопПоля);
	
КонецПроцедуры

Процедура ВыполнитьОбработчикПриСобытия(Знач ИмяСобытия)
	
	Если ИмяСобытия = "ПередОбновлением" Тогда
		Обработчики = ОбработчикиПередОбновления;
	ИначеЕсли ИмяСобытия = "ПослеОбновления" Тогда
		Обработчики = ОбработчикиПослеОбновления;
	Иначе
		Возврат;
	КонецЕсли;
		
	Для ИндексОбработчика = 0 По Обработчики.ВГраница() Цикл
		
		ТрассировкаЗадач = Новый ТрассировкаЗадач(Лог);
		ДопПоля = Новый Структура("Событие, ИндексОбработчика", ИмяСобытия, ИндексОбработчика);
		ТрассировкаЗадач.Трассировать("Выполнение события", "Выполнение события обновления информационной базы", , , ДопПоля);
	
	
		Попытка
			
			Таймер = Новый ТаймерВыполнения();
			ЗапускПредприятия = Обработчики[ИндексОбработчика];
			ЗапускПредприятия.Запустить();
	
			ТрассировкаЗадач.Трассировать("Выполнение события", "Выполнено событие обновления информационной базы", "success" , , ДопПоля);
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТрассировкаЗадач.Трассировать("Выполнение события", "Ошибка выполнения события обновления информационной базы", "error" , ИнформацияОбОшибке, ДопПоля);
			
			Если НЕ ЗапускПредприятия.ПродолжитьПриОшибке() Тогда
				ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры