#Использовать v8runner
#Использовать logos

Перем РабочийКонфигуратор;
Перем Лог;

Перем ЗагрузкаКонфигурацииВместоОбновления; // Булево
Перем ИспользоватьПолныйДистрибутив; // Булево
Перем ПредупрежденияКакОшибки; // Булево
Перем НаСервере; // Булево
Перем ДинамическоеОбновление; // Булево
Перем ПутьКФайлуОбновления; // Путь к файлу обновления 

Перем ПутьКОбработкеПередОбновлением; // Путь к файлу обработки перед обновлением 
Перем ПутьКОбработкеПослеОбновления; // Путь к файлу обработки перед обновлением 

Процедура ПриСозданииОбъекта()
	
	ЗагрузкаКонфигурацииВместоОбновления = Ложь;
	ИспользоватьПолныйДистрибутив = Ложь;
	ПредупрежденияКакОшибки = Ложь;
	НаСервере = Ложь;
	ДинамическоеОбновление = Ложь;

	Лог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB.ConfigUpdater");
	// Лог = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	// Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ДобавитьСпособВывода(ПроцессорВывода) Экспорт
	Лог.ДобавитьСпособВывода(ПроцессорВывода);
КонецПроцедуры

Процедура УстановитьУправлениеКонфигуратором(НовоеУправлениеКонфигуратором) Экспорт
	РабочийКонфигуратор = НовоеУправлениеКонфигуратором;
КонецПроцедуры

Процедура УстановитьНастройкиОбновления(НастройкиОбновления) Экспорт
	
	НастройкиОбновления.Свойство("ЗагрузитьКонфигурацию", ЗагрузкаКонфигурацииВместоОбновления);
	НастройкиОбновления.Свойство("ИспользоватьПолныйДистрибутив", ИспользоватьПолныйДистрибутив);
	НастройкиОбновления.Свойство("ПредупрежденияКакОшибки", ПредупрежденияКакОшибки);
	НастройкиОбновления.Свойство("НаСервере", НаСервере);
	НастройкиОбновления.Свойство("ДинамическоеОбновление", ДинамическоеОбновление);

	НастройкиОбновления.Свойство("ПутьКФайлуОбновления", ПутьКФайлуОбновления);
	НастройкиОбновления.Свойство("ПутьКОбработкеПередОбновлением", ПутьКОбработкеПередОбновлением);
	НастройкиОбновления.Свойство("ПутьКОбработкеПослеОбновления", ПутьКОбработкеПослеОбновления);

КонецПроцедуры

Процедура УстановитьПутьКФайлуОбновления(Знач ПутьКФайлу) Экспорт
	ПутьКФайлуОбновления = ПутьКФайлу;
КонецПроцедуры

Процедура Запустить() Экспорт
	
	ВыполнитьОбработкуПриСобытии("ПередОбновлением");

	Попытка
		Лог.Информация("Обновление конфигурации информационной базы");	
		ВыполнитьОбновление();
	Исключение

		ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка обновления конфигурации информационной базы: %1", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Лог.КритичнаяОшибка(ИнформацияОбОшибке);
		ВызватьИсключение ИнформацияОбОшибке;
	
	КонецПопытки;

	ВыполнитьОбработкуПриСобытии("ПослеОбновления");

КонецПроцедуры

Процедура ВыполнитьОбновление()

	ФайлОбновления = Новый Файл(ПутьКФайлуОбновления);

	Если НЕ ФайлОбновления.Существует() Тогда
		ВызватьИсключение НоваяИнформацияОбОшибке("Файл обновления <%1> не найден", ФайлОбновления.ПолноеИмя);
	КонецЕсли;

	Если ЗагрузкаКонфигурацииВместоОбновления Тогда

		Если ФайлОбновления.ЭтоКаталог() Тогда
			ВызватьИсключение НоваяИнформацияОбОшибке("Файл обновления <%1> является каталогом, а не файлом", ФайлОбновления.ПолноеИмя);
		КонецЕсли;

		Лог.Информация("Загрузка конфигурации в конфигуратор информационной базы");	
		РабочийКонфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлОбновления.ПолноеИмя);
	
	Иначе

		ПутьКОбновлению = ФайлОбновления.ПолноеИмя;

		Лог.Информация("Загрузка обновления в конфигуратор информационной базы");	
		РабочийКонфигуратор.ОбновитьКонфигурациюИзФайла(ПутьКОбновлению);

	КонецЕсли;
	
	Лог.Информация("Применение конфигурации информационной базы");	
	РабочийКонфигуратор.ОбновитьКонфигурациюБазыДанных(ПредупрежденияКакОшибки,
						НаСервере,
						ДинамическоеОбновление);

КонецПроцедуры

Функция НоваяИнформацияОбОшибке(Знач Сообщение,
	Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Если ЕстьЗаполненныеПараметры(Параметр1, Параметр2, Параметр3,
		Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9) Тогда
		
		Сообщение = СтрШаблон(Сообщение, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	Возврат Сообщение;

КонецФункции


Функция ЕстьЗаполненныеПараметры(Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)

	Если НЕ Параметр1 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр2 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр3 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр4 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр5 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр6 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр7 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр8 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр9 = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура ВыполнитьОбработкуПриСобытии(ИмяСобытия)

	Если ИмяСобытия = "ПередОбновлением" Тогда
		ПутьКФайлуОбработки = ПутьКОбработкеПередОбновлением;
	ИначеЕсли ИмяСобытия = "ПередОбновлением" Тогда
		ПутьКФайлуОбработки = ПутьКОбработкеПослеОбновления;
	Иначе
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПутьКФайлуОбработки) Тогда
		
		Лог.Информация("Выполнение события <%1>. Запуск обработки <%2> в информационной базы", ИмяСобытия, ПутьКФайлуОбработки);	

		Попытка

			ВыполнитьОбработку(ПутьКФайлуОбработки);

		Исключение

			ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка выполнения события <%1> обновления. Описание ошибки: <%2>", ИмяСобытия, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ИнформацияОбОшибке;

		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьОбработку(Знач ПутьКФайлуОбработки)
	
	ФайлОбработки = Новый Файл(ПутьКФайлуОбработки);

	Если НЕ ФайлОбработки.Существует() Тогда
		ВызватьИсключение НоваяИнформацияОбОшибке("Файл обработки <%1> не найден", ФайлОбработки.ПолноеИмя);
	КонецЕсли;

	ПараметрыЗапускаОбработки = СтрШаблон("/Execute ""%1""", ФайлОбработки.ПолноеИмя);
    РабочийКонфигуратор.ЗапуститьВРежимеПредприятия("", Ложь, ПараметрыЗапускаОбработки);

КонецПроцедуры