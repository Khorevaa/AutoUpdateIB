#Использовать v8runner
#Использовать logos
#Использовать "./internal/timer"

Перем РабочийКонфигуратор;
Перем Лог;

Перем ЗагрузкаКонфигурацииВместоОбновления; // Булево
Перем ИспользоватьПолныйДистрибутив; // Булево
Перем ПредупрежденияКакОшибки; // Булево
Перем НаСервере; // Булево
Перем ДинамическоеОбновление; // Булево
Перем ПутьКФайлуОбновления; // Путь к файлу обновления 

Перем МассивСпособовВывода;

Перем ОбработчикиПередОбновления;
Перем ОбработчикиПослеОбновления;
Перем ИдентификаторРабочегоПроцесса;


Процедура ПриСозданииОбъекта()
	
	ЗагрузкаКонфигурацииВместоОбновления = Ложь;
	ИспользоватьПолныйДистрибутив = Ложь;
	ПредупрежденияКакОшибки = Ложь;
	НаСервере = Ложь;
	ДинамическоеОбновление = Ложь;

	ОбработчикиПередОбновления = Новый Массив();
	ОбработчикиПослеОбновления = Новый Массив();

	МассивСпособовВывода = Новый Массив();	

	Лог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB").Поля("Префикс", "сonfig-updater");
	// Лог = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	// Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ДобавитьСпособВывода(ПроцессорВывода) Экспорт

	Лог.ДобавитьСпособВывода(ПроцессорВывода);
	МассивСпособовВывода.Добавить(ПроцессорВывода);

КонецПроцедуры

Процедура ДобавитьРабочийПроцессВЛог(Знач ПИдентификаторРабочегоПроцесса) Экспорт

	Лог = Лог.Поля("РабочийПроцесс", ПИдентификаторРабочегоПроцесса);
	ИдентификаторРабочегоПроцесса = ПИдентификаторРабочегоПроцесса; 

КонецПроцедуры

Процедура ПередатьРабочийПроцессВОбъект(Знач ОбъектПриемник)
	
	Если Не ИдентификаторРабочегоПроцесса = Неопределено Тогда
		ОбъектПриемник.ДобавитьРабочийПроцессВЛог(ИдентификаторРабочегоПроцесса);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьУправлениеКонфигуратором(НовоеУправлениеКонфигуратором) Экспорт
	РабочийКонфигуратор = НовоеУправлениеКонфигуратором;
КонецПроцедуры

Процедура УстановитьНастройкиОбновления(НастройкиОбновления) Экспорт
	
	НастройкиОбновления.Свойство("ЗагрузитьКонфигурацию", ЗагрузкаКонфигурацииВместоОбновления);
	НастройкиОбновления.Свойство("ИспользоватьПолныйДистрибутив", ИспользоватьПолныйДистрибутив);
	НастройкиОбновления.Свойство("ПредупрежденияКакОшибки", ПредупрежденияКакОшибки);
	НастройкиОбновления.Свойство("НаСервере", НаСервере);
	НастройкиОбновления.Свойство("ДинамическоеОбновление", ДинамическоеОбновление);
	НастройкиОбновления.Свойство("ПутьКФайлуОбновления", ПутьКФайлуОбновления);

	Если НастройкиОбновления.Свойство("ПослеОбновления") Тогда

		МассивОбработчиков = НастройкиОбновления.ПослеОбновления;
		ЗаполнитьОбработчик("ПослеОбновления", МассивОбработчиков)

	КонецЕсли;

	Если НастройкиОбновления.Свойство("ПередОбновлением") Тогда

		МассивОбработчиков = НастройкиОбновления.ПередОбновлением;
		ЗаполнитьОбработчик("ПередОбновлением", МассивОбработчиков)

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОбработчик(ИмяСобытия, МассивОбработчиков)
	
	Если ИмяСобытия = "ПередОбновлением" Тогда
		Обработчики = ОбработчикиПередОбновления;
	ИначеЕсли ИмяСобытия = "ПослеОбновления" Тогда
		Обработчики = ОбработчикиПослеОбновления;
	Иначе
		Возврат;
	КонецЕсли;

	Для каждого Обработчик Из МассивОбработчиков Цикл
			
		ЗапускПредприятия = Новый ЗапускПредприятия;
		ПередатьРабочийПроцессВОбъект(ЗапускПредприятия);
		ЗапускПредприятия.УстановитьУправлениеКонфигуратором(РабочийКонфигуратор);
		Для каждого СпособВывода Из МассивСпособовВывода Цикл
			ЗапускПредприятия.ДобавитьСпособВывода(СпособВывода);
		КонецЦикла;

		ЗапускПредприятия.УстановитьНастройки(Обработчик);

		Обработчики.Добавить(ЗапускПредприятия);

	КонецЦикла;

КонецПроцедуры


Процедура УстановитьПутьКФайлуОбновления(Знач ПутьКФайлу) Экспорт
	ПутьКФайлуОбновления = ПутьКФайлу;
КонецПроцедуры

Процедура Запустить() Экспорт
	
	Если ПустаяСтрока(ПутьКФайлуОбновления) Тогда
		Лог.Отладка("Обновление невозможно. Не передан файл обновления");
		Возврат;
	КонецЕсли;

	ВыполнитьОбработчикПриСобытия("ПередОбновлением");

	Попытка
		Лог.Информация("Начало обновления конфигурации информационной базы");	
		ВыполнитьОбновление();
	Исключение

		// ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка обновления конфигурации информационной базы: %1", );
		// Лог.КритичнаяОшибка(ИнформацияОбОшибке);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	
	КонецПопытки;

	ВыполнитьОбработчикПриСобытия("ПослеОбновления");

КонецПроцедуры

Процедура ВыполнитьОбновление()

	ФайлОбновления = Новый Файл(ПутьКФайлуОбновления);

	Если НЕ ФайлОбновления.Существует() Тогда
		ВызватьИсключение НоваяИнформацияОбОшибке("Файл обновления <%1> не найден", ФайлОбновления.ПолноеИмя);
	КонецЕсли;
	Таймер = Новый ТаймерВыполнения();

	Если ЗагрузкаКонфигурацииВместоОбновления Тогда

		Если ФайлОбновления.ЭтоКаталог() Тогда
			ВызватьИсключение НоваяИнформацияОбОшибке("Файл обновления <%1> является каталогом, а не файлом", ФайлОбновления.ПолноеИмя);
		КонецЕсли;

		Лог.Информация("Загрузка конфигурации в конфигуратор информационной базы");	
		РабочийКонфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлОбновления.ПолноеИмя);
		Лог.Поля("ВремяВыполнения", Таймер.ВремяЗамера()).Информация("Загружена конфигурация в конфигуратор информационной базы");;

	Иначе

		ПутьКОбновлению = ФайлОбновления.ПолноеИмя;

		Лог.Информация("Загрузка обновления в конфигуратор информационной базы");	
		РабочийКонфигуратор.ОбновитьКонфигурациюИзФайла(ПутьКОбновлению);
		Лог.Поля("ВремяВыполнения", Таймер.ВремяЗамера()).Информация("Загружено обновления в конфигуратор информационной базы")
	КонецЕсли;
		
	Если ДинамическоеОбновление Тогда
		Лог.Информация("Динамическое применение конфигурации информационной базы");	
	Иначе
		Лог.Информация("Применение конфигурации информационной базы");	
	КонецЕсли;
	
	Таймер = Новый ТаймерВыполнения();
	РабочийКонфигуратор.ОбновитьКонфигурациюБазыДанных(ПредупрежденияКакОшибки,
						НаСервере,
						ДинамическоеОбновление);
	Лог.Поля("ВремяВыполнения", Таймер.ВремяЗамера()).Информация("Обновлена конфигурация информационной базы")

КонецПроцедуры

Функция НоваяИнформацияОбОшибке(Знач Сообщение,
	Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Если ЕстьЗаполненныеПараметры(Параметр1, Параметр2, Параметр3,
		Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9) Тогда
		
		Сообщение = СтрШаблон(Сообщение, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	Возврат Сообщение;

КонецФункции


Функция ЕстьЗаполненныеПараметры(Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)

	Если НЕ Параметр1 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр2 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр3 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр4 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр5 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр6 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр7 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр8 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр9 = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура ВыполнитьОбработчикПриСобытия(Знач ИмяСобытия)

	Если ИмяСобытия = "ПередОбновлением" Тогда
		Обработчики = ОбработчикиПередОбновления;
	ИначеЕсли ИмяСобытия = "ПослеОбновления" Тогда
		Обработчики = ОбработчикиПослеОбновления;
	Иначе
		Возврат;
	КонецЕсли;

	Для ИндексОбработчика = 0 По Обработчики.ВГраница() Цикл
		
		Лог.Информация("Выполнение события <%1> [%2]", ИмяСобытия, ИндексОбработчика);	

		Попытка
			
			Таймер = Новый ТаймерВыполнения();
			ЗапускПредприятия = Обработчики[ИндексОбработчика];
			ЗапускПредприятия.Запустить();
			Лог.Поля("ВремяВыполнения", Таймер.ВремяЗамера()).Информация("Выполнено события <%1> [%2]", ИмяСобытия, ИндексОбработчика);

		Исключение

			ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка выполнения события <%1> [%2] обновления. Описание ошибки: <%3>", ИмяСобытия, ИндексОбработчика, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ИнформацияОбОшибке;

		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры