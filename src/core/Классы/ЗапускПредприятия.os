#Использовать v8runner
#Использовать logos

Перем РабочийКонфигуратор;
Перем Лог;

Перем ЗапуститьВыполнениеРегламентныхЗаданий; // Булево
Перем ОчиститьКешВызовов; // Булево
Перем ПривилегированныйРежим; // Булево
Перем РежимУправляемогоПриложения; // Булево
Перем ПродолжитьПриОшибке;
Перем КлючЗапуска; // Строка
Перем ДополнительныеКлючи; // Массив - строка
Перем ПутьКОбработке; // Путь к файлу обновления 

Процедура ПриСозданииОбъекта()
	
	ЗапуститьВыполнениеРегламентныхЗаданий = Ложь;
	ОчиститьКешВызовов = Ложь;
	ПривилегированныйРежим = Ложь;
	РежимУправляемогоПриложения = Ложь;
	ПродолжитьПриОшибке = Ложь;
	КлючЗапуска = "";
	ДополнительныеКлючи = Новый Массив();
	ПутьКОбработке = "";

	Лог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB").Поля("Префикс", "run-enterprise");
	//Лог = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	// Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ДобавитьСпособВывода(ПроцессорВывода) Экспорт
	Лог.ДобавитьСпособВывода(ПроцессорВывода);
КонецПроцедуры

Процедура ДобавитьРабочийПроцессВЛог(Знач ПИдентификаторРабочегоПроцесса) Экспорт

	Лог = Лог.Поля("РабочийПроцесс", ПИдентификаторРабочегоПроцесса);

КонецПроцедуры

Процедура УстановитьУправлениеКонфигуратором(НовоеУправлениеКонфигуратором) Экспорт
	РабочийКонфигуратор = НовоеУправлениеКонфигуратором;
КонецПроцедуры

Функция ПродолжитьПриОшибке() Экспорт
	Возврат ПродолжитьПриОшибке;
КонецФункции

процедура УстановитьНастройки(НастройкиЗапуска) Экспорт
	
	НастройкиЗапуска.Свойство("ЗапуститьВыполнениеРегламентныхЗаданий", ЗапуститьВыполнениеРегламентныхЗаданий);
	НастройкиЗапуска.Свойство("ОчиститьКешВызовов", ОчиститьКешВызовов);
	НастройкиЗапуска.Свойство("ПривилегированныйРежим", ПривилегированныйРежим);
	НастройкиЗапуска.Свойство("РежимУправляемогоПриложения", РежимУправляемогоПриложения);
	НастройкиЗапуска.Свойство("КлючЗапуска", КлючЗапуска);
	НастройкиЗапуска.Свойство("ДополнительныеКлючи", ДополнительныеКлючи);
	НастройкиЗапуска.Свойство("ПутьКОбработке", ПутьКОбработке);
	НастройкиЗапуска.Свойство("ПродолжитьПриОшибке", ПродолжитьПриОшибке);
	
	Если ДополнительныеКлючи = Неопределено Тогда
		ДополнительныеКлючи = Новый Массив();
	КонецЕсли;

КонецПроцедуры

Процедура Запустить() Экспорт
	
	Попытка
		ТрассировкаЗадач = Новый ТрассировкаЗадач(Лог);
		ТрассировкаЗадач.Трассировать("Запуск предприятия 1С", "Запуск информационной базы в режиме предприятия");
		ЗапуститьВРежимеПредприятия();
		ТрассировкаЗадач.Трассировать("Запуск предприятия 1С", "Выполнен запуск в режиме предприятия", "success" );
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТрассировкаЗадач.Трассировать("Запуск предприятия 1С", "Ошибка выполнения в режиме предприятия", "error" , ИнформацияОбОшибке);
		
			ВызватьИсключение ИнформацияОбОшибке;
	
	КонецПопытки;

КонецПроцедуры

Процедура ЗапуститьВРежимеПредприятия()
	
	ПараметрыЗапуска = РабочийКонфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска[0] = "ENTERPRISE";
	Если Не ПустаяСтрока(КлючЗапуска) Тогда
		Лог.Отладка("Параметр запуск /C <%1>", КлючЗапуска);
		ПараметрыЗапуска.Добавить("/C"+КлючЗапуска);
	КонецЕсли;


	Если Не ПустаяСтрока(ПутьКОбработке) Тогда
		Лог.Отладка("Параметр запуск /execute <%1>", ПутьКОбработке);
		ПараметрыЗапуска.Добавить(СтрШаблон("/execute ""%1""", ПутьКОбработке));
	КонецЕсли;

	Если РежимУправляемогоПриложения = Истина Тогда
		ПараметрыЗапуска.Вставить(2, "/RunModeManagedApplication");
	ИначеЕсли РежимУправляемогоПриложения = Ложь Тогда
		ПараметрыЗапуска.Вставить(2, "/RunModeOrdinaryApplication");
	КонецЕсли;
	
	Если ПривилегированныйРежим Тогда
		ПараметрыЗапуска.Добавить("/UsePrivilegedMode");
	КонецЕсли;

	Если ЗапуститьВыполнениеРегламентныхЗаданий Тогда
		ПараметрыЗапуска.Добавить("/AllowExecuteScheduledJobs -Force");
	Иначе 
		ПараметрыЗапуска.Добавить("/AllowExecuteScheduledJobs -Off");
	КонецЕсли;

	Если ОчиститьКешВызовов Тогда
		ПараметрыЗапуска.Добавить("/ClearCache");
	КонецЕсли;

	Если ДополнительныеКлючи <> Неопределено Тогда
		Для каждого ДополнительныйКлюч Из ДополнительныеКлючи Цикл
			ПараметрыЗапуска.Добавить(ДополнительныйКлюч);
		КонецЦикла;
	КонецЕсли;

	 КодВозврата = РабочийКонфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение РабочийКонфигуратор.ВыводКоманды();
	КонецЕсли;

КонецПроцедуры