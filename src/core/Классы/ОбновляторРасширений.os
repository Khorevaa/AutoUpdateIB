#Использовать v8runner
#Использовать logos

Перем РабочийКонфигуратор;
Перем Лог;

Перем ПредупрежденияКакОшибки; // Булево
Перем НаСервере; // Булево
Перем ДинамическоеОбновление; // Булево
Перем ИмяРасширения;
Перем ПутьКФайлуОбновления; // Путь к файлу обновления 

Перем УстановитьБезопасныйРежим;
Перем БезопасныйРежим;
Перем УстановитьЗащитуОтОпасныхДействий;
Перем ЗащитаОтОпасныхДействий;

Перем ПутьКОбработкеПередОбновлением; // Путь к файлу обработки перед обновлением 
Перем ПутьКОбработкеПослеОбновления; // Путь к файлу обработки после обновлением 
Перем ПутьКОбработкиСнятияОграничений; // Путь к файлу обработки снятия ограничений расширений 

Процедура ПриСозданииОбъекта()
	
	ПредупрежденияКакОшибки = Ложь;
	НаСервере = Ложь;
	ДинамическоеОбновление = Ложь;
	УстановитьБезопасныйРежим = Ложь;
	УстановитьЗащитуОтОпасныхДействий = Ложь;
	
КонецПроцедуры

Процедура УстановитьУправлениеКонфигуратором(НовоеУправлениеКонфигуратором) Экспорт
	РабочийКонфигуратор = НовоеУправлениеКонфигуратором;
КонецПроцедуры

Процедура УстановитьНастройкиОбновления(НастройкиОбновления) Экспорт
	
	НастройкиОбновления.Свойство("ПредупрежденияКакОшибки", ПредупрежденияКакОшибки);
	НастройкиОбновления.Свойство("НаСервере", НаСервере);
	НастройкиОбновления.Свойство("ДинамическоеОбновление", ДинамическоеОбновление);
	НастройкиОбновления.Свойство("УстановитьБезопасныйРежим", УстановитьБезопасныйРежим);
	НастройкиОбновления.Свойство("БезопасныйРежим", БезопасныйРежим);
	НастройкиОбновления.Свойство("УстановитьЗащитуОтОпасныхДействий", УстановитьЗащитуОтОпасныхДействий);
	НастройкиОбновления.Свойство("ЗащитаОтОпасныхДействий", ЗащитаОтОпасныхДействий);
	
	НастройкиОбновления.Свойство("ИмяРасширения", ИмяРасширения);

	НастройкиОбновления.Свойство("ПутьКФайлуОбновления", ПутьКФайлуОбновления);
	НастройкиОбновления.Свойство("ПутьКОбработкеПередОбновлением", ПутьКОбработкеПередОбновлением);
	НастройкиОбновления.Свойство("ПутьКОбработкеПослеОбновления", ПутьКОбработкеПослеОбновления);
	НастройкиОбновления.Свойство("ПутьКОбработкиСнятияОграничений", ПутьКОбработкиСнятияОграничений);

КонецПроцедуры

Процедура УстановитьПутьКФайлуОбновления(Знач ПутьКФайлу) Экспорт
	ПутьКФайлуОбновления = ПутьКФайлу;
КонецПроцедуры

Процедура Запустить() Экспорт
	
	ВыполнитьОбработкуПриСобытии("ПередОбновлением");
	
	Попытка
		Лог.Информация("Обновление расширения информационной базы");	
		ВыполнитьОбновление();
	Исключение
		
		ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка обновления расширения информационной базы: %1", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Лог.КритичнаяОшибка(ИнформацияОбОшибке);
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
	ВыполнитьОбработкуПриСобытии("ПослеОбновления");
	
КонецПроцедуры

// TODO: Переделать на обновление через предприятие
Процедура ВыполнитьОбновление()
	
	ФайлОбновления = Новый Файл(ПутьКФайлуОбновления);
	
	Если НЕ ФайлОбновления.Существует() Тогда
		ВызватьИсключение НоваяИнформацияОбОшибке("Файл обновления <%1> для расширения <%2> не найден", ФайлОбновления.ПолноеИмя, ИмяРасширения);
	КонецЕсли;
	
	ПутьКОбновлению = ФайлОбновления.ПолноеИмя;
	
	Попытка
		
		ПараметрыЗапуска = РабочийКонфигуратор.ПолучитьПараметрыЗапуска();
		РабочийКонфигуратор.Добавить("/LoadCfg");
		РабочийКонфигуратор.Добавить(ПутьКОбновлению);
		РабочийКонфигуратор.Добавить("-Extension """ + ИмяРасширения + """");
		РабочийКонфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Исключение

		ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка обновления расширения <%1> информационной базы: %2", ИмяРасширения, РабочийКонфигуратор.ВыводКоманды());
		Лог.КритичнаяОшибка(ИнформацияОбОшибке);
		ВызватьИсключение ИнформацияОбОшибке;

	КонецПопытки;
	
	Попытка
		
		ПараметрыЗапуска = РабочийКонфигуратор.ПолучитьПараметрыЗапуска();
		РабочийКонфигуратор.Добавить("/CheckCanApplyConfigurationExtensions");
		РабочийКонфигуратор.Добавить("-Extension """ + ИмяРасширения + """");
		РабочийКонфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
			
	Исключение

		ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка проверки возможности применения расширения <%1> информационной базы: %2", ИмяРасширения, РабочийКонфигуратор.ВыводКоманды());
		Лог.КритичнаяОшибка(ИнформацияОбОшибке);
		ВызватьИсключение ИнформацияОбОшибке;

	КонецПопытки;

	
	Лог.Информация("Обновление расширения <%1> информационной базы", ИмяРасширения);	
			РабочийКонфигуратор.ОбновитьКонфигурациюБазыДанных(ПредупрежденияКакОшибки,
			НаСервере,
			ДинамическоеОбновление,
			ИмяРасширения);

	ВыполнитьОбработкуПриСобытии("СнятьОграниченияРасширения");

	// TODO: Сделать снятие безопасного режима с расширения
			
КонецПроцедуры

Функция НоваяИнформацияОбОшибке(Знач Сообщение,
	Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Если ЕстьЗаполненныеПараметры(Параметр1, Параметр2, Параметр3,
		Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9) Тогда
		
		Сообщение = СтрШаблон(Сообщение, Параметр1,
		Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Функция ЕстьЗаполненныеПараметры(Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Если НЕ Параметр1 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр2 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр3 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр4 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр5 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр6 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр7 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр8 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр9 = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВыполнитьОбработкуПриСобытии(ИмяСобытия)
	
	КлючЗапуска = "";

	Если ИмяСобытия = "ПередОбновлением" Тогда
		ПутьКФайлуОбработки = ПутьКОбработкеПередОбновлением;
	ИначеЕсли ИмяСобытия = "ПередОбновлением" Тогда
		ПутьКФайлуОбработки = ПутьКОбработкеПослеОбновления;
	ИначеЕсли ИмяСобытия = "СнятьОграниченияРасширения"
		И (УстановитьБезопасныйРежим ИЛИ УстановитьЗащитуОтОпасныхДействий) Тогда
		ПутьКФайлуОбработки = ПутьКОбработкиСнятияОграничений;
		КлючЗапуска = СтрШаблон("УстановитьБезопасныйРежим=%1;УстановитьЗащитуОтОпасныхДействий=%2", БезопасныйРежим, ЗащитаОтОпасныхДействий);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьКФайлуОбработки) Тогда
		
		Попытка
			
			ВыполнитьОбработку(ПутьКФайлуОбработки, КлючЗапуска);
			
		Исключение
			
			ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка выполнения события <%1> обновления. Описание ошибки: <%2>", ИмяСобытия, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ИнформацияОбОшибке;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработку(Знач ПутьКФайлуОбработки, Знач КлючЗапуска = "")
	
	ФайлОбработки = Новый Файл(ПутьКФайлуОбработки);
	
	Если НЕ ФайлОбработки.Существует() Тогда
		ВызватьИсключение НоваяИнформацияОбОшибке("Файл обработки <%1> не найден", ФайлОбработки.ПолноеИмя);
	КонецЕсли;
	
	ПараметрыЗапускаОбработки = СтрШаблон("/Execute ""%1""", ФайлОбработки.ПолноеИмя);
	РабочийКонфигуратор.ЗапуститьВРежимеПредприятия(КлючЗапуска, Ложь, ПараметрыЗапускаОбработки);
	
КонецПроцедуры