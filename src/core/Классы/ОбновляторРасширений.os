#Использовать v8runner
#Использовать logos
#Использовать types
#Использовать fs
#Использовать json
#Использовать "./internal"
#Использовать "./internal/timer"

Перем РабочийКонфигуратор;
Перем Лог;

Перем НаборРасширений;

Перем ОбработчикиПередОбновления; // Путь к файлу обработки перед обновлением 
Перем ОбработчикиПослеОбновления; // Путь к файлу обработки после обновлением 
Перем ПутьКОбработкиОбновленияРасширения; // Путь к файлу обработки обновления расширений 
Перем ОтключитьВсеРасширения;

Перем ЗагрузкаРасширенийВКонфигураторе;
Перем РежимУправляемогоПриложения;
Перем ПериодОкончанияОжидания;

Перем МассивСпособовВывода;
Перем ИдентификаторРабочегоПроцесса;

Процедура ПриСозданииОбъекта()
	
	Лог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB").Поля("Префикс", "сfe-updater");
	// Лог = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	// Лог.УстановитьУровень(УровниЛога.Отладка);
	ОтключитьВсеРасширения = Ложь;
	МассивСпособовВывода = Новый Массив();
	ПериодОкончанияОжидания = 0;
	ОбработчикиПередОбновления = Новый Массив();
	ОбработчикиПослеОбновления = Новый Массив();

КонецПроцедуры

Процедура ДобавитьСпособВывода(Знач ПроцессорВывода) Экспорт
	МассивСпособовВывода.Добавить(ПроцессорВывода);
	Лог.ДобавитьСпособВывода(ПроцессорВывода);
КонецПроцедуры

Процедура УстановитьУправлениеКонфигуратором(НовоеУправлениеКонфигуратором) Экспорт
	РабочийКонфигуратор = НовоеУправлениеКонфигуратором;
КонецПроцедуры

Процедура УстановитьНастройкиОбновления(НастройкиОбновления) Экспорт
	
	НаборРасширений = КопированиеТипа.Скопировать(НастройкиОбновления.НаборРасширений);

	НастройкиОбновления.Свойство("ПутьКОбработкиОбновленияРасширения", ПутьКОбработкиОбновленияРасширения);
	НастройкиОбновления.Свойство("ОтключитьВсеРасширения", ОтключитьВсеРасширения);
	НастройкиОбновления.Свойство("ЗагрузкаРасширенийВКонфигураторе", ЗагрузкаРасширенийВКонфигураторе);
	НастройкиОбновления.Свойство("РежимУправляемогоПриложения", РежимУправляемогоПриложения);
	НастройкиОбновления.Свойство("ПериодОкончанияОжидания", ПериодОкончанияОжидания);

	Если НастройкиОбновления.Свойство("ПослеОбновления") Тогда

		ЗаполнитьОбработчик("ПослеОбновления", НастройкиОбновления.ПослеОбновления)

	КонецЕсли;

	Если НастройкиОбновления.Свойство("ПередОбновлением") Тогда

		ЗаполнитьОбработчик("ПередОбновлением", НастройкиОбновления.ПередОбновлением)

	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПериодОкончанияОжидания) Тогда
		ПериодОкончанияОжидания = 30*60*1000; // 30 Минут
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьРабочийПроцессВЛог(Знач ПИдентификаторРабочегоПроцесса) Экспорт

	Лог = Лог.Поля("РабочийПроцесс", ПИдентификаторРабочегоПроцесса);
	ИдентификаторРабочегоПроцесса = ПИдентификаторРабочегоПроцесса;

КонецПроцедуры

Процедура ПередатьРабочийПроцессВОбъект(Знач ОбъектПриемник)
	
	Если Не ИдентификаторРабочегоПроцесса = Неопределено Тогда
		ОбъектПриемник.ДобавитьРабочийПроцессВЛог(ИдентификаторРабочегоПроцесса);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОбработчик(ИмяСобытия, МассивОбработчиков)
	
	Если ИмяСобытия = "ПередОбновлением" Тогда
		Обработчики = ОбработчикиПередОбновления;
	ИначеЕсли ИмяСобытия = "ПослеОбновления" Тогда
		Обработчики = ОбработчикиПослеОбновления;
	Иначе
		Возврат;
	КонецЕсли;

	Для каждого Обработчик Из МассивОбработчиков Цикл
			
		ЗапускПредприятия = Новый ЗапускПредприятия;
		ПередатьРабочийПроцессВОбъект(ЗапускПредприятия);
		ЗапускПредприятия.УстановитьУправлениеКонфигуратором(РабочийКонфигуратор);
		Для каждого СпособВывода Из МассивСпособовВывода Цикл
			ЗапускПредприятия.ДобавитьСпособВывода(СпособВывода);
		КонецЦикла;

		ЗапускПредприятия.УстановитьНастройки(Обработчик);

		Обработчики.Добавить(ЗапускПредприятия);

	КонецЦикла;

КонецПроцедуры

Процедура Запустить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПутьКОбработкиОбновленияРасширения) Тогда
		
		ИнформацияОбОшибке = "Ошибка обновления расширений не задана обработка обновления";
		Лог.КритичнаяОшибка(ИнформацияОбОшибке);
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецЕсли;

	ВыполнитьОбработчикПриСобытия("ПередОбновлением");
	
	ВыполнитьОбновление();
	
	ВыполнитьОбработчикПриСобытия("ПослеОбновления");
	 
КонецПроцедуры

// TODO: Переделать на обновление через предприятие
Процедура ВыполнитьОбновление()
	ДопПоля = Новый Структура("КоличествоРасширений", НаборРасширений.Количество());
		
	ТрассировкаЗадач = Новый ТрассировкаЗадач(Лог);
	ТрассировкаЗадач.Трассировать("Обновление расширений", "Обновление расширений информационной базы",,,ДопПоля);

	ЗагрузкаРасширенийВыполнена = Ложь;
	Попытка
	
		Если ЗагрузкаРасширенийВКонфигураторе Тогда
			ЗагрузкаРасширенийВыполнена = ЗагрузкаРасширенийВКонфигураторе();
		КонецЕсли;

		ФайлДанныхДляОбработки = ВременныеФайлы.СоздатьФайл();
		
		ДанныеДляОбработки = СформироватьДанныеДляОбработки(ЗагрузкаРасширенийВыполнена);

		Если ДанныеДляОбработки.НаборРасширений.Количество() = 0 Тогда
			Лог.Предупреждение("Отсутствуют расширения для обновления информационной базы");	
			Возврат;
		КонецЕсли;

		ПутьКФайлуЛога = ВременныеФайлы.СоздатьФайл();

		ДанныеДляОбработки.Вставить("ПутьКФайлуЛога", ПутьКФайлуЛога);

		ЗаписатьДанныеДляОбработки(ФайлДанныхДляОбработки, ДанныеДляОбработки);
		
		КлючЗапуска = СтрШаблон("""%1""", ФайлДанныхДляОбработки);

		ВыполнитьОбработку(ПутьКОбработкиОбновленияРасширения, КлючЗапуска);
		
		Лог.Отладка("Читаю текст лога обновления расширений");
		
		ОбработатьДанныеЛогаОбновленияРасширений(ПутьКФайлуЛога);

	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТрассировкаЗадач.Трассировать("Обновление расширений", "Ошибка обновления расширения информационной базы", "error", ИнформацияОбОшибке);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

	КонецПопытки;

	ТрассировкаЗадач.Трассировать("Обновление расширений", "Обновлены расширения информационной базы", "success", , ДопПоля);

КонецПроцедуры

Функция ЗагрузкаРасширенийВКонфигураторе()
	
	// TODO: Реализовать механизм загрузки расширений через конфигуратор
	Возврат Ложь;

КонецФункции

Процедура ОбработатьДанныеЛогаОбновленияРасширений(Знач ПутьКФайлу)
	
	ТекстФайла = РаботаСФайлами.ПрочитатьФайл(ПутьКФайлу);

	Лог.Отладка("Текст лога обновления расширений <%1>", ТекстФайла);
	
	СтруктурированныйЛог = РаботаСФайлами.ОбъектИзJson(ТекстФайла);
	ЕстьОшибкаОбновления = Ложь;

	Для каждого СтрокаЛога Из СтруктурированныйЛог Цикл
		
		СообщениеЛога = СтрокаЛога["Сообщение"];
		УровеньСообщения = СтрокаЛога["УровеньСообщения"];
		ДополнительныеДанные = СтрокаЛога["ДополнительныеДанные"];
		
		Если ДополнительныеДанные = Неопределено Тогда
			ДополнительныеДанные = Новый Структура();
		КонецЕсли;
		
		ДатаСобытия = СтрокаЛога["ДатаВремя"];

		ДатаСобытия = ФорматироватьДатуСобытия(ДатаСобытия);
		ЛогСообщения = Лог.Поля("time", ДатаСобытия).ПоляИз(ДополнительныеДанные);

		Если УровеньСообщения = Неопределено Тогда
			УровеньСообщения = УровниЛога.Отладка;
		Иначе
			УровеньСообщения = Число(УровеньСообщения);
		КонецЕсли;

		Если УровеньСообщения = УровниЛога.Информация Тогда
			ЛогСообщения.Информация(СообщениеЛога);
		ИначеЕсли УровеньСообщения = УровниЛога.Ошибка Тогда
			ЛогСообщения.Ошибка(СообщениеЛога);
			ЕстьОшибкаОбновления = Истина;
		ИначеЕсли УровеньСообщения = УровниЛога.Отладка Тогда
			ЛогСообщения.Отладка(СообщениеЛога);
		ИначеЕсли УровеньСообщения = УровниЛога.КритичнаяОшибка Тогда
			ЛогСообщения.КритичнаяОшибка(СообщениеЛога);
			ЕстьОшибкаОбновления = Истина;
		ИначеЕсли УровеньСообщения = УровниЛога.Предупреждение Тогда
			ЛогСообщения.Предупреждение(СообщениеЛога);
		Иначе
			ЛогСообщения.Отладка(СообщениеЛога)
		КонецЕсли;

	КонецЦикла;

	Если ЕстьОшибкаОбновления Тогда
		ВызватьИсключение "Ошибка обновления расширений в режиме предприятия";
	КонецЕсли;

КонецПроцедуры

Функция ФорматироватьДатуСобытия(Знач ДатаСобытия)
	
	Если ДатаСобытия = Неопределено Тогда
		ДатаСобытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
		
	СтруктураДаты = РазложитьДатуВМиллисекундах(ДатаСобытия);
		
	ДатаСобытия = СтрШаблон(Формат(СтруктураДаты.Дата, "ДФ='yyyy-MM-ddTHH:mm:ss.%1Z'"), Формат(СтруктураДаты.Миллисекунды, "ЧЦ=3; ЧВН="));
	
	Возврат ДатаСобытия;
	
КонецФункции

Функция РазложитьДатуВМиллисекундах(УниверсальнаяДатаВМиллисекундах) Экспорт
	
	ПолныеМиллисекунды = Окр(УниверсальнаяДатаВМиллисекундах, 0);

	ОкругленныеМС = Окр(ПолныеМиллисекунды/1000, 0, 0) * 1000;
	Миллисекунды = ПолныеМиллисекунды - ОкругленныеМС;
	
	Если Миллисекунды < 0 Тогда
		Миллисекунды = 1000 + Миллисекунды;
	КонецЕсли;

	Секунды = (ПолныеМиллисекунды - Миллисекунды)/1000;

	ТиповаяДата = Дата("00010101") + Секунды;
    
	Возврат Новый Структура("Дата, Секунды, Миллисекунды", ТиповаяДата, Секунды, Миллисекунды);

КонецФункции

Функция СформироватьДанныеДляОбработки(ЗагрузкаРасширенийВыполнена)
	
	ДанныеДляОбработки = Новый Структура();
	ДанныеДляОбработки.Вставить("ОтключитьВсеРасширения", ОтключитьВсеРасширения);
	ДанныеДляОбработки.Вставить("ЗагрузкаОбновленийРасширений", Не ЗагрузкаРасширенийВыполнена);
	ДанныеДляОбработки.Вставить("УровеньСообщений", Лог.Уровень());

	НаборРасширенийЗаписи = Новый Массив();

	Для каждого Расширение Из НаборРасширений Цикл
		
		Если Не ФС.ФайлСуществует(Расширение.ПутьКФайлуОбновления) Тогда
			Лог.КритичнаяОшибка("Не найден файл обновления <%1> для расширения <%2>. Пропущено", Расширение.ПутьКФайлуОбновления, Расширение.Имя);
			Продолжить;
		КонецЕсли;
		
		НовоеРасширение = КопированиеТипа.Скопировать(Расширение);
		НаборРасширенийЗаписи.Добавить(НовоеРасширение);

	КонецЦикла;

	ДанныеДляОбработки.Вставить("НаборРасширений", НаборРасширенийЗаписи);

	Возврат ДанныеДляОбработки;

КонецФункции

Процедура ЗаписатьДанныеДляОбработки(Знач ПутьКФайлу, ДанныеДляОбработки)

	ТекстJSON = РаботаСФайлами.ОБъектВJson(ДанныеДляОбработки);

	Лог.Отладка("Текст файла для обработки обновления: <%1>", ТекстJSON);

	РаботаСФайлами.ЗаписатьФайл(ПутьКФайлу, ТекстJSON)

КонецПроцедуры

Процедура ВыполнитьОбработчикПриСобытия(Знач ИмяСобытия)

	Если ИмяСобытия = "ПередОбновлением" Тогда
		Обработчики = ОбработчикиПередОбновления;
	ИначеЕсли ИмяСобытия = "ПослеОбновления" Тогда
		Обработчики = ОбработчикиПослеОбновления;
	Иначе
		Возврат;
	КонецЕсли;
		
	Для ИндексОбработчика = 0 По Обработчики.ВГраница() Цикл
		
		ТрассировкаЗадач = Новый ТрассировкаЗадач(Лог);
		ДопПоля = Новый Структура("Событие, ИндексОбработчика", ИмяСобытия, ИндексОбработчика);
		ТрассировкаЗадач.Трассировать("Выполнение события", "Выполнение события обновления информационной базы", , , ДопПоля);
		
		Попытка
			
			Таймер = Новый ТаймерВыполнения();
			ЗапускПредприятия = Обработчики[ИндексОбработчика];
			ЗапускПредприятия.Запустить();
	
			ТрассировкаЗадач.Трассировать("Выполнение события", "Выполнено событие обновления информационной базы", "success" , , ДопПоля);
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТрассировкаЗадач.Трассировать("Выполнение события", "Ошибка выполнения события обновления информационной базы", "error" , ИнформацияОбОшибке, ДопПоля);
			
			Если НЕ ЗапускПредприятия.ПродолжитьПриОшибке() Тогда
				ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьОбработку(Знач ПутьКФайлуОбработки, Знач КлючЗапуска = "")
	
	ФайлОбработки = Новый Файл(ПутьКФайлуОбработки);
	
	Если НЕ ФайлОбработки.Существует() Тогда
		ВызватьИсключение СтрШаблон("Файл обработки <%1> не найден", ФайлОбработки.ПолноеИмя);
	КонецЕсли;
	
	Лог.Отладка("Выполняю обработку <%1> ключ запуска <%2>", ФайлОбработки.ПолноеИмя, КлючЗапуска);
	ПараметрыЗапускаОбработки = СтрШаблон("/Execute ""%1""", ФайлОбработки.ПолноеИмя);
	
	Если ЗначениеЗаполнено(ПериодОкончанияОжидания)
		И Не ПериодОкончанияОжидания = 0 Тогда
		ОбработчикОжидания = Новый ОбработчикОжидания(ПериодОкончанияОжидания);
		РабочийКонфигуратор.УстановитьОбработчикОжидания(ОбработчикОжидания, 10*1000); // период опроса раз в 10 сек
	КонецЕсли;

	РабочийКонфигуратор.ЗапуститьВРежимеПредприятия(КлючЗапуска, РежимУправляемогоПриложения, ПараметрыЗапускаОбработки);

	ВыводКоманды = РабочийКонфигуратор.ВыводКоманды();
	Лог.Отладка("Вывод команды: <%1>", ВыводКоманды);

	Если Не ПустаяСтрока(ВыводКоманды) Тогда
		
		ОшибкаОбработки = "ВнешняяОбработка.ОбновлениеРасширений.МодульОбъекта";
		Если СтрНайти(ВыводКоманды, ОшибкаОбработки) > 0 Тогда
			Описание = СтрШаблон("Ошибка выполнения обработки по причине <%1>", ВыводКоманды);
			// Лог.Информация(Описание)
			ВызватьИсключение Описание;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры