#Использовать v8runner
#Использовать logos
#Использовать types

Перем РабочийКонфигуратор;
Перем Лог;

Перем НаборРасширений;

Перем ПутьКОбработкеПередОбновлением; // Путь к файлу обработки перед обновлением 
Перем ПутьКОбработкеПослеОбновления; // Путь к файлу обработки после обновлением 
Перем ПутьКОбработкиОбновленияРасширения; // Путь к файлу обработки обновления расширений 

Процедура ПриСозданииОбъекта()
	

КонецПроцедуры

Функция ОписаниеРасширения(Знач Имя, 
						Знач ПутьКФайлуОбновления,
						Знач Удалить = Ложь,
						Знач БезопасныйРежим = Истина,
						Знач ЗащитаОтОпасныхДействий = Истина)
	
	ОписаниеРасширения = Новый Структура();
	ОписаниеРасширения.Вставить("Имя", Имя);
	ОписаниеРасширения.Вставить("ПутьКФайлуОбновления", ПутьКФайлуОбновления);
	ОписаниеРасширения.Вставить("Удалить", Удалить);
	ОписаниеРасширения.Вставить("БезопасныйРежим", БезопасныйРежим);
	ОписаниеРасширения.Вставить("ЗащитаОтОпасныхДействий", ЗащитаОтОпасныхДействий);
	
	Возврат ОписаниеРасширения;

КонецФункции

Процедура УстановитьУправлениеКонфигуратором(НовоеУправлениеКонфигуратором) Экспорт
	РабочийКонфигуратор = НовоеУправлениеКонфигуратором;
КонецПроцедуры

Процедура УстановитьНастройкиОбновления(НастройкиОбновления) Экспорт
	
	НаборРасширений = КопированиеТипа.Скопировать(НастройкиОбновления.НаборРасширений);

	НастройкиОбновления.Свойство("ПутьКОбработкеПередОбновлением", ПутьКОбработкеПередОбновлением);
	НастройкиОбновления.Свойство("ПутьКОбработкеПослеОбновления", ПутьКОбработкеПослеОбновления);
	НастройкиОбновления.Свойство("ПутьКОбработкиОбновленияРасширения", ПутьКОбработкиОбновленияРасширения);

КонецПроцедуры

Процедура Запустить() Экспорт
	
	ВыполнитьОбработкуПриСобытии("ПередОбновлением");
	
	Попытка
		ВыполнитьОбновление();
	Исключение
		
		ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка обновления расширений информационной базы: %1", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Лог.КритичнаяОшибка(ИнформацияОбОшибке);
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
	ВыполнитьОбработкуПриСобытии("ПослеОбновления");
	 
КонецПроцедуры

// TODO: Переделать на обновление через предприятие
Процедура ВыполнитьОбновление()
	
	Лог.Информация("Обновление расширений информационной базы");	

	ФайлДанныхДляОбработки = ВременныеФайлы.СоздатьФайл();
	ФайлОтчетаОбработки = ВременныеФайлы.СоздатьФайл();
	
	КлючЗапуска = СтрШаблон("%1|%2", ФайлДанныхДляОбработки, ФайлОтчетаОбработки);

	ВыполнитьОбработку(ПутьКОбработкиОбновленияРасширения, КлючЗапуска);
			
КонецПроцедуры

Функция НоваяИнформацияОбОшибке(Знач Сообщение,
	Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Если ЕстьЗаполненныеПараметры(Параметр1, Параметр2, Параметр3,
		Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9) Тогда
		
		Сообщение = СтрШаблон(Сообщение, Параметр1,
		Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Функция ЕстьЗаполненныеПараметры(Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Если НЕ Параметр1 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр2 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр3 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр4 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр5 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр6 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр7 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр8 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр9 = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВыполнитьОбработкуПриСобытии(ИмяСобытия)
	
	КлючЗапуска = "";

	Если ИмяСобытия = "ПередОбновлением" Тогда
		ПутьКФайлуОбработки = ПутьКОбработкеПередОбновлением;
	ИначеЕсли ИмяСобытия = "ПередОбновлением" Тогда
		ПутьКФайлуОбработки = ПутьКОбработкеПослеОбновления;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьКФайлуОбработки) Тогда
		
		Попытка
			
			ВыполнитьОбработку(ПутьКФайлуОбработки, КлючЗапуска);
			
		Исключение
			
			ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка выполнения события <%1> обновления. Описание ошибки: <%2>", ИмяСобытия, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ИнформацияОбОшибке;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработку(Знач ПутьКФайлуОбработки, Знач КлючЗапуска = "")
	
	ФайлОбработки = Новый Файл(ПутьКФайлуОбработки);
	
	Если НЕ ФайлОбработки.Существует() Тогда
		ВызватьИсключение НоваяИнформацияОбОшибке("Файл обработки <%1> не найден", ФайлОбработки.ПолноеИмя);
	КонецЕсли;
	
	ПараметрыЗапускаОбработки = СтрШаблон("/Execute ""%1""", ФайлОбработки.ПолноеИмя);
	РабочийКонфигуратор.ЗапуститьВРежимеПредприятия(КлючЗапуска, Ложь, ПараметрыЗапускаОбработки);
	
КонецПроцедуры