#Использовать v8runner
#Использовать logos
#Использовать types
#Использовать fs
#Использовать json
#Использовать "./internal"
#Использовать "./internal/timer"

Перем РабочийКонфигуратор;
Перем Лог;

Перем НаборРасширений;

Перем ОбработчикиПередОбновления; // Путь к файлу обработки перед обновлением 
Перем ОбработчикиПослеОбновления; // Путь к файлу обработки после обновлением 
Перем ПутьКОбработкиОбновленияРасширения; // Путь к файлу обработки обновления расширений 
Перем ОтключитьВсеРасширения;

Перем ЗагрузкаРасширенийВКонфигураторе;
Перем РежимУправляемогоПриложения;

Перем МассивСпособовВывода;
Перем ИдентификаторРабочегоПроцесса;

Процедура ПриСозданииОбъекта()
	
	Лог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB").Поля("Префикс", "сfe-updater");
	// Лог = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	// Лог.УстановитьУровень(УровниЛога.Отладка);
	ОтключитьВсеРасширения = Ложь;
	МассивСпособовВывода = Новый Массив();

	ОбработчикиПередОбновления = Новый Массив();
	ОбработчикиПослеОбновления = Новый Массив();

КонецПроцедуры

Процедура ДобавитьСпособВывода(Знач ПроцессорВывода) Экспорт
	МассивСпособовВывода.Добавить(ПроцессорВывода);
	Лог.ДобавитьСпособВывода(ПроцессорВывода);
КонецПроцедуры

Процедура УстановитьУправлениеКонфигуратором(НовоеУправлениеКонфигуратором) Экспорт
	РабочийКонфигуратор = НовоеУправлениеКонфигуратором;
КонецПроцедуры

Процедура УстановитьНастройкиОбновления(НастройкиОбновления) Экспорт
	
	НаборРасширений = КопированиеТипа.Скопировать(НастройкиОбновления.НаборРасширений);

	НастройкиОбновления.Свойство("ПутьКОбработкиОбновленияРасширения", ПутьКОбработкиОбновленияРасширения);
	НастройкиОбновления.Свойство("ОтключитьВсеРасширения", ОтключитьВсеРасширения);
	НастройкиОбновления.Свойство("ЗагрузкаРасширенийВКонфигураторе", ЗагрузкаРасширенийВКонфигураторе);
	НастройкиОбновления.Свойство("РежимУправляемогоПриложения", РежимУправляемогоПриложения);
		
	Если НастройкиОбновления.Свойство("ПослеОбновления") Тогда

		ЗаполнитьОбработчик("ПослеОбновления", НастройкиОбновления.ПослеОбновления)

	КонецЕсли;

	Если НастройкиОбновления.Свойство("ПередОбновлением") Тогда

		ЗаполнитьОбработчик("ПередОбновлением", НастройкиОбновления.ПередОбновлением)

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьРабочийПроцессВЛог(Знач ПИдентификаторРабочегоПроцесса) Экспорт

	Лог = Лог.Поля("РабочийПроцесс", ПИдентификаторРабочегоПроцесса);
	ИдентификаторРабочегоПроцесса = ПИдентификаторРабочегоПроцесса;

КонецПроцедуры

Процедура ПередатьРабочийПроцессВОбъект(Знач ОбъектПриемник)
	
	Если Не ИдентификаторРабочегоПроцесса = Неопределено Тогда
		ОбъектПриемник.ДобавитьРабочийПроцессВЛог(ИдентификаторРабочегоПроцесса);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОбработчик(ИмяСобытия, МассивОбработчиков)
	
	Если ИмяСобытия = "ПередОбновлением" Тогда
		Обработчики = ОбработчикиПередОбновления;
	ИначеЕсли ИмяСобытия = "ПослеОбновления" Тогда
		Обработчики = ОбработчикиПослеОбновления;
	Иначе
		Возврат;
	КонецЕсли;

	Для каждого Обработчик Из МассивОбработчиков Цикл
			
		ЗапускПредприятия = Новый ЗапускПредприятия;
		ПередатьРабочийПроцессВОбъект(ЗапускПредприятия);
		ЗапускПредприятия.УстановитьУправлениеКонфигуратором(РабочийКонфигуратор);
		Для каждого СпособВывода Из МассивСпособовВывода Цикл
			ЗапускПредприятия.ДобавитьСпособВывода(СпособВывода);
		КонецЦикла;

		ЗапускПредприятия.УстановитьНастройки(Обработчик);

		Обработчики.Добавить(ЗапускПредприятия);

	КонецЦикла;

КонецПроцедуры

Процедура Запустить() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПутьКОбработкиОбновленияРасширения) Тогда
		
		ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка обновления расширений не задана обработка обновления");
		Лог.КритичнаяОшибка(ИнформацияОбОшибке);
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецЕсли;

	ВыполнитьОбработчикПриСобытия("ПередОбновлением");
	
	Попытка
		ВыполнитьОбновление();
	Исключение
		
		// ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка обновления расширений информационной базы: %1", );
		// Лог.КритичнаяОшибка(ИнформацияОбОшибке);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	ВыполнитьОбработчикПриСобытия("ПослеОбновления");
	 
КонецПроцедуры

// TODO: Переделать на обновление через предприятие
Процедура ВыполнитьОбновление()
	
	Лог.Информация("Обновление расширений информационной базы");	
	Таймер = Новый ТаймерВыполнения();

	ЗагрузкаРасширенийВыполнена = Ложь;

	Если ЗагрузкаРасширенийВКонфигураторе Тогда
		ЗагрузкаРасширенийВыполнена = ЗагрузкаРасширенийВКонфигураторе();
	КонецЕсли;

	ФайлДанныхДляОбработки = ВременныеФайлы.СоздатьФайл();
	
	ДанныеДляОбработки = СформироватьДанныеДляОбработки(ЗагрузкаРасширенийВыполнена);

	Если ДанныеДляОбработки.НаборРасширений.Количество() = 0 Тогда
		Лог.Предупреждение("Отсутствуют расширения для обновления информационной базы");	
		Возврат;
	КонецЕсли;

	ПутьКФайлуЛога = ВременныеФайлы.СоздатьФайл();

	ДанныеДляОбработки.Вставить("ПутьКФайлуЛога", ПутьКФайлуЛога);

	ЗаписатьДанныеДляОбработки(ФайлДанныхДляОбработки, ДанныеДляОбработки);
	
	КлючЗапуска = СтрШаблон("""%1""", ФайлДанныхДляОбработки);

	ВыполнитьОбработку(ПутьКОбработкиОбновленияРасширения, КлючЗапуска);
	
	Лог.Отладка("Читаю текст лога обновления расширений");
	
	ОбработатьДанныеЛогаОбновленияРасширений(ПутьКФайлуЛога);

	Лог.Поля("ВремяВыполнения", Таймер.ВремяЗамера()).Информация("Обновлены расширения информационной базы");

КонецПроцедуры

Функция ЗагрузкаРасширенийВКонфигураторе()
	
	// TODO: Реализовать механизм загрузки расширений через конфигуратор
	Возврат Ложь;

КонецФункции

Процедура ОбработатьДанныеЛогаОбновленияРасширений(Знач ПутьКФайлу)
	
	ТекстФайла = ПрочитатьФайл(ПутьКФайлу);

	Лог.Отладка("Текст лога обновления расширений <%1>", ТекстФайла);
	
	СтруктурированныйЛог = ИзJson(ТекстФайла);

	Для каждого СтрокаЛога Из СтруктурированныйЛог Цикл
		
		СообщениеЛога = СтрокаЛога["Сообщение"];
		УровеньСообщения = СтрокаЛога["УровеньСообщения"];
		ДополнительныеДанные = СтрокаЛога["ДополнительныеДанные"];

		СкорректироватьПолеДатаВремя(ДополнительныеДанные);

		УстановитьДополнительныеДанныеСообщения(ДополнительныеДанные);

		Если УровеньСообщения = Неопределено Тогда
			УровеньСообщения = УровниЛога.Отладка;
		Иначе
			УровеньСообщения = Число(УровеньСообщения);
		КонецЕсли;

		Если УровеньСообщения = УровниЛога.Информация Тогда
			Лог.Информация(СообщениеЛога);
		ИначеЕсли УровеньСообщения = УровниЛога.Ошибка Тогда
			Лог.Ошибка(СообщениеЛога);
		ИначеЕсли УровеньСообщения = УровниЛога.Отладка Тогда
			Лог.Отладка(СообщениеЛога);
		ИначеЕсли УровеньСообщения = УровниЛога.КритичнаяОшибка Тогда
			Лог.КритичнаяОшибка(СообщениеЛога);
		ИначеЕсли УровеньСообщения = УровниЛога.Предупреждение Тогда
			Лог.Предупреждение(СообщениеЛога);
		Иначе
			Лог.Отладка(СообщениеЛога)
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СкорректироватьПолеДатаВремя(ДополнительныеДанные)
	
	Если ДополнительныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючПоля ="ДатаВремя";

	ЗначениеДатаВремя = ДополнительныеДанные[КлючПоля];
	
	Если ЗначениеДатаВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеДанные.Вставить(КлючПоля, XMLЗначение(Тип("Дата"), ЗначениеДатаВремя));

	Лог.Отладка("Преобразована дата <%1> в тип <%2>", ЗначениеДатаВремя, ТипЗнч(ДополнительныеДанные[КлючПоля]));

КонецПроцедуры

Процедура УстановитьДополнительныеДанныеСообщения(ДополнительныеДанныеСообщения)
	
	Для каждого ПроцессорВывода Из МассивСпособовВывода Цикл
		
		Если Не ТипЗнч(ПроцессорВывода) = Тип("ВыводЛогаВRabbitMQ") Тогда
			Продолжить;
		КонецЕсли;

		ПроцессорВывода.ДополнительныеДанныеСообщения = ДополнительныеДанныеСообщения;

	КонецЦикла;

КонецПроцедуры

Функция ПрочитатьФайл(Знач ПутьКФайлу)
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, "UTF-8");
	ТекстФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат ТекстФайла;

КонецФункции

Функция СформироватьДанныеДляОбработки(ЗагрузкаРасширенийВыполнена)
	
	ДанныеДляОбработки = Новый Структура();
	ДанныеДляОбработки.Вставить("ОтключитьВсеРасширения", ОтключитьВсеРасширения);
	ДанныеДляОбработки.Вставить("ЗагрузкаОбновленийРасширений", Не ЗагрузкаРасширенийВыполнена);
	ДанныеДляОбработки.Вставить("УровеньСообщений", Лог.Уровень());

	НаборРасширенийЗаписи = Новый Массив();

	Для каждого Расширение Из НаборРасширений Цикл
		
		Если НЕ ПустаяСтрока(Расширение.ПутьКФайлуОбновления)
			И НЕ ФС.ФайлСуществует(Расширение.ПутьКФайлуОбновления) Тогда
			Лог.КритичнаяОшибка("Не найден файл обновления <%1> для расширения <%2>. Пропущено", Расширение.ПутьКФайлуОбновления, Расширение.Имя);
			Продолжить;
		КонецЕсли;
		
		НовоеРасширение = КопированиеТипа.Скопировать(Расширение);
		НаборРасширенийЗаписи.Добавить(НовоеРасширение);

	КонецЦикла;

	ДанныеДляОбработки.Вставить("НаборРасширений", НаборРасширенийЗаписи);

	Возврат ДанныеДляОбработки;

КонецФункции

Процедура ЗаписатьДанныеДляОбработки(Знач ПутьКФайлу, ДанныеДляОбработки)

	ТекстJSON = ВJson(ДанныеДляОбработки);

	Лог.Отладка("Текст файла для обработки обновления: <%1>", ТекстJSON);

	ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлу);
	ЗаписьТекста.Записать(ТекстJSON);
	ЗаписьТекста.Закрыть();

КонецПроцедуры

Функция ВJson(Знач ДанныеСериализации)
	
	ПарсерJSON = Новый ПарсерJSON;
	Возврат ПарсерJSON.ЗаписатьJSON(ДанныеСериализации);

КонецФункции

Функция ИзJson(ТекстJSON)
	
	Парсер = Новый ПарсерJSON;
	Результат = Парсер.ПрочитатьJSON(ТекстJSON);

	Возврат Результат;

КонецФункции

Функция НоваяИнформацияОбОшибке(Знач Сообщение,
	Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Если ЕстьЗаполненныеПараметры(Параметр1, Параметр2, Параметр3,
		Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9) Тогда
		
		Сообщение = СтрШаблон(Сообщение, Параметр1,
		Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Функция ЕстьЗаполненныеПараметры(Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Если НЕ Параметр1 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр2 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр3 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр4 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр5 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр6 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр7 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр8 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр9 = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВыполнитьОбработчикПриСобытия(Знач ИмяСобытия)

	Если ИмяСобытия = "ПередОбновлением" Тогда
		Обработчики = ОбработчикиПередОбновления;
	ИначеЕсли ИмяСобытия = "ПослеОбновления" Тогда
		Обработчики = ОбработчикиПослеОбновления;
	Иначе
		Возврат;
	КонецЕсли;

	Для ИндексОбработчика = 0 По Обработчики.ВГраница() Цикл
		
		Лог.Информация("Выполнение события <%1> [%2]", ИмяСобытия, ИндексОбработчика);	

		Попытка
			
			ЗапускПредприятия = Обработчики[ИндексОбработчика];
			ЗапускПредприятия.Запустить();

		Исключение

			ИнформацияОбОшибке = НоваяИнформацияОбОшибке("Ошибка выполнения события <%1> [%2] обновления. Описание ошибки: <%3>", ИмяСобытия, ИндексОбработчика, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ИнформацияОбОшибке;

		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьОбработку(Знач ПутьКФайлуОбработки, Знач КлючЗапуска = "")
	
	ФайлОбработки = Новый Файл(ПутьКФайлуОбработки);
	
	Если НЕ ФайлОбработки.Существует() Тогда
		ВызватьИсключение НоваяИнформацияОбОшибке("Файл обработки <%1> не найден", ФайлОбработки.ПолноеИмя);
	КонецЕсли;
	
	Лог.Отладка("Выполняю обработку <%1> ключ запуска <%2>", ФайлОбработки.ПолноеИмя, КлючЗапуска);
	ПараметрыЗапускаОбработки = СтрШаблон("/Execute ""%1""", ФайлОбработки.ПолноеИмя);
	РабочийКонфигуратор.ЗапуститьВРежимеПредприятия(КлючЗапуска, РежимУправляемогоПриложения, ПараметрыЗапускаОбработки);

	ВыводКоманды = РабочийКонфигуратор.ВыводКоманды();
	Лог.Отладка("Вывод команды: <%1>", ВыводКоманды);

	Если Не ПустаяСтрока(ВыводКоманды) Тогда
		
		ОшибкаОбработки = "ВнешняяОбработка.ОбновлениеРасширений.МодульОбъекта";
		Если СтрНайти(ВыводКоманды, ОшибкаОбработки) > 0 Тогда
			Описание = СтрШаблон("Ошибка выполнения обработки по причине <%1>", ВыводКоманды);
			// Лог.Информация(Описание)
			ВызватьИсключение Описание;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры