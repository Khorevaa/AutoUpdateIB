#Использовать logos
#Использовать json

Перем Лог;

Перем Заголовки;

Перем ДопустимыйКодСостояния;

Перем АдресСервера;
Перем ПортСервера;
Перем АдресСервераAPI;
Перем ПутьНаСервере;

Перем Пользователь;
Перем Пароль;

Перем Соединение;
Перем ПодключениеИнициализировано;

Перем НастройкаПрокси;

#Область Настройка_класса

Процедура ПриСозданииОбъекта(ЗначениеАдресСервера, ЗначениеПортСервера = Неопределено, ЗначениеПутьНаСервере = "")

	АдресСервера = ЗначениеАдресСервера;
	Если ЗначениеЗаполнено(ЗначениеПортСервера) Тогда
		ПортСервера = ЗначениеПортСервера;
	КонецЕсли;

	ДопустимыйКодСостояния = 200;

	Если ЗначениеЗаполнено(ЗначениеПутьНаСервере) Тогда
		ПутьНаСервере = ЗначениеПутьНаСервере;
	КонецЕсли;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", "Awesome-Octocat-App");

	ТокенИзОкружения = ПолучитьПеременнуюСреды("ARTIFACTORY_TOKEN");

	Если ЗначениеЗаполнено(ТокенИзОкружения) Тогда
		УстановитьТокенАвторизации(ТокенИзОкружения);
	КонецЕсли;

	ПодключениеИнициализировано = Ложь;

	Лог = Логирование.ПолучитьЛог("oscript.lib.artifactory-api");

КонецПроцедуры

Процедура УстановитьТокенАвторизации(Знач Токен) Экспорт

	Заголовки.Вставить("Authorization", "token " + Токен);

КонецПроцедуры

Процедура УстановитьПрокси(Знач НоваяНастройкаПрокси) Экспорт

	НастройкаПрокси = НоваяНастройкаПрокси;

	ПодключениеИнициализировано = Ложь;

КонецПроцедуры

Процедура УстановитьДопустимыйКодСостояния(Знач НовыйДопустимыйКодСостояния) Экспорт
	ДопустимыйКодСостояния = НовыйДопустимыйКодСостояния;
КонецПроцедуры

Процедура Авторизацию(НовыйПользователь, НовыйПароль = "") Экспорт

	Пользователь = НовыйПользователь;
	Пароль = НовыйПароль;

	ПодключениеИнициализировано = ложь;

КонецПроцедуры

Процедура СоздатьСоединение()

	Если НастройкаПрокси = Неопределено Тогда
		Соединение = Новый HTTPСоединение(АдресСервера, ПортСервера, Пользователь, Пароль);
	Иначе
		Соединение = Новый HTTPСоединение(АдресСервера, ПортСервера, Пользователь, Пароль, НастройкаПрокси);
	КонецЕсли;

КонецПроцедуры

Процедура ИнициализироватьСоединение()

	Если ПодключениеИнициализировано Тогда
		Возврат;
	КонецЕсли;

	СоздатьСоединение();

	ПодключениеИнициализировано = Истина;

КонецПроцедуры

Функция ПодстрокаAPIХранилища()
	Возврат "api/storage/";
КонецФункции

#КонецОбласти

#Область Работа_с_артифактори

Функция ПолучитьОписаниеФайла(Знач АдресРесурса) Экспорт

	Лог.Отладка("Получение описания файла для <%1>", АдресРесурса);
	HTTPЗапрос = ПолучитьHTTPЗапрос(ПодстрокаAPIХранилища() + АдресРесурса);
	
	Возврат Получить(HTTPЗапрос, "200");
	
КонецФункции 

Процедура ОтправитьФайл(Знач АдресРесурса, Знач ПутьКФайлу) Экспорт

	Лог.Отладка("Отправка файла <%1> на адрес <%2>", ПутьКФайлу, АдресРесурса);

	HTTPЗапрос = ПолучитьHTTPЗапрос(АдресРесурса);
	HTTPЗапрос.УстановитьИмяФайлаТела(ПутьКФайлу);

	ИнициализироватьСоединение();

	HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);

	ПроверитьКодВозврата(HTTPОтвет, "200 201");
	
КонецПроцедуры

Процедура ПолучитьФайл(Знач АдресРесурса, Знач ПутьКФайлу) Экспорт

	Лог.Отладка("Получение файла из адреса <%1> в файл <%2>", АдресРесурса, ПутьКФайлу);

	HTTPЗапрос = ПолучитьHTTPЗапрос(АдресРесурса);
	// HTTPЗапрос.УстановитьИмяФайлаТела(ПутьКФайлу);
	ИнициализироватьСоединение();

	HTTPОтвет = Соединение.Получить(HTTPЗапрос, ПутьКФайлу);

	ПроверитьКодВозврата(HTTPОтвет, "200");
	
КонецПроцедуры

#КонецОбласти

#Область Функции_HTTP

Процедура ПроверитьКодВозврата(Ответ, СтрокаДопустимыеКодСостояния = "200")
	
	Если НЕ ЗначениеЗаполнено(СтрокаДопустимыеКодСостояния) Тогда
		СтрокаДопустимыеКодСостояния = Строка(ДопустимыйКодСостояния);
	КонецЕсли;

	МассивДопустимыхКодовСостояния = СтрРазделить(СтрокаДопустимыеКодСостояния, " ");
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	Если ТелоОтвета = Неопределено Тогда
		ТелоОтвета = "";
	КонецЕсли;

	ДопустимыйКодСостояния = МассивДопустимыхКодовСостояния.Найти(Строка(Ответ.КодСостояния));

	Если ДопустимыйКодСостояния = Неопределено Тогда
		ТекстСообщения = СтрШаблон(
			"Получен код возврата: %1
			|Тело ответа: %2",
			Ответ.КодСостояния,
			ТелоОтвета
		);
		ИнфИсключение = Новый ИнформацияОбОшибке(ТекстСообщения, Ответ);
		ВызватьИсключение ИнфИсключение;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьHTTPЗапрос(Знач АдресРесурса, ДанныеДляОтправки = Неопределено) Экспорт

	HTTPЗапрос = НовыйHTTPЗапрос(АдресРесурса);

	Если ЗначениеЗаполнено(ДанныеДляОтправки)
		И (ТипЗнч(ДанныеДляОтправки) = Тип("Структура")
			ИЛИ ТипЗнч(ДанныеДляОтправки) = Тип("Соответствие") )
			Тогда
			ТелоЗапроса = ВJson(ДанныеДляОтправки);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8NoBom);
	КонецЕсли;

	Возврат HTTPЗапрос;

КонецФункции

Функция НовыйHTTPЗапрос(Знач Ресурс)

	Если ЗначениеЗаполнено(ПутьНаСервере) 
		И Не ПустаяСтрока(ПутьНаСервере) Тогда
		Ресурс = СтрШаблон("%1/%2", ПутьНаСервере, Ресурс);
	КонецЕсли;

	Возврат Новый HTTPЗапрос(Ресурс, Заголовки);

КонецФункции

Функция Отправить(HTTPЗапрос, ДопустимыеКодСостояния = Неопределено)

	ИнициализироватьСоединение();
	HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);

	ПроверитьКодВозврата(HTTPОтвет, ДопустимыеКодСостояния);

	Ответ = ПрочитатьОтветЗапроса(HTTPОтвет);

	Возврат Ответ;

КонецФункции

Функция Изменить(HTTPЗапрос, ДопустимыеКодСостояния = Неопределено)

	ИнициализироватьСоединение();
	HTTPОтвет = Соединение.Изменить(HTTPЗапрос);
	ПроверитьКодВозврата(HTTPОтвет, ДопустимыеКодСостояния);

	Ответ = ПрочитатьОтветЗапроса(HTTPОтвет);

	Возврат Ответ;

КонецФункции

Функция Получить(HTTPЗапрос, ДопустимыеКодСостояния = Неопределено)

	ИнициализироватьСоединение();
	HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	
	ПроверитьКодВозврата(HTTPОтвет, ДопустимыеКодСостояния);
	Ответ = ПрочитатьОтветЗапроса(HTTPОтвет);

	Возврат Ответ;

КонецФункции

Функция Удалить(HTTPЗапрос, ДопустимыеКодСостояния = Неопределено)

	ИнициализироватьСоединение();
	HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
	ПроверитьКодВозврата(HTTPОтвет, ДопустимыеКодСостояния);
	Ответ = ПрочитатьОтветЗапроса(HTTPОтвет);

	Возврат Ответ;

КонецФункции

#КонецОбласти

Функция ВJson(Знач СтруктураЗапроса)

	ПарсерJSON = Новый ПарсерJSON;
	Возврат ПарсерJSON.ЗаписатьJSON(СтруктураЗапроса);

КонецФункции

Функция ИЗJson(ТелоОтвета)

	Парсер = Новый ПарсерJSON;
	Результат = Парсер.ПрочитатьJSON(ТелоОтвета);

	Возврат Результат;

КонецФункции

Функция ПрочитатьОтветЗапроса(Знач Ответ)

	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	Если ТелоОтвета = Неопределено Тогда
		ТелоОтвета = "";
	КонецЕсли;

	Лог.Отладка("Код состояния: %1", Ответ.КодСостояния);
	Лог.Отладка("Тело ответа:
		|%1", ТелоОтвета);
	
	Результат = Новый Соответствие;
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		Результат = ИЗJson(ТелоОтвета);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.lib.github.api.client");
// Лог.УстановитьУровень(УровниЛога.Отладка);
