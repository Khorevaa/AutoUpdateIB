#Использовать logos

Перем Лог;

Перем МаксимальноеКоличествоАгентов;
Перем КомандаПроцессаАгента;
Перем ПутьКФайлуСкрипта;
Перем ПараметрыАгента;
Перем ТаймерПовторенияОпроса;
Перем ТаймаутПроцессаАгента;
Перем ПараллельныеПроцессы;
Перем СчетчикПроцессов;
Перем РабочийКаталогПроцессов;

Перем ОчередьRMQ;

Процедура УстановитьКоличествоАгентов(Знач НовоеМаксимальноеКоличествоАгентов) Экспорт
	Если НовоеМаксимальноеКоличествоАгентов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МаксимальноеКоличествоАгентов = НовоеМаксимальноеКоличествоАгентов;

КонецПроцедуры

Процедура УстановитьПараметрыАгента(Знач НовыеПараметрыАгента) Экспорт
	ПараметрыАгента = НовыеПараметрыАгента;
КонецПроцедуры

Процедура УстановитьТаймерОпроса(Знач НовыйТаймерПовторенияОпроса) Экспорт
	ТаймерПовторенияОпроса = НовыйТаймерПовторенияОпроса;
КонецПроцедуры

Процедура УстановитьТаймаутПроцессаАгента(Знач НовыйТаймаутПроцессаАгента) Экспорт
	ТаймаутПроцессаАгента = НовыйТаймаутПроцессаАгента;
КонецПроцедуры

Процедура УстановитьРабочийКаталогПроцессов(Знач ПутьККаталогу) Экспорт
	РабочийКаталогПроцессов = ПутьККаталогу;
КонецПроцедуры

// Устанавливает таймер повторения пакетной синхронизации
//
// Параметры:
//   НовыйПровайдерОчереди - Класс - таймер повторной синхронизации, сек
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Процедура НастроитьRMQ(Знач НовыеНастройкиПровайдера) Экспорт
	
	ОчередьRMQ = Новый ОчередьОбновленияRMQ();
	ОчередьRMQ.Инициализировать(НовыеНастройкиПровайдера);

КонецПроцедуры

// Выполняет пакетную синхронизацию
//
Процедура Запустить() Экспорт
	
	ПроверитьВозможностьЗапуска();

	Пока Истина Цикл

		ОчиститьЗавешенныеПроцессы();

		ОпроситьПроцессыПоТаймауту();

		ЗапуститьАгентовПриНеобходимости();

		Если ТаймерПовторенияОпроса <= 0 Тогда

			Прервать;

		Иначе
			
			Приостановить(ТаймерПовторенияОпроса * 1000);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПреобразоватьВПараметрыЗапуска(Параметры)

	ПараметрыЗапуска = Новый Массив;

	НастройкаRMQ = Параметры.НастройкаRMQ;

	ДобавитьПараметрВМассив(ПараметрыЗапуска, "--ru", НастройкаRMQ.Пользователь);
	ДобавитьПараметрВМассив(ПараметрыЗапуска, "--rp", НастройкаRMQ.Пароль);
	ДобавитьПараметрВМассив(ПараметрыЗапуска, "--rq", НастройкаRMQ.ИмяОчереди);
	ДобавитьПараметрВМассив(ПараметрыЗапуска, "--re", НастройкаRMQ.ТочкаОбмена);
	ДобавитьПараметрВМассив(ПараметрыЗапуска, "--rv", НастройкаRMQ.ВиртуальныйХост);

	Возврат ПараметрыЗапуска;

КонецФункции


Процедура ДобавитьПараметрВМассив(МассивПараметров, КлючПараметра, ЗначениеПараметра)
	
	Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		Возврат;
	КонецЕсли;

	МассивПараметров.Добавить(КлючПараметра);
	МассивПараметров.Добавить(ЗначениеПараметра);

КонецПроцедуры


Процедура ПроверитьВозможностьЗапуска()
	
	Если ОчередьRMQ = Неопределено Тогда
		ВызватьИсключение "Не настроена очередь RabbitMQ";
	КонецЕсли;

КонецПроцедуры

Процедура ЗапуститьАгентовПриНеобходимости()

	КоличествоСообщенийВОчереди = ОчередьRMQ.КоличествоСообщенийВОчереди();

	Лог.Информация("Сервер очереди: количество сообщений в очереди <%1>", КоличествоСообщенийВОчереди);
	Если КоличествоСообщенийВОчереди = 0 Тогда
		Лог.Информация("Ожидаю следующего опроса через <%1> секунд", ТаймерПовторенияОпроса);
		Возврат;
	КонецЕсли;

	ФайлИсточника = Новый Файл(ПутьКФайлуСкрипта);

	Если ФайлИсточника.Расширение = ".os" Тогда
		КомандаПроцессаАгента = "oscript";
	Иначе
		КомандаПроцессаАгента = ПутьКФайлуСкрипта;
	КонецЕсли;

	КоличествоПроцессов = Мин(МаксимальноеКоличествоАгентов, КоличествоСообщенийВОчереди);

	ЗапуститьПаралельно(КоличествоПроцессов);

КонецПроцедуры

Процедура ОпроситьПроцессыПоТаймауту()

	ИзмененияЛогов = ПолучитьДатыИзмененияЛогов();

	Для каждого КлючЗначение Из ИзмененияЛогов Цикл
		
		ИдентификаторАгента = КлючЗначение.Ключ;
		ДатаИзменения = КлючЗначение.Значение;

		Если ДатаИзменения + ТаймаутПроцессаАгента < ТекущаяДата() Тогда
			ЗавершитьПроцессаАгента(ИдентификаторАгента);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗавершитьПроцессаАгента(ПроцессАгента)

	Если Не ПроцессАгента.Завершен Тогда
		ПроцессАгента.Завершить();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДатыИзмененияЛогов()
	
	ИзмененияЛогов = Новый Соответствие;

	Для каждого ПроцессКоманды Из ПараллельныеПроцессы Цикл
		
		ИдентификаторАгента = ПроцессКоманды.Ключ;
		ДатаИзмененияЛогаПроцесса = ПолучитьДатуИзмененияЛогаПоКлючу(ИдентификаторАгента);

		ИзмененияЛогов.Вставить(ИдентификаторАгента, ДатаИзмененияЛогаПроцесса);

	КонецЦикла;

	Возврат ИзмененияЛогов;

КонецФункции

Функция ПолучитьДатуИзмененияЛогаПоКлючу(КлючПроцессаАгента)
	
	Возврат ПолучитьДатуИзмененияФайла(КлючПроцессаАгента);

КонецФункции

Функция ПолучитьДатуИзмененияФайла(ИмяФайла)
	
	//TODO: Сделать проверку через файл

	Возврат ТекущаяДата();

КонецФункции

Процедура ЗапуститьПаралельно(КоличествоПроцессов = 0)

	ОчиститьЗавешенныеПроцессы();

	КоличествоРаботающихПроцессов = ПараллельныеПроцессы.Количество();

	Если КоличествоРаботающихПроцессов >= КоличествоПроцессов Тогда
		Возврат;
	КонецЕсли;
	
	Лог.Информация("Запуск рабочих <%1> процессов", КоличествоПроцессов - КоличествоРаботающихПроцессов);

	Для Счетчик = 1 По КоличествоПроцессов - КоличествоРаботающихПроцессов Цикл
		СчетчикПроцессов = СчетчикПроцессов + 1;

		ИдентификаторАгента = СтрШаблон("worker_%1_%2", СчетчикПроцессов, Формат(ТекущаяДата(), "ДФ=yyyy_MM_dd_HH_mm_ss"));
		Лог.Информация("Запускаю процесс <%1>", ИдентификаторАгента);
		
		Команда = Новый ПараллельнаяКоманда;
		Команда.УстановитьКоманду(КомандаПроцессаАгента);
		Если КомандаПроцессаАгента = "oscript" Тогда
			Команда.ДобавитьПараметр(ПутьКФайлуСкрипта);
		КонецЕсли;
		
		Команда.ДобавитьПараметр("agent");
		Команда.ДобавитьПараметр("--worker");

		Команда.ДобавитьПараметры(ПреобразоватьВПараметрыЗапуска(ПараметрыАгента));
		Команда.ДобавитьПараметр(ПараметрыАгента.НастройкаRMQ.Сервер);
		Команда.ДобавитьПараметр(ИдентификаторАгента);

		ПроцессКоманды = Команда.ЗапуститьПроцесс();
		
		ПараллельныеПроцессы.Вставить(ИдентификаторАгента, ПроцессКоманды);

		Приостановить(1000);

	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьЗавешенныеПроцессы()

	Если ПараллельныеПроцессы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивОчистки = Новый Массив;

	Для каждого ПроцессКоманды Из ПараллельныеПроцессы Цикл
		
		Если ПроцессКоманды.Значение.Завершен Тогда
			МассивОчистки.Добавить(ПроцессКоманды.Ключ);
		КонецЕсли;

	КонецЦикла;

	Для каждого ОчищаемыйПроцесс Из МассивОчистки Цикл
		ПараллельныеПроцессы.Удалить(ОчищаемыйПроцесс);
	КонецЦикла;

	Если ПараллельныеПроцессы.Количество() = 0 Тогда
		СчетчикПроцессов = 0; 
	КонецЕсли;

	Лог.Отладка("Очищено <%1> завершенных процессов", МассивОчистки.Количество());

КонецПроцедуры

Функция ИмяЛога() Экспорт
	
	Возврат "oscript.app.AutoUpdate1C.agent.manager";

КонецФункции

Функция ИмяФайлаЛога() Экспорт

	Возврат ОбъединитьПути(РабочийКаталогПроцессов,"manager.log");
	
КонецФункции

Процедура ПриСозданииОбъекта()
	
	СИ = Новый СистемнаяИнформация;
	
	МаксимальноеКоличествоАгентов = СИ.КоличествоПроцессоров - 1;

	ТаймерПовторенияОпроса = 3600;
	ТаймаутПроцессаАгента = 60 * 60 * 6; // 6 Часов

	ПараллельныеПроцессы = Новый Соответствие;
	
	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	Лог.УстановитьРаскладку(ЭтотОбъект);
	
	НастроитьЛогирование();

	ПутьКФайлуСкрипта = СтартовыйСценарий().Источник;
	СчетчикПроцессов = 0;

КонецПроцедуры

Процедура НастроитьЛогирование()
	
	ФайлЖурнала = Новый ВыводЛогаВФайл;
	ФайлЖурнала.ОткрытьФайл(ИмяФайлаЛога());
	Лог.ДобавитьСпособВывода(ФайлЖурнала);
	ДобавитьВыводЛогаВКонсоль();

КонецПроцедуры

Процедура ДобавитьВыводЛогаВКонсоль()
	
	ВыводВКонсоль = Новый ВыводЛогаВКонсоль();
	Лог.ДобавитьСпособВывода(ВыводВКонсоль);

КонецПроцедуры

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт
	
	Возврат СтрШаблон("[manager] %1 - %2", УровниЛога.НаименованиеУровня(Уровень), Сообщение);
	
КонецФункции
