#Использовать logos
#Использовать json

Перем Соединение;
Перем Лог;
Перем ИмяОчереди;
Перем ВиртуальныйХост;
Перем ИнициализацияВыполнена;
Перем Заголовки;
Перем ДопустимыйКодСостояния;
Перем АдресПолученияСообщений;
Перем АдресОтправкиСообщений;
Перем АдресОчередиСообщений;

Функция ПолучитьИзОчереди() Экспорт

	ДанныеОчереди = ЗапроситьДанныеИзОчереди();

	Если ДанныеОчереди.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПервыйЭлемент = ДанныеОчереди[0];

	ОчередьОтправкиЛогов = ПервыйЭлемент["properties"]["reply_to"];
	КлючСообщения = ПервыйЭлемент["properties"]["message_id"];
	
	Лог.Отладка("Данные: %1", ПервыйЭлемент["payload"]);

	ДанныеОбновления = ИЗJson(ПервыйЭлемент["payload"]);
	ДанныеОбновления.Вставить("КлючМаршрутизации", ОчередьОтправкиЛогов);
	ДанныеОбновления.Вставить("КлючСообщения", КлючСообщения);
	
	ПоказатьНастройкиВРежимеОтладки(ДанныеОбновления);

	Возврат ДанныеОбновления;

КонецФункции

Процедура Инициализировать(НастройкиПодключения) Экспорт
	
	Если ИнициализацияВыполнена Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Сервер <%1>", НастройкиПодключения.Сервер);
	Лог.Отладка("Порт <%1>", НастройкиПодключения.Порт);
	Лог.Отладка("Пользователь <%1>", НастройкиПодключения.Пользователь);
	Лог.Отладка("Пароль <%1>", НастройкиПодключения.Пароль);

	Соединение = Новый HTTPСоединение(НастройкиПодключения.Сервер,
									НастройкиПодключения.Порт,
									НастройкиПодключения.Пользователь,
									НастройкиПодключения.Пароль);

	ВиртуальныйХост = НастройкиПодключения.ВиртуальныйХост;
	ИмяОчереди = НастройкиПодключения.ИмяОчереди;

	АдресОчередиСообщений = АдресApiОчередиСообщений();
	АдресПолученияСообщений = АдресApiПолученияСообщений();
	АдресОтправкиСообщений = АдресApiОтправкиСообщений();

	ИнициализацияВыполнена = Истина;

КонецПроцедуры

Процедура ОтправитьДанныеВОчередь(ДанныеОтправки, ПараметрыСообщения = Неопределено, КлючМаршрутизации = "") Экспорт

	Если ПараметрыСообщения = Неопределено Тогда
		ПараметрыСообщения = Новый Структура;
	КонецЕсли;

	// Новый Структура("message_id", ДанныеОтправки["КлючСообщения"])

	ТелоЗапроса = Новый Соответствие;
	ТелоЗапроса.Вставить("properties", ПараметрыСообщения);
	ТелоЗапроса.Вставить("routing_key", КлючМаршрутизации);
	ТелоЗапроса.Вставить("payload", ВJson(ДанныеОтправки));
	ТелоЗапроса.Вставить("payload_encoding", "string");

	Запрос = ПолучитьHTTPЗапрос(АдресОтправкиСообщений, ТелоЗапроса);

	ДанныеОтвета  = Отправить(Запрос);

	Если Не ДанныеОтвета["routed"] Тогда
		ВызватьИсключение СтрШаблон("Не удалось отправить данные в очередь <%1>", ТелоЗапроса["routing_key"]);
	КонецЕсли;

КонецПроцедуры

Функция КоличествоСообщенийВОчереди() Экспорт
	
	Запрос = ПолучитьHTTPЗапрос(АдресОчередиСообщений);
	Лог.Отладка("Адрес очереди сообщений <%1>", АдресОчередиСообщений);
	ДанныеОтвета = Получить(Запрос);

	КоличествоСообщений = ДанныеОтвета["messages_ready"];

	Если КоличествоСообщений = Неопределено Тогда
		КоличествоСообщений = 0;
	КонецЕсли;

	Возврат КоличествоСообщений;

КонецФункции

Функция ЗапроситьДанныеИзОчереди()

	ТелоЗапроса = Новый Соответствие;
	ТелоЗапроса.Вставить("count", 1);
	ТелоЗапроса.Вставить("ackmode", "reject_requeue_false"); // TODO: Заменить на folse иначе не очищается очередь
	ТелоЗапроса.Вставить("encoding", "auto");

	Запрос = ПолучитьHTTPЗапрос(АдресПолученияСообщений, ТелоЗапроса);

	ДанныеОтвета  = Отправить(Запрос);
	
	Возврат ДанныеОтвета;

КонецФункции

Функция АдресApiПолученияСообщений()
	Возврат СтрШаблон("%1/get", АдресApiОчередиСообщений());
КонецФункции

Функция АдресApiОтправкиСообщений()
	Возврат СтрШаблон("api/exchanges/%1/amq.default/publish", ВиртуальныйХост);
КонецФункции

Функция АдресApiОчередиСообщений()
	Возврат СтрШаблон("api/queues/%1/%2", ВиртуальныйХост, ИмяОчереди);
КонецФункции

Функция ПолучитьHTTPЗапрос(Знач АдресРесурса, ДанныеДляОтправки = Неопределено) Экспорт

	HTTPЗапрос = НовыйHTTPЗапрос(АдресРесурса);

	Если ЗначениеЗаполнено(ДанныеДляОтправки)
		И (ТипЗнч(ДанныеДляОтправки) = Тип("Структура")
			ИЛИ ТипЗнч(ДанныеДляОтправки) = Тип("Соответствие") )
			Тогда
			ТелоЗапроса = ВJson(ДанныеДляОтправки);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса,
			КодировкаТекста.UTF8NoBom);
	КонецЕсли;


	Возврат HTTPЗапрос;

КонецФункции

Функция НовыйHTTPЗапрос(Знач Ресурс) Экспорт

	Возврат Новый HTTPЗапрос(Ресурс, Заголовки);

КонецФункции

Функция Отправить(HTTPЗапрос) Экспорт

	HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Ответ = ПрочитатьОтветЗапроса(HTTPОтвет);

	Возврат Ответ;

КонецФункции

Функция Получить(HTTPЗапрос) Экспорт

	HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Ответ = ПрочитатьОтветЗапроса(HTTPОтвет);

	Возврат Ответ;

КонецФункции

Функция ВJson(Знач СтруктураЗапроса)
	
	ПарсерJSON = Новый ПарсерJSON;
	Возврат ПарсерJSON.ЗаписатьJSON(СтруктураЗапроса);

КонецФункции

Функция ИЗJson(ТелоОтвета)
	
	Парсер = Новый ПарсерJSON;
	Результат = Парсер.ПрочитатьJSON(ТелоОтвета);

	Возврат Результат;

КонецФункции

Функция ПрочитатьОтветЗапроса(Знач Ответ)
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8NoBom);
	Если ТелоОтвета = Неопределено Тогда
		ТелоОтвета = "";
	КонецЕсли;

	Лог.Отладка("Код состояния: %1", Ответ.КодСостояния);
	Лог.Отладка("Тело ответа: 
		|%1", ТелоОтвета);
	
	Если Ответ.КодСостояния <> ДопустимыйКодСостояния Тогда
		ТекстСообщения = СтрШаблон(
			"Получен код возврата: %1
			|Тело ответа: %2", 
			Ответ.КодСостояния,
			ТелоОтвета
		);
		ИнфИсключение = Новый ИнформацияОбОшибке(ТекстСообщения, Ответ);
		ВызватьИсключение ИнфИсключение;
	КонецЕсли;

	Результат = Новый Соответствие;
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		Результат = ИЗJson(ТелоОтвета);
	КонецЕсли;

	Возврат Результат;

КонецФункции


Процедура ПоказатьНастройкиВРежимеОтладки(ЗначенияПараметров, Знач Родитель = "") Экспорт
	
	Если Не Лог.Уровень() = УровниЛога.Отладка Тогда
		Возврат;
	КонецЕсли;

	Если Родитель = "" Тогда
		Лог.Отладка("	Тип параметров %1", ТипЗнч(ЗначенияПараметров));
	КонецЕсли;

	Если ТипЗнч(ЗначенияПараметров) = Тип("Массив") Тогда

		Для ИИ = 0 По ЗначенияПараметров.ВГраница() Цикл
			ПоказатьНастройкиВРежимеОтладки(ЗначенияПараметров[ИИ], СтрШаблон("%1.%2", Родитель, ИИ));
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(ЗначенияПараметров) = Тип("Структура")
		ИЛИ ТипЗнч(ЗначенияПараметров) = Тип("Соответствие") Тогда

		Если ЗначенияПараметров.Количество() = 0 Тогда
			Лог.Отладка("	Коллекция параметров пуста!");
		КонецЕсли;

		Для каждого Элемент Из ЗначенияПараметров Цикл
	
			Если Не ПустаяСтрока(Родитель) Тогда
				ПредставлениеКлюча  = СтрШаблон("%1.%2", Родитель, Элемент.Ключ);
			Иначе
				ПредставлениеКлюча = Элемент.Ключ;
			КонецЕсли;
		
			// Если ТипЗнч(Элемент.Значение) = Тип("КонструкторПараметров") Тогда
		
			// 	ПоказатьНастройкиВРежимеОтладки(Элемент.Значение.ВСтруктуру(), ПредставлениеКлюча);
		
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") 
				ИЛИ ТипЗнч(Элемент.Значение) = Тип("Соответствие")  Тогда
		
				ПоказатьНастройкиВРежимеОтладки(Элемент.Значение, ПредставлениеКлюча);	
			
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				
				Лог.Отладка("	параметр <%1> = Массив.<%2>", ПредставлениеКлюча, Элемент.Значение.Количество());
				
				ПоказатьНастройкиВРежимеОтладки(Элемент.Значение, ПредставлениеКлюча);	
			
			Иначе
				Лог.Отладка("	параметр <%1> = <%2>", ПредставлениеКлюча, Элемент.Значение);
		
			КонецЕсли;
			
		КонецЦикла;

	// ИначеЕсли ТипЗнч(ЗначенияПараметров) = Тип("КонструкторПараметров") Тогда
		
	// 	ПоказатьНастройкиВРежимеОтладки(ЗначенияПараметров.ВСтруктуру(), Родитель);


	Иначе
		
		Лог.Отладка("	параметр <%1> = <%2>", Родитель, ЗначенияПараметров);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриСозданииОбъекта()
	
	Лог = Логирование.ПолучитьЛог("oscript.lib.AutoUpdateIB.rmq");
	// Лог.УстановитьУровень(УровниЛога.Отладка);
	ИнициализацияВыполнена = Ложь;

	Заголовки = Новый Соответствие;

	ДопустимыйКодСостояния = 200;

КонецПроцедуры

