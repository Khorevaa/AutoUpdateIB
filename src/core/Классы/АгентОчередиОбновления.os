Перем ТаймерПовторения;
Перем ЧитательОчереди;
Перем ИдентификаторАгента;
Перем ВыводитьЛогВКонсоль;
Перем ФайлЖурнала;
Перем КаталогЛогов;

Перем Лог;

// Устанавливает таймер повторения пакетной синхронизации
//
// Параметры:
//   НовыйТаймерПовторения - Число - таймер повторной синхронизации, сек
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция ТаймерПовторения(Знач НовыйТаймерПовторения) Экспорт
	ТаймерПовторения = НовыйТаймерПовторения;
	Возврат ЭтотОбъект;
КонецФункции

Функция КаталогЛогов(Знач НовыйКаталогЛогов) Экспорт
	КаталогЛогов = НовыйКаталогЛогов;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает таймер повторения пакетной синхронизации
//
// Параметры:
//   НовыйПровайдерОчереди - Класс - таймер повторной синхронизации, сек
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция ПровайдерОчереди(Знач НовыйПровайдерОчереди, Знач НовыеНастройкиПровайдера) Экспорт
	
	ЧитательОчереди.УстановитьПровайдер(НовыйПровайдерОчереди, НовыеНастройкиПровайдера);

	Возврат ЭтотОбъект;

КонецФункции

Функция Идентификатор() Экспорт

	Возврат ИдентификаторАгента;

КонецФункции

// Выполняет пакетную синхронизацию
//
Процедура Запустить() Экспорт
	
	Пока Истина Цикл

		НастроитьЛогирование();

		ВыполнитьПакетноеОбновления();

		Если ТаймерПовторения <= 0 Тогда

			Прервать;

		Иначе
			
			Лог.Информация("Ожидаем <%1> секунд перед новым циклом", ТаймерПовторения);
			Приостановить(ТаймерПовторения * 1000);

		КонецЕсли;

		ФайлЖурнала.Закрыть();

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьПакетноеОбновления()

	Пока ОчередьОбновления.Следующий() Цикл
			
		Результат = ВыполнитьОбновлениеПоНастройки(ОчередьОбновления.ТекущийЭлемент());
		ОчередьОбновления.ОтправитьРезультат(Результат);
	
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьОбновлениеПоНастройки(СоответствиеНастройки)

	НастройкиОбновления = ПрочитатьНастройкиОбновления(СоответствиеНастройки);
	ПроцессорОбновления = Новый МенеджерОбновления();
	Результат = ПроцессорОбновления.ОбновлениеПоНастройке(НастройкиОбновления);
	
КонецПроцедуры

Функция ПрочитатьНастройкиОбновления(СоответствиеНастройки)
	
	НастройкиОбновления = Новый НастройкаОбновления(Новый УникальныйИдентификатор);
	НастройкиОбновления.ИзСоответствия(НовыеНастройкиПровайдера)

	Возврат НастройкиОбновления;

КонецФункции

Функция ИмяЛога() Экспорт
	
	Возврат "oscript.app.AutoUpdate1C.agent";

КонецФункции

Функция ИмяФайлаЛога() Экспорт

	Возврат ОбъединитьПути(КаталогЛогов, ИдентификаторАгента, ".log");
	
КонецФункции

Процедура НастроитьЛогирование()
	
	ФайлЖурнала = Новый ВыводЛогаВФайл
	ФайлЖурнала.ОткрытьФайл(ИмяФайлаЛога());
	Лог.ДобавитьСпособВывода(ФайлЖурнала);
	ДобавитьВыводЛогаВКонсоль();

КонецПроцедуры

Функция ДобавитьВыводЛогаВКонсоль()
	
	Если ВыводитьЛогВКонсоль Тогда
	
		ВыводВКонсоль = Новый ВыводЛогаВКонсоль();
		Лог.ДобавитьСпособВывода(ВыводВКонсоль);
	
	КонецЕсли;

КонецФункции

Процедура ПриСозданииОбъекта()
	
	ИдентификаторАгента = Новый УникальныйИдентификатор;

	ЧитательОчереди = Новый ОчередьОбновления;
	ВыводитьЛогВКонсоль = Истина;
	
	Лог = Логирование.ПолучитьЛог(ИмяЛога());

КонецПроцедуры