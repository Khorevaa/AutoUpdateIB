#Использовать logos
#Использовать v8rac
#Использовать "./internal/timer"

Перем ВерсияПлатформы;

Перем УправлениеКластером;

Перем ПараметрыПодключения;
Перем ПараметрыБлокировкиСеансов;
Перем ПараметрыКластера;

Перем ИдентификаторИнформационнойбаза;

Перем ЭтоФайловаяБаза;

Перем Фильтр;
Перем ЧислоПопыток;
Перем СрокОжиданияЗавершенияСеансов;
Перем Лог;

Процедура УстановитьНастройки(Знач НастройкиОбновления) Экспорт

	ЭтоФайловаяБаза = НастройкиОбновления.ЭтоФайловаяБаза();
	ВерсияПлатформы = "8.3";//НастройкиОбновления.ВерсияПлатформы(); // Всегда ставим пока 8.3
	ПараметрыКластера = НастройкиОбновления.ПараметрыКластера;
	ПараметрыПодключения = НастройкиОбновления.ПараметрыПодключения;
	ПараметрыБлокировкиСеансов = НастройкиОбновления.ПараметрыБлокировкиСеансов;
	АвторизацияВИнформационнойБазе = НастройкиОбновления.АвторизацияВИнформационнойБазе();
	ЧислоПопыток = ПараметрыКластера.ЧислоПопыток;

КонецПроцедуры

Процедура ИнициироватьУправлениеКластером()

	Если Не УправлениеКластером = Неопределено Тогда
		Возврат;
	КонецЕсли;

	АдресСервера = ПараметрыКластера.Сервер;

	Если ПустаяСтрока(АдресСервера) Тогда
		АдресСервера = ПараметрыПодключения.СервернаяБаза.Сервер;
	КонецЕсли;

	ПортСервера = ПараметрыКластера.Порт;
	ПользовательКластера = ПараметрыКластера.Пользователь;
	ПарольКластера = ПараметрыКластера.Пароль;

	УправлениеКластером = Новый УправлениеКластером;
	УправлениеКластером.УстановитьКластер(АдресСервера, ПортСервера);
	УправлениеКластером.ИспользоватьВерсию(ВерсияПлатформы);
	Если ЗначениеЗаполнено(ПользовательКластера) Тогда
		УправлениеКластером.УстановитьАвторизациюКластера(ПользовательКластера, ПарольКластера);
	КонецЕсли;

	УправлениеКластером.Подключить();
	
	ИмяИнформационнойбазы = ПараметрыПодключения.СервернаяБаза.База;
	ИдентификаторИнформационнойбаза = УправлениеКластером.НайтиИнформационнуюБазу(ИмяИнформационнойбазы);

	Если ЗначениеЗаполнено(ПараметрыПодключения.Пользователь) Тогда
	
		УправлениеКластером.УстановитьАвторизациюИнформационнойБазы(ИдентификаторИнформационнойбаза, ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль);
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ИдентификаторИнформационнойбаза) Тогда
		ВызватьИсключение СтрШаблон("Не удалось найти информационную базы <%1> на кластере серверов 1С", ИмяИнформационнойбазы);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСпособВывода(ПроцессорВывода) Экспорт
	
	Лог.ДобавитьСпособВывода(ПроцессорВывода);

КонецПроцедуры

Процедура ДобавитьРабочийПроцессВЛог(Знач ИдентификаторРабочегоПроцесса) Экспорт

	Лог = Лог.Поля("РабочийПроцесс", ИдентификаторРабочегоПроцесса);
	
КонецПроцедуры

Процедура ПроверитьВозможностьЗаписиВКаталогБазы()
	// TODO: Сделать запись тестового файла в каталог базы
КонецПроцедуры

Процедура БлокировкаДоступа() Экспорт
	
	Если ЭтоФайловаяБаза Тогда
		БлокироватьДоступКФайловойБазе();
	Иначе
		БлокироватьДоступКСервернойБазе();
	КонецЕсли;
	
КонецПроцедуры

Процедура БлокироватьДоступКСервернойБазе()

	ИнициироватьУправлениеКластером();

	УстановитьБлокировкуИнформационнойБазы();
	
	Если ЕстьПодключенныеСеансы() Тогда
		ОжиданиеОтключенияСеансов();
		
		Если ЕстьПодключенныеСеансы() Тогда
			ПрерватьПодключения();		
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьБлокировкуИнформационнойБазы()
	
	ВремяСтартаБлокировки = ТекущаяДата();
	
	ПериодБлокировкиСеансов = ПараметрыБлокировкиСеансов.ПериодБлокировкиСеансов;

	ОкончаниеБлокировкиСеансов = ВремяСтартаБлокировки + ПериодБлокировкиСеансов*60; // Параметр в секундах

	СрокОжиданияЗавершенияСеансов = ВремяСтартаБлокировки + ПараметрыБлокировкиСеансов.ПериодОжиданияЗавершенияСеансов; // Еще ждем минуту
	
	Таймер = Новый ТаймерВыполнения;

	ДопПоля = Новый Структура();
	ДопПоля.Вставить("ИдентификаторИнформационнойбаза", ИдентификаторИнформационнойбаза);
	ДопПоля.Вставить("СообщениеБлокировкиСеансов", ПараметрыБлокировкиСеансов.СообщениеБлокировкиСеансов);
	ДопПоля.Вставить("КлючРазрешенияЗапуска", ПараметрыБлокировкиСеансов.КлючРазрешенияЗапуска);
	ДопПоля.Вставить("ВремяСтартаБлокировки", ВремяСтартаБлокировки);
	ДопПоля.Вставить("ОкончаниеБлокировкиСеансов", ОкончаниеБлокировкиСеансов);
	
	ТрассировкаЗадач = Новый ТрассировкаЗадач(Лог);
	ТрассировкаЗадач.Трассировать("Блокировка сеансов", "Устанавливаю блокировку сеансов и регламентных заданий",,, ДопПоля);
	
	Попытка
		УправлениеКластером.БлокировкаИнформационнойБазы(ИдентификаторИнформационнойбаза,
													ПараметрыБлокировкиСеансов.СообщениеБлокировкиСеансов,
													ПараметрыБлокировкиСеансов.КлючРазрешенияЗапуска,
													ВремяСтартаБлокировки,
													ОкончаниеБлокировкиСеансов,
													Истина);
	
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ТрассировкаЗадач.Трассировать("Блокировка сеансов", "Установлена блокировку сеансов и регламентных заданий", "error", Инфо, ДопПоля);
		ВызватьИсключение КраткоеПредставлениеОшибки(Инфо);

	КонецПопытки;
												
	ТрассировкаЗадач.Трассировать("Блокировка сеансов", "Установлена блокировку сеансов и регламентных заданий", "success",, ДопПоля);

КонецПроцедуры

Процедура СнятьБлокировкуИнформационнойБазы()
	
	ДопПоля = Новый Структура();
	ДопПоля.Вставить("ИдентификаторИнформационнойбаза", ИдентификаторИнформационнойбаза);
	ТрассировкаЗадач = Новый ТрассировкаЗадач(Лог);
	ТрассировкаЗадач.Трассировать("Снятие блокировки сеансов", "Снимаю блокировку сеансов и регламентных заданий",,, ДопПоля);
	Попытка

		Для Сч = 1 По ЧислоПопыток Цикл
			
			Попытка
				УправлениеКластером.СнятьБлокировкуИнформационнойБазы(ИдентификаторИнформационнойбаза);	
				Прервать;
			Исключение
	
				Если ЧислоПопыток = Сч Тогда
					ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Конецесли;
				
				Лог.Предупреждение("Попытка снятия блокировки сеансов не удалась. Попытка: %1", Сч + 1);
		
			КонецПопытки;
		
		КонецЦикла;
			
	Исключение
			
		Инфо = ИнформацияОбОшибке();
		ТрассировкаЗадач.Трассировать("Снятие блокировки сеансов", "Ошибка снятия блокировки сеансов и регламентных заданий", "error", Инфо, ДопПоля);
		ВызватьИсключение КраткоеПредставлениеОшибки(Инфо);

	КонецПопытки;
	
	ТрассировкаЗадач.Трассировать("Снятие блокировки сеансов", "Снята блокировку сеансов и регламентных заданий", "success",, ДопПоля);

КонецПроцедуры

Процедура ПрерватьПодключения()
	
	ДопПоля = Новый Структура();
	ДопПоля.Вставить("ИдентификаторИнформационнойбаза", ИдентификаторИнформационнойбаза);
	ДопПоля.Вставить("ЧислоПопыток", ЧислоПопыток);
	ТрассировкаЗадач = Новый ТрассировкаЗадач(Лог);
	ТрассировкаЗадач.Трассировать("Отключение сеансов и подключений", "Прерываю сеансы и подключения",,, ДопПоля);

	Пауза_ПятьСек = 5000;
	Пауза_ДесятьСек = 10000;

	Для Сч = 1 По ЧислоПопыток Цикл
		
		Попытка
			
			УправлениеКластером.ОтключитьСеансыИнформационнойБазы(ИдентификаторИнформационнойбаза, Фильтр);

			Приостановить(Пауза_ПятьСек);
			
			Соединения = УправлениеКластером.СписокСоединенийИнформационнойБазы(ИдентификаторИнформационнойбаза);
			Для каждого Соединение Из Соединения Цикл
			
				Лог.Поля("НомерСоединения", Соединение.НомерСоединения, "Приложение", Соединение.Приложение).Отладка("Соединение будет прервано");
	
			КонецЦикла;

			Если Соединения.Количество() > 0 Тогда
				Лог.Отладка("Пауза перед отключением соединений");
				Приостановить(Пауза_ДесятьСек);
				УправлениеКластером.ОтключитьСоединенияИнформационнойБазы(ИдентификаторИнформационнойбаза, Фильтр);
			КонецЕсли;

			Приостановить(Пауза_ДесятьСек);
			Соединения = УправлениеКластером.СписокСоединенийИнформационнойБазы(ИдентификаторИнформационнойбаза);
			Если Соединения.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;

			Если ЧислоПопыток = Сч Тогда
				
				Для каждого Соединение Из Соединения Цикл
			
					Лог.Поля("НомерСоединения", Соединение.НомерСоединения, "Приложение", Соединение.Приложение).Предупреждение("Не удалось прервать соединение");
		
				КонецЦикла;

				ВызватьИсключение "Не удалось прервать сеансы и соединения";
			
			КонецЕсли;
		
		Исключение
			
			Если ЧислоПопыток = Сч Тогда
				ДопПоля.Вставить("КоличествоСоединений", Соединения.Количество());
				ТрассировкаЗадач.Трассировать("Отключение сеансов и подключений", "Не удалось прервать соединения и сеансы в информационной базе","error", ИнформацияОбОшибке(), ДопПоля);
				СнятьБлокировкуИнформационнойБазы();
				ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Иначе
				Лог.Предупреждение("Попытка удаления сеансов не удалась. Текст ошибки: %1", ОписаниеОшибки());
			КонецЕсли;
		
		КонецПопытки;

		Лог.Предупреждение("Попытка удаления сеансов не удалась. Попытка: %1", Сч + 1);
		Приостановить(Пауза_ДесятьСек*6);
	
	КонецЦикла;

	ТрассировкаЗадач.Трассировать("Отключение сеансов и подключений", "Прерваны сеансы и подключения в информационной базе","success", , ДопПоля);
	
КонецПроцедуры

Функция ЕстьПодключенныеСеансы()
	
	СписокСеансовИБ = УправлениеКластером.СписокСеансовИнформационнойБазы(ИдентификаторИнформационнойбаза);

	Возврат СписокСеансовИБ.Количество() > 0;

КонецФункции

Процедура ОжиданиеОтключенияСеансов()
	
	Лог.Информация("Ожидаю отключения сеансов и подключений до <%1>", СрокОжиданияЗавершенияСеансов);
	
	Пока СрокОжиданияЗавершенияСеансов > ТекущаяДата() Цикл

		Приостановить(10*1000); // 10 сек

		Если НЕ ЕстьПодключенныеСеансы() Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;

	Лог.Информация("Ожидание отключения сеансов и подключений завершено");

КонецПроцедуры


Процедура БлокироватьДоступКФайловойБазе()
	ПроверитьВозможностьЗаписиВКаталогБазы();
		
	// TODO: Реализовать блокировку через файла для файлового варианта
КонецПроцедуры

Процедура РазблокироватьДоступ() Экспорт
	// TODO: Реализовать разблокировку через файла для файлового варианта

	Если ЭтоФайловаяБаза Тогда

	Иначе
		СнятьБлокировкуИнформационнойБазы();
	КонецЕсли;

КонецПроцедуры


Процедура ПриСозданииОбъекта()

	Лог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB").Поля("Префикс", "session");
	// Лог = Логирование.ПолучитьЛог("oscript.lib.commands");
	// Лог.УстановитьУровень(УровниЛога.Отладка);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////


