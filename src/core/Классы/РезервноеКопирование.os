#Использовать logos
#Использовать v8runner
#Использовать tempfiles

Перем Лог;
Перем РабочийКонфигуратор;

Перем СоздатьРезервнуюКопию;
Перем ПриОшибкеВосстановитьИзКопии;
Перем ПутьККаталогуРезервныхКопий;
Перем ВосстановитьРезервнуюКопию;
Перем ПутьКФайлуРезервнойКопии;
Перем ИмяФайлаРезервнойКопии;
Перем ОставитьФайлРезервнойКопии;
Перем ИмяИнформационнойБазы;

Процедура ДобавитьСпособВывода(ПроцессорВывода) Экспорт

	Лог.ДобавитьСпособВывода(ПроцессорВывода);

КонецПроцедуры

Процедура ДобавитьРабочийПроцессВЛог(Знач ИдентификаторРабочегоПроцесса) Экспорт

	Лог = Лог.Поля("РабочийПроцесс", ИдентификаторРабочегоПроцесса);
	
КонецПроцедуры

Функция ПриОшибкеВосстановитьИзКопии() Экспорт
	Возврат ПриОшибкеВосстановитьИзКопии;
КонецФункции

Процедура УстановитьУправлениеКонфигуратором(НовоеУправлениеКонфигуратором) Экспорт
	РабочийКонфигуратор = НовоеУправлениеКонфигуратором;
КонецПроцедуры

Процедура УстановитьНастройки(Знач НастройкиРезервногоКопирования, Знач НастройкиОбновления) Экспорт
	
	ИмяИнформационнойБазы = НастройкиОбновления.ИмяИнформационнойБазы();

	НастройкиРезервногоКопирования.Свойство("СоздатьРезервнуюКопию", СоздатьРезервнуюКопию);
	НастройкиРезервногоКопирования.Свойство("ПриОшибкеВосстановитьИзКопии", ПриОшибкеВосстановитьИзКопии);
	
	НастройкиРезервногоКопирования.Свойство("ВосстановитьРезервнуюКопию", ВосстановитьРезервнуюКопию);
	НастройкиРезервногоКопирования.Свойство("ПутьКФайлуРезервнойКопии", ПутьКФайлуРезервнойКопии);
	НастройкиРезервногоКопирования.Свойство("ОставитьФайлРезервнойКопии", ОставитьФайлРезервнойКопии);
	
	Если НастройкиРезервногоКопирования.Свойство("ИмяФайлаРезервнойКопии")
		И ЗначениеЗаполнено(НастройкиРезервногоКопирования.ИмяФайлаРезервнойКопии) Тогда
		ИмяФайлаРезервнойКопии = НастройкиРезервногоКопирования.ИмяФайлаРезервнойКопии;
	КонецЕсли;

	ВыполнитьЗаменуВИмениФайлаРезервнойКопии();

	Если НастройкиРезервногоКопирования.Свойство("ПутьККаталогуРезервныхКопий")
		И ЗначениеЗаполнено(НастройкиРезервногоКопирования.ПутьККаталогуРезервныхКопий) Тогда
		ПутьККаталогуРезервныхКопий = НастройкиРезервногоКопирования.ПутьККаталогуРезервныхКопий;
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьЗаменуВИмениФайлаРезервнойКопии()

	КлючИмениБазы = "%b";
	КлючДаты = "%d";
	
	Если СтрНайти(ИмяФайлаРезервнойКопии, КлючИмениБазы) > 0 Тогда
		
		ИмяФайлаРезервнойКопии = СтрЗаменить(ИмяФайлаРезервнойКопии, КлючИмениБазы,ИмяИнформационнойБазы);

	КонецЕсли;

	Если СтрНайти(ИмяФайлаРезервнойКопии, КлючДаты) > 0 Тогда
		
		СимволНачалаДаты = СтрНайти(ИмяФайлаРезервнойКопии, КлючДаты);
		НачалоФорматаДаты = СтрНайти(ИмяФайлаРезервнойКопии, "{");
		КонецФорматаДаты = СтрНайти(ИмяФайлаРезервнойКопии, "}");
		ДлинаСтроки = СтрДлина(ИмяФайлаРезервнойКопии);
		Лог.Поля("СимволНачалаДаты", СимволНачалаДаты, 
				"НачалоФорматаДаты", НачалоФорматаДаты, 
				"КонецФорматаДаты", КонецФорматаДаты,
				"ДлинаСтроки", ДлинаСтроки
				).Отладка("Поиск формата даты в строке <%1>", ИмяФайлаРезервнойКопии);

		Если КонецФорматаДаты > 0 Тогда
			СтрокаЗамены = Сред(ИмяФайлаРезервнойКопии, СимволНачалаДаты, КонецФорматаДаты - СимволНачалаДаты + 1);
			ФорматДаты = Сред(ИмяФайлаРезервнойКопии, НачалоФорматаДаты + 1, КонецФорматаДаты - НачалоФорматаДаты - 1);		
		Иначе
			СтрокаЗамены = КлючДаты;
			ФорматДаты = "yyyyMMdd_HHmm";
		КонецЕсли;

		ФорматированнаяДата = Формат(ТекущаяДата(), СтрШаблон("ДФ='%1'", ФорматДаты));

		Лог.Поля("СтрокаЗамены", СтрокаЗамены, "ФорматДаты", ФорматДаты,
				"ФорматированнаяДата", ФорматированнаяДата
				).Отладка("Выполняю подстановку даты по формату");
	
	КонецЕсли;

	ИмяФайлаРезервнойКопии = СтрЗаменить(ИмяФайлаРезервнойКопии, СтрокаЗамены, ФорматированнаяДата);
	ИмяФайлаРезервнойКопии = СтрЗаменить(ИмяФайлаРезервнойКопии, "/", ПолучитьРазделительПути());
	ИмяФайлаРезервнойКопии = СтрЗаменить(ИмяФайлаРезервнойКопии, "\", ПолучитьРазделительПути());

	Если СтрНачинаетсяС(ИмяФайлаРезервнойКопии, "\")
		ИЛИ СтрНачинаетсяС(ИмяФайлаРезервнойКопии, "/") Тогда
		ИмяФайлаРезервнойКопии = Сред(ИмяФайлаРезервнойКопии, 2);
	КонецЕсли;

	Лог.Поля("ИмяФайлаРезервнойКопии", ИмяФайлаРезервнойКопии).Отладка("Выполнено формирование имени файла резервной копии");

КонецПроцедуры

Процедура СоздатьРезервнуюКопию() Экспорт
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуРезервнойКопии) Тогда

		ПутьКФайлуРезервнойКопии = ОбъединитьПути(ПутьККаталогуРезервныхКопий, ИмяФайлаРезервнойКопии);
	
	КонецЕсли;
	Лог.Отладка("Путь к файлу резервной копии <%1>", ПутьКФайлуРезервнойКопии);

	ТрассировкаЗадач = Новый ТрассировкаЗадач(Лог);
	ТрассировкаЗадач.Трассировать("Создание резервной копии", "Создание резервной копии информационной базы");
	
	Попытка
		РабочийКонфигуратор.ВыгрузитьИнформационнуюБазу(ПутьКФайлуРезервнойКопии);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТрассировкаЗадач.Трассировать("Создание резервной копии", "Резервная копия информационной базы создана", "error", Инфо);
		ВызватьИсключение Инфо;

	КонецПопытки;
	
	ТрассировкаЗадач.Трассировать("Создание резервной копии", "Резервная копия информационной базы создана", "success");

КонецПроцедуры

Процедура ВосстановитьРезервнуюКопию() Экспорт
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуРезервнойКопии) Тогда
		Возврат;
	КонецЕсли;
	
	Лог.Отладка("Путь к файлу резервной копии <%1>", ПутьКФайлуРезервнойКопии);
	ТрассировкаЗадач = Новый ТрассировкаЗадач(Лог);
	ТрассировкаЗадач.Трассировать("Восстановление из резервной копии", "Восстановление информационной базы из резервной копии");
	
	Попытка
		РабочийКонфигуратор.ЗагрузитьИнформационнуюБазу(ПутьКФайлуРезервнойКопии);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТрассировкаЗадач.Трассировать("Восстановление из резервной копии", "Информационная база восстановлена из резервной копии", "error", Инфо);
		ВызватьИсключение Инфо;

	КонецПопытки;
	
	ТрассировкаЗадач.Трассировать("Восстановление из резервной копии", "Информационная база восстановлена из резервной копии", "success");

КонецПроцедуры

Функция НадоУдалитьФайлРезервнойКопии() Экспорт
	Возврат Не ОставитьФайлРезервнойКопии;
КонецФункции

Процедура УдалитьФайлРезервнойКопии() Экспорт
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуРезервнойКопии) Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Путь к файлу резервной копии <%1>", ПутьКФайлуРезервнойКопии);
	ДопПоля = Новый Структура("ПутьКФайлу", ПутьКФайлуРезервнойКопии);
	ТрассировкаЗадач = Новый ТрассировкаЗадач(Лог);
	ТрассировкаЗадач.Трассировать("Удаление файла резервной копии", "Удаление файла резервной копии",,, ДопПоля);
	УдалитьФайлы(ПутьКФайлуРезервнойКопии);
	ТрассировкаЗадач.Трассировать("Удаление файла резервной копии", "Удален файл резервной копии", "success", , ДопПоля);

КонецПроцедуры

Процедура ПриСозданииОбъекта()
	
	Лог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB").Поля("Префикс", "backup");
	// Лог = Логирование.ПолучитьЛог("oscript.lib.configor.constructor");
	//Лог.УстановитьУровень(УровниЛога.Отладка);
	СоздатьРезервнуюКопию = Ложь;
	ПриОшибкеВосстановитьИзКопии = Ложь;
	ПутьККаталогуРезервныхКопий = ВременныеФайлы.СоздатьКаталог(); // TODO Прокинуть рабочий каталог, для автоматических копий 
	ВосстановитьРезервнуюКопию = Ложь;
	ПутьКФайлуРезервнойКопии = "";
	ОставитьФайлРезервнойКопии = Ложь;
	
	Файл = Новый Файл(ВременныеФайлы.НовоеИмяФайла(".dt"));
	
	ИмяФайлаРезервнойКопии = Файл.Имя;

КонецПроцедуры