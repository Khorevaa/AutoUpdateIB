#Использовать logos
#Использовать v8runner
#Использовать tempfiles

Перем Лог;
Перем РабочийКонфигуратор;

Перем СоздатьРезервнуюКопию;
Перем ПриОшибкеВосстановитьИзКопии;
Перем ПутьККаталогуРезервныхКопий;
Перем ВосстановитьРезервнуюКопию;
Перем ПутьКФайлуРезервнойКопии;
Перем ИмяФайлаРезервнойКопии;
Перем ОставитьФайлРезервнойКопии;

Процедура ДобавитьСпособВывода(ПроцессорВывода) Экспорт

	Лог.ДобавитьСпособВывода(ПроцессорВывода);

КонецПроцедуры

Функция ПриОшибкеВосстановитьИзКопии() Экспорт
	Возврат ПриОшибкеВосстановитьИзКопии;
КонецФункции

Процедура УстановитьУправлениеКонфигуратором(НовоеУправлениеКонфигуратором) Экспорт
	РабочийКонфигуратор = НовоеУправлениеКонфигуратором;
КонецПроцедуры

Процедура УстановитьНастройки(Знач НастройкиРезервногоКопирования) Экспорт
	
	НастройкиРезервногоКопирования.Свойство("СоздатьРезервнуюКопию", СоздатьРезервнуюКопию);
	НастройкиРезервногоКопирования.Свойство("ПриОшибкеВосстановитьИзКопии", ПриОшибкеВосстановитьИзКопии);
	
	НастройкиРезервногоКопирования.Свойство("ВосстановитьРезервнуюКопию", ВосстановитьРезервнуюКопию);
	НастройкиРезервногоКопирования.Свойство("ПутьКФайлуРезервнойКопии", ПутьКФайлуРезервнойКопии);
	НастройкиРезервногоКопирования.Свойство("ОставитьФайлРезервнойКопии", ОставитьФайлРезервнойКопии);
	
	Если НастройкиРезервногоКопирования.Свойство("ИмяФайлаРезервнойКопии")
		И ЗначениеЗаполнено(НастройкиРезервногоКопирования.ИмяФайлаРезервнойКопии) Тогда
		ИмяФайлаРезервнойКопии = НастройкиРезервногоКопирования.ИмяФайлаРезервнойКопии;
	КонецЕсли;

	Если НастройкиРезервногоКопирования.Свойство("ПутьККаталогуРезервныхКопий")
		И ЗначениеЗаполнено(НастройкиРезервногоКопирования.ПутьККаталогуРезервныхКопий) Тогда
		ПутьККаталогуРезервныхКопий = НастройкиРезервногоКопирования.ПутьККаталогуРезервныхКопий;
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьРезервнуюКопию() Экспорт
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуРезервнойКопии) Тогда
		ПутьКФайлуРезервнойКопии = ОбъединитьПути(ПутьККаталогуРезервныхКопий, ИмяФайлаРезервнойКопии + ".dt");
	КонецЕсли;
	Лог.Отладка("Путь к файлу резервной копии <%1>", ПутьКФайлуРезервнойКопии);
	Лог.Информация("Создание резервной копии информационной базы");
	РабочийКонфигуратор.ВыгрузитьИнформационнуюБазу(ПутьКФайлуРезервнойКопии);
	Лог.Информация("Резервная копия информационной базы создана");

КонецПроцедуры

Процедура ВосстановитьРезервнуюКопию() Экспорт
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуРезервнойКопии) Тогда
		Возврат;
	КонецЕсли;
	
	Лог.Отладка("Путь к файлу резервной копии <%1>", ПутьКФайлуРезервнойКопии);
	Лог.Информация("Восстанавление информационной базы из резервной копии");
	РабочийКонфигуратор.ЗагрузитьИнформационнуюБазу(ПутьКФайлуРезервнойКопии);
	Лог.Информация("Информационная база восстановлена из резервной копии");

КонецПроцедуры

Функция НадоУдалитьФайлРезервнойКопии() Экспорт
	Возврат Не ОставитьФайлРезервнойКопии;
КонецФункции

Процедура УдалитьФайлРезервнойКопии() Экспорт
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуРезервнойКопии) Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Путь к файлу резервной копии <%1>", ПутьКФайлуРезервнойКопии);
	Лог.Информация("Удаляю файл резервной копии");
	УдалитьФайлы(ПутьКФайлуРезервнойКопии);

КонецПроцедуры

Процедура ПриСозданииОбъекта()
	
	Лог = Логирование.ПолучитьЛог("oscript.app.AutoUpdateIB.backup");
	// Лог = Логирование.ПолучитьЛог("oscript.lib.configor.constructor");
	//Лог.УстановитьУровень(УровниЛога.Отладка);
	СоздатьРезервнуюКопию = Ложь;
	ПриОшибкеВосстановитьИзКопии = Ложь;
	ПутьККаталогуРезервныхКопий = ВременныеФайлы.СоздатьКаталог(); // TODO Прокинуть рабочий каталог, для автоматических копий 
	ВосстановитьРезервнуюКопию = Ложь;
	ПутьКФайлуРезервнойКопии = "";
	ОставитьФайлРезервнойКопии = Ложь;
	
	Файл = Новый Файл(ВременныеФайлы.НовоеИмяФайла(".dt"));
	
	ИмяФайлаРезервнойКопии = Файл.Имя;

КонецПроцедуры