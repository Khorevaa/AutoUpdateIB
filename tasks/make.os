#Использовать gitrunner
#Использовать tempfiles

Перем Лог;
Перем КаталогПроекта;

Процедура СобратьПакет(Знач ВыходнойКаталог, Знач ПутьКМанифестуСборки)
	
	КомандаOpm = Новый Команда;
	// КомандаOpm.УстановитьРабочийКаталог(Каталог);
	КомандаOpm.УстановитьКоманду("opm");
	КомандаOpm.ДобавитьПараметр("build");	
	КомандаOpm.ДобавитьПараметр("--mf");	
	КомандаOpm.ДобавитьПараметр(ПутьКМанифестуСборки);	
	КомандаOpm.ДобавитьПараметр("--out");	
	КомандаOpm.ДобавитьПараметр(ВыходнойКаталог);
	КомандаOpm.ДобавитьПараметр(КаталогПроекта);	
	КомандаOpm.ДобавитьЛогВыводаКоманды("task.install-opm");

	КодВозврата = КомандаOpm.Исполнить();

	Если КодВозврата <> 0  Тогда
		ВызватьИсключение КомандаOpm.ПолучитьВывод();
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПакет(Знач КаталогУстановки, КаталогПакета)
	
	Лог.Информация("Каталог поиска пакет <%1>", КаталогПакета);

	МассивФайлов = НайтиФайлы(КаталогПакета, "*.ospx");

	Если МассивФайлов.Количество() = 0 Тогда
		ВызватьИсключение Новый ИнформацияОбОшибке("Ошибка установки пакета", "Не найден собранный файл пакета");
	КонецЕсли;

	ФайлПлагина = МассивФайлов[0].ПолноеИмя;

	Лог.Информация("Установка пакета библиотеки");
	КомандаOpm = Новый Команда;
	КомандаOpm.УстановитьРабочийКаталог(КаталогПакета);
	КомандаOpm.УстановитьКоманду("opm");
	КомандаOpm.ДобавитьПараметр("install");	
	КомандаOpm.ДобавитьПараметр("-f");	
	КомандаOpm.ДобавитьПараметр(ФайлПлагина);
	КомандаOpm.ДобавитьПараметр("--dest");		
	КомандаOpm.ДобавитьПараметр(КаталогУстановки);	
	КомандаOpm.ДобавитьЛогВыводаКоманды("task.install-opm");

	КодВозврата = КомандаOpm.Исполнить();

	Если КодВозврата <> 0  Тогда
		ВызватьИсключение КомандаOpm.ПолучитьВывод();
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьСборкуEXE(КаталогУстановки)
	
	Лог.Информация("Выполнение создания exe  в <%1>", КаталогУстановки);

	ФайлПриложения = ОбъединитьПути(КаталогУстановки, "autoupdateib", "src/cmd", "AutoUpdateIB.os");
	ВыходнойФайл = ОбъединитьПути(КаталогПроекта, "bin", "AutoUpdateIB.exe");

	КомандаOpm = Новый Команда;
	КомандаOpm.УстановитьРабочийКаталог(КаталогУстановки);
	КомандаOpm.УстановитьКоманду("oscript");
	КомандаOpm.ДобавитьПараметр("-make");	
	КомандаOpm.ДобавитьПараметр(ФайлПриложения);
	КомандаOpm.ДобавитьПараметр(ВыходнойФайл);	
	КомандаOpm.ДобавитьЛогВыводаКоманды("task.install-opm");

	КодВозврата = КомандаOpm.Исполнить();

	Если КодВозврата <> 0  Тогда
		ВызватьИсключение КомандаOpm.ПолучитьВывод();
	КонецЕсли;

КонецПроцедуры

Процедура ПолезнаяРабота()

	КаталогСборки = ВременныеФайлы.СоздатьКаталог();
	КаталогУстановки = ВременныеФайлы.СоздатьКаталог();
	
	ПутьКМанифестуСборки = ОбъединитьПути(КаталогПроекта, "packagedef");

	СобратьПакет(КаталогСборки, ПутьКМанифестуСборки);
	
	УстановитьПакет(КаталогУстановки, КаталогСборки);

	ВыполнитьСборкуEXE(КаталогУстановки);

	ВременныеФайлы.УдалитьФайл(КаталогСборки);
	ВременныеФайлы.УдалитьФайл(КаталогУстановки);
КонецПроцедуры

КаталогПроекта = ОбъединитьПути(ТекущийСценарий().Каталог, "..");
Лог = Логирование.ПолучитьЛог("task.install-opm");

ПолезнаяРабота();
