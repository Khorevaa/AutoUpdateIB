// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd
#Использовать asserts
#Использовать tempfiles
#Использовать v8runner
// #Использовать "../../src/core"

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯУстанавливаюПутьВыполненияКомандыКТекущейБиблиотеке");
	ВсеШаги.Добавить("ЯСоздаюВременныйКаталогИСохраняюЕгоВПеременной");
	ВсеШаги.Добавить("ЯСоздаюТестовуюБазуВКаталоге");
	ВсеШаги.Добавить("ЯДобавляюПозиционныйПараметрДляКомандыИзПеременной");

	Возврат ВсеШаги;

КонецФункции

Функция ИмяЛога() Экспорт
	Возврат "bdd.AutoUpdateIB.feature";
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	ВременныеФайлы.Удалить();
КонецПроцедуры

//Я создаю временный каталог и сохраняю его в переменной "КаталогПлагинов"
Процедура ЯСоздаюВременныйКаталогИСохраняюЕгоВПеременной(Знач ИмяПеременной) Экспорт

	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();
	
	БДД.СохранитьВКонтекст(ИмяПеременной, ВременныйКаталог);
	
КонецПроцедуры

//Я создаю тестовую базу в каталоге "ТестоваяБаза"
Процедура ЯСоздаюТестовуюБазуВКаталоге(Знач ИмяПеременной) Экспорт

	КаталогФайловойБазы = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором;
	УправлениеКонфигуратором.СоздатьФайловуюБазу(КаталогФайловойБазы);
	УправлениеКонфигуратором.УстановитьКонтекст(СтрШаблон("/F%1", КаталогФайловойБазы), "", "");
	УправлениеКонфигуратором.ЗагрузитьКонфигурациюИзФайла(ОбъединитьПути(КаталогFixtures(), "distr", "1.0/1Cv8.cf"), Истина);

КонецПроцедуры

//Я добавляю позиционный параметр для команды "gitsync" из переменной "URLРепозитория"
Процедура ЯДобавляюПозиционныйПараметрДляКомандыИзПеременной(Знач ИмяКоманды, Знач ИмяПеременной) Экспорт

	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	ЗначениеПеременной = БДД.ПолучитьИзКонтекста(ИмяПеременной);

	Команда.ДобавитьПараметр(ЗначениеПеременной);

КонецПроцедуры

//Я добавляю параметры для команды "gitsync"
//|--storage-user Администратор|
//|-useVendorUnload|
Процедура ЯДобавляюПараметрыДляКоманды(Знач ИмяКоманды, Знач ТаблицаПараметров) Экспорт
	
	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	Для Каждого Параметр Из ТаблицаПараметров Цикл
		Команда.ДобавитьПараметр(Параметр[0]);
	КонецЦикла;

КонецПроцедуры

//Я устанавливаю путь выполнения команды "gitsync" к текущей библиотеке
Процедура ЯУстанавливаюПутьВыполненияКомандыКТекущейБиблиотеке(Знач ИмяКоманды) Экспорт
	
	ПутьККоманде = ОбъединитьПути(КаталогПриложения(), "src", "cmd", "AutoUpdateIB.os");
	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр("-encoding=utf-8");

	Команда.ДобавитьПараметр(ОбернутьВКавычки(ПутьККоманде));
	
КонецПроцедуры

Функция КаталогFixtures()
	Возврат ОбъединитьПути(КаталогПриложения(), "tests", "fixtures");
КонецФункции

Функция КаталогПриложения()
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..", "..");
КонецФункции

Функция ОбернутьВКавычки(Знач Строка);
	Возврат """" + Строка + """";
КонецФункции

Функция КлючКоманды(Знач ИмяКоманды)
	Возврат "Команда-" + ИмяКоманды;
КонецФункции

Лог = Логирование.ПолучитьЛог(ИмяЛога());
//Лог.УстановитьУровень(Логирование.ПолучитьЛог("bdd").Уровень());
// Лог.УстановитьУровень(УровниЛога.Отладка);
